<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SerMs</title>
  
  <subtitle>|生活明朗，万物可爱✨</subtitle>
  <link href="https://blog.serms.top/atom.xml" rel="self"/>
  
  <link href="https://blog.serms.top/"/>
  <updated>2023-09-01T03:47:56.133Z</updated>
  <id>https://blog.serms.top/</id>
  
  <author>
    <name>SerMs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker入门操作篇</title>
    <link href="https://blog.serms.top/post/359e3d64/"/>
    <id>https://blog.serms.top/post/359e3d64/</id>
    <published>2023-07-14T13:53:28.000Z</published>
    <updated>2023-09-01T03:47:56.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Docker"><a href="#初识Docker" class="headerlink" title="初识Docker"></a>初识Docker</h1><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li><li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul><h3 id="应用部署的环境问题"><a href="#应用部署的环境问题" class="headerlink" title="应用部署的环境问题"></a>应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li><p>依赖关系复杂，容易出现兼容性问题</p></li><li><p>开发、测试、生产环境有差异</p></li></ul><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142207947.png" alt=""></p><p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p><h3 id="Docker解决依赖兼容问题"><a href="#Docker解决依赖兼容问题" class="headerlink" title="Docker解决依赖兼容问题"></a>Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p><p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p></li><li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p></li></ul><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142209399.png" alt=""></p><p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p><p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p><h3 id="Docker解决操作系统环境差异"><a href="#Docker解决操作系统环境差异" class="headerlink" title="Docker解决操作系统环境差异"></a>Docker解决操作系统环境差异</h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206694.png" alt="image-20210731143401460"></p><p>结构包括：</p><ul><li>计算机硬件：例如CPU、内存、磁盘等</li><li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li></ul><p>应用于计算机交互的流程如下：</p><p>1）应用调用操作系统应用（函数库），实现各种功能</p><p>2）系统函数库是对内核指令集的封装，会调用内核指令</p><p>3）内核指令操作计算机硬件</p><p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206991.png" alt="image-20210731144304990"></p><p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206755.png" alt="image-20210731144458680"></p><p>Docker如何解决不同系统环境的问题？</p><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul><p>如图：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206761.png" alt="image-20210731144820638"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><p>Docker如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul><p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ul><h2 id="Docker和虚拟机的区别"><a href="#Docker和虚拟机的区别" class="headerlink" title="Docker和虚拟机的区别"></a>Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p><p>两者有什么差异呢？</p><p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p><p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206154.png" alt="image-20210731145914960"></p><p>对比来看：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206714.png" alt="image-20210731152243765"></p><p>小结：</p><p>Docker和虚拟机的差异：</p><ul><li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p></li><li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p></li></ul><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><p>Docker中有几个重要的概念：</p><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p><p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p><p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p><p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p><p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206766.png" alt="image-20210731153059464"></p><p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p><h3 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p><ul><li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p></li><li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p></li></ul><p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206943.png" alt="image-20210731153743354"></p><h3 id="Docker架构-1"><a href="#Docker架构-1" class="headerlink" title="Docker架构"></a>Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p><p>Docker是一个CS架构的程序，由两部分组成：</p><ul><li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p></li><li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p></li></ul><p>如图：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206344.png" alt="image-20210731154257653"></p><blockquote><p>总结:</p><p>第一步，当我们客户端发起指令，去dockerhub或者私有仓库去拉取指定的镜像，把该镜像存储在当前Linux系统中的本地镜像中</p><p>第二不，由客户端发起指令，创建容器的指令，去基于本地镜像中的指定镜像，然后通过创建容器的命令，从而生成指定的容器，</p></blockquote><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>镜像：</p><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul><p>容器：</p><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul><p>Docker结构：</p><ul><li><p>服务端：接收命令或远程请求，操作镜像或容器</p></li><li><p>客户端：发送命令或者请求到Docker服务端</p></li></ul><p>DockerHub：</p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li></ul><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此我们在CentOS下安装Docker</p><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。</p><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><h4 id="检查centos7的内核命令"><a href="#检查centos7的内核命令" class="headerlink" title="检查centos7的内核命令"></a>检查centos7的内核命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r </span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206962.png" alt="1567261735176"></p><h4 id="centos7的ip地址"><a href="#centos7的ip地址" class="headerlink" title="centos7的ip地址"></a>centos7的ip地址</h4><p>查看ip地址命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206915.png" alt="1567262080798"></p><h4 id="更改静态ip地址"><a href="#更改静态ip地址" class="headerlink" title="更改静态ip地址"></a>更改静态ip地址</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1、找到配置文件</span><br><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">vi ifcfg-ens33</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPADDR=192.168.200.132</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.200.2</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=b8fd5718-51f5-48f8-979b-b9f1f7a5ebf2</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重启网卡</span><br><span class="line">service network restart</span><br><span class="line"></span><br><span class="line">测试网卡</span><br><span class="line">ping www.baidu.com 如果有字节输出，则表示网络正常</span><br></pre></td></tr></table></figure><h3 id="Docker安装与启动："><a href="#Docker安装与启动：" class="headerlink" title="Docker安装与启动："></a>Docker安装与启动：</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、yum 包更新到最新,需要几分钟时间(注意:也可以直接跨过)</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum update</span></span><br><span class="line"><span class="comment"># 2、作用：安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br><span class="line"><span class="comment"># 3、 设置yum源</span></span><br><span class="line"><span class="comment"># 3.1、方案一：使用ustc的（默认的）</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum-config-manager --add-repo http://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># 3.2、方案二：使用阿里云（推荐使用）</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># 4、 安装docker；出现输入的界面都按 y</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum install -y docker-ce</span></span><br><span class="line"><span class="comment"># 5、 查看docker版本</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><h4 id="设置镜像加速器"><a href="#设置镜像加速器" class="headerlink" title="设置镜像加速器"></a>设置镜像加速器</h4><p>默认的镜像是ustc，而ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。<br><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>1、 编辑文件/etc/docker/daemon.json</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行如下命令：</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">/etc/docker  表示创建一个文件夹</span></span><br><span class="line"><span class="comment">#如果有该文件则进入编辑状态，如果没有，则创建该文件然后进入编辑状态</span></span><br><span class="line"><span class="attr">vi</span> <span class="string">/etc/docker/daemon.json  </span></span><br></pre></td></tr></table></figure><p>2、在当前文件中加入阿里云的加速器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: <span class="string">[&quot;https://icw7lzsr.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">注意：[“自己的镜像加速器地址”]</span></span><br></pre></td></tr></table></figure><p>注意：docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p><p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><p>4、重启操作</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">systemctl daemon-reload</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl restart docker</span></span><br></pre></td></tr></table></figure><h4 id="Docker启动与停止命令"><a href="#Docker启动与停止命令" class="headerlink" title="Docker启动与停止命令"></a>Docker启动与停止命令</h4><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker服务：</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start docker</span></span><br><span class="line"><span class="comment"># 停止docker服务：</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">stop docker</span></span><br><span class="line"><span class="comment"># 重启docker服务：</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart docker</span></span><br><span class="line"><span class="comment"># 查看docker服务状态：</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">status docker</span></span><br><span class="line"><span class="comment"># 设置开机启动docker服务：</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">enable docker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#查看防火墙状态</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">status firewalld.service</span></span><br><span class="line"><span class="comment">#停止防火墙--临时停止</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">stop firewalld.service</span></span><br><span class="line"><span class="comment">#停止防火墙-终止</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">disable firewalld.service</span></span><br><span class="line"><span class="comment">#启动防火墙</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start firewalld.service</span></span><br></pre></td></tr></table></figure><h1 id="Docker的基本操作"><a href="#Docker的基本操作" class="headerlink" title="Docker的基本操作"></a>Docker的基本操作</h1><h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="镜像名称"><a href="#镜像名称" class="headerlink" title="镜像名称"></a>镜像名称</h3><p>首先来看下镜像的名称组成：</p><ul><li>镜名称一般分两部分组成：[repository]:[tag]。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><p>如图：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206812.png" alt="image-20210731155141362"></p><p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p>常见的镜像操作命令如图：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206771.png" alt="image-20210731155649535"></p><h4 id="常用镜像命令集："><a href="#常用镜像命令集：" class="headerlink" title="常用镜像命令集："></a>常用镜像命令集：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看本地镜像</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">images </span></span><br><span class="line"><span class="comment"># 如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">search 镜像名称</span></span><br><span class="line"><span class="comment"># 拉取镜像就是从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本 </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull 镜像名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 可以按照镜像id删除镜像，命令如下：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rmi 镜像id</span></span><br><span class="line"><span class="comment"># 删除所有镜像,注意：包含着docker images -q的符号是波浪号那个键</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rmi `docker images -q`</span></span><br></pre></td></tr></table></figure><h4 id="镜像迁移与备份命令："><a href="#镜像迁移与备份命令：" class="headerlink" title="镜像迁移与备份命令："></a>镜像迁移与备份命令：</h4><p>其中涉及到的命令有： </p><p>​    docker commit 将容器保存为镜像 </p><p>​    docker save 将镜像备份为tar文件 </p><p>​    docker load 根据tar文件恢复为镜像</p><p>容器保存为镜像命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令形式：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">commit 现有容器名称  镜像名称</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：该容器必须是停止状态。并且当前本地镜像中没有该镜像名称</p></blockquote><p>将镜像备份成tar文件命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令形式：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">save –o tar文件名 镜像名</span></span><br><span class="line"><span class="comment">#-o 输出到的文件</span></span><br></pre></td></tr></table></figure><p>根据tar文件恢复为镜像命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令形式：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">load -i tar文件名 </span></span><br><span class="line"><span class="comment">#-i 输入的文件</span></span><br></pre></td></tr></table></figure><p>修改镜像名字：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker tag 镜像ID 经项目名字:镜像版本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker</span> <span class="string">tag 51086ed63d8c nginx:1.23.1</span></span><br></pre></td></tr></table></figure><h3 id="案例1-拉取、查看镜像"><a href="#案例1-拉取、查看镜像" class="headerlink" title="案例1-拉取、查看镜像"></a>案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p><p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142207181.png" alt="image-20210731155844368"></p><p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206668.png" alt="image-20210731155856199"></p><p>3）通过命令：docker images 查看拉取到的镜像</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206367.png" alt="image-20210731155903037"></p><h3 id="案例2-保存、导入镜像"><a href="#案例2-保存、导入镜像" class="headerlink" title="案例2-保存、导入镜像"></a>案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p><p>1）利用docker xx —help命令查看docker save和docker load的语法</p><p>例如，查看save命令用法，可以输入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206308.png" alt=""></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></table></figure><p>2）使用docker save导出镜像到磁盘 </p><p>运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206176.png" alt=""></p><p>3）使用docker load加载镜像</p><p>先删除本地的nginx镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure><p>然后运行命令，加载本地文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206359.png" alt=""></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>需求：去DockerHub搜索并拉取一个Redis镜像</p><p>目标：</p><p>1）去DockerHub搜索Redis镜像</p><p>2）查看Redis镜像的名称和版本</p><p>3）利用docker pull命令拉取镜像</p><p>4）利用docker save命令将 redis:latest打包为一个redis.tar包</p><p>5）利用docker rmi 删除本地的redis:latest</p><p>6）利用docker load 重新加载 redis.tar文件</p><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><p>容器操作的命令如图：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206251.png" alt=""></p><p>容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul><p>容器，也是docker中的核心概念，容器是由镜像运行产生的运行实例。镜像和容器的关系，就如同Java语言中类和对象的关系。</p><p>Docker提供的关于容器的操作有：<br>        查看容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看正在运行的容器使用命令</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">ps</span></span><br><span class="line"><span class="comment">#查看所有容器使用命令</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">ps -a </span></span><br></pre></td></tr></table></figure><p>​        创建容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建并运行一个容器，处于运行状态</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run </span></span><br></pre></td></tr></table></figure><p>​        进入容器内部</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it 容器名称 bash</span></span><br></pre></td></tr></table></figure><p>​        启动容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">start 容器名称[或者容器ID]</span></span><br></pre></td></tr></table></figure><p>​        停止容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">stop 容器名称[或者容器ID]</span></span><br></pre></td></tr></table></figure><p>​        文件拷贝</p><p>将linux宿主机中的文件拷贝到容器内可以使用命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一步， 在Linux中创建一个文件abc.txt</span></span><br><span class="line"><span class="attr">touch</span> <span class="string">abc.txt</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#第二步，复制abc.txt到nginx的容器的   /表示根目录</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">cp 文件名称 容器名称:/ </span></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">cp abc.txt nginx:/</span></span><br><span class="line"><span class="comment">#第三步， 进入nginx容器</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">exec -it nginx /bin/bash</span></span><br><span class="line"><span class="comment"># 第四步，查看容器 / 目录下文件 是否有该文件</span></span><br><span class="line"><span class="attr">ls</span></span><br></pre></td></tr></table></figure><blockquote><p>docker这个命令是在linux系统中安装的，所以说容器中没有docker这个命令</p></blockquote><p>将文件从容器内拷贝出来到linux宿主机使用命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker cp 容器名称:容器目录 需要拷贝的文件或目录</span></span><br><span class="line"><span class="comment">#进入容器后创建文件cba.txt</span></span><br><span class="line"><span class="attr">touch</span> <span class="string">cba.txt</span></span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="attr">exit</span></span><br><span class="line"><span class="comment"># 在Linux宿主机器执行复制；将容器mycentos2的/cba.txt文件复制到 宿主机器的/root目录下</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">cp nginx:/cba.txt  /root</span></span><br></pre></td></tr></table></figure><p>​    查看容器ip地址</p><p>可以通过以下命令查看容器运行的各种数据 docker inspect 容器名称（容器ID） </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在linux宿主机下查看 nginx 的ip </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">inspect nginxclear</span></span><br></pre></td></tr></table></figure><p>​        <img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206486.png" alt=""></p><p>删除容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除指定的容器：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rm 容器名称（容器ID） </span></span><br><span class="line"><span class="comment">#删除所有容器：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rm `docker ps -a -q` </span></span><br></pre></td></tr></table></figure><blockquote><p>注意：只能删除停止状态下的容器</p></blockquote><p>暂停容器：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#让一个运行的容器暂停</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pause nginx</span></span><br></pre></td></tr></table></figure><p>让一个容器从暂停状态恢复运行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">unpause nginx</span></span><br></pre></td></tr></table></figure><h3 id="案例-创建并运行一个容器"><a href="#案例-创建并运行一个容器" class="headerlink" title="案例-创建并运行一个容器"></a>案例-创建并运行一个容器</h3><p>==可以基于已有的镜像来创建和启动容器==，创建与启动容器使用命令：docker run<br>参数说明：<br>-i：表示运行容器<br>-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。（==其实加入该命令就表示是创建的是交互式容器==）<br>—name :为创建的容器命名。</p><p>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。(==其实就是目录挂载==)<br>-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。(==其实加上该命令表示就是创建的是守护式容器==)<br>-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射(==加上该命令可以被window系统访问该容器==)</p><h4 id="1）交互式容器-前台启动"><a href="#1）交互式容器-前台启动" class="headerlink" title="1）交互式容器(前台启动)"></a>1）交互式容器(前台启动)</h4><p>以交互式方式创建并启动容器，启动完成后，直接进入当前容器。使用exit命令退出容器。需要注意的是以此种方式启动容器，如果退出容器，则容器会进入停止状态。</p><p>创建并运行nginx容器的命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -it --name=容器名称 -p 80:80  镜像名称  bash</span></span><br></pre></td></tr></table></figure><h4 id="2）守护式容器-后台启动"><a href="#2）守护式容器-后台启动" class="headerlink" title="2）守护式容器(后台启动)"></a>2）守护式容器(后台启动)</h4><p>创建一个守护式容器；如果对于一个需要长期运行的容器来说，我们可以创建一个守护式容器。命令如下（容器名称不能重复）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建并启动守护式容器</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=容器名称 镜像名称</span></span><br><span class="line"><span class="comment">#登录进入容器命令为：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">exec -it 容器名称 (或者 容器ID)  /bin/bash</span></span><br><span class="line"><span class="comment">#exit退出时，容器不会停止</span></span><br></pre></td></tr></table></figure><h4 id="3）-创建Nginx容器"><a href="#3）-创建Nginx容器" class="headerlink" title="3） 创建Nginx容器"></a>3） 创建Nginx容器</h4><p>命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=mynginx -p 80:80 nginx </span></span><br></pre></td></tr></table></figure><p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p><p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142206747.png" alt=""></p><blockquote><p>宿主机和容器的关系解析</p><p>1、window系统和虚拟机中的centos系统：<br>   在window系统上安装了虚拟机vmware，在vmware中安装了centos系统。<br>宿主机就是window系统电脑， 虚拟机就是centos<br>2、docker容器和linux(centos)：<br>   linux是宿主机，docker是容器，也就是说docker寄存在linux系统上</p></blockquote><h3 id="案例-进入容器，修改文件"><a href="#案例-进入容器，修改文件" class="headerlink" title="案例-进入容器，修改文件"></a>案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p><p><strong>提示</strong>：进入容器要用到docker exec命令。</p><p><strong>步骤</strong>：</p><p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mn bash</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><p>docker exec ：进入容器内部，执行一个命令</p></li><li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p></li><li><p>mn ：要进入的容器的名称</p></li><li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p></li></ul><p>2）进入nginx的HTML所在目录 /usr/share/nginx/html</p><p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205497.png" alt=""></p><p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p><p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p><p>我们执行命令，进入该目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure><p> 查看目录下文件：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205187.png" alt=""></p><p>3）修改index.html的内容</p><p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#传智教育欢迎您#g&#x27;</span> -e <span class="string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure><p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101，即可看到结果：">http://192.168.150.101，即可看到结果：</a></p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205717.png" alt=""></p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>docker run命令的常见参数有哪些？</p><ul><li>—name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p>查看容器日志的命令：</p><ul><li>docker logs</li><li>添加 -f 参数可以持续查看日志</li></ul><p>查看容器状态：</p><ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已经停止的</li></ul><h2 id="数据卷（容器数据管理）"><a href="#数据卷（容器数据管理）" class="headerlink" title="数据卷（容器数据管理）"></a>数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p><p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205309.png" alt=""></p><p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p><h3 id="什么是数据卷"><a href="#什么是数据卷" class="headerlink" title="什么是数据卷"></a>什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142208979.png" alt=""></p><p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p><p>这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了</p><h3 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -di \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 8080:80 \</span><br><span class="line">  nginx </span><br></pre></td></tr></table></figure><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li></ul><h3 id="案例-给nginx挂载数据卷"><a href="#案例-给nginx挂载数据卷" class="headerlink" title="案例-给nginx挂载数据卷"></a>案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p><p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p><p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p><p>步骤：</p><p>1、 创建容器并挂载数据卷到容器内的HTML目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在Linux的root目录下创建一个html文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> html</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建nginx容器并且目录挂载</span></span><br><span class="line"> docker run -di --name=mn -v /root/html/:/usr/share/nginx/html -p 80:80 nginx</span><br></pre></td></tr></table></figure><p>2、访问nginx</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205611.png" alt=""></p><p>发现展示的页面是403，这不是报错，而是因为我们nginx容器中的/usr/share/nginx/html中并没有任何html文件导致的。所以我们要执行第三步</p><p>3、从本地的nginx中找一个index.html存储到Linux系统中的/root/html文件夹中即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传index.html到/root/html中</span></span><br></pre></td></tr></table></figure><p>4、再访问nginx</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205782.png" alt=""></p><h3 id="案例-给MySQL挂载本地目录"><a href="#案例-给MySQL挂载本地目录" class="headerlink" title="案例-给MySQL挂载本地目录"></a>案例-给MySQL挂载本地目录</h3><p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p><p>实现思路如下：</p><p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p><p>2）创建目录/tmp/mysql/data</p><p>3）创建目录/tmp/mysql/conf，将课前资料提供的hmy.cnf文件上传到/tmp/mysql/conf</p><p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p><p>① 挂载/tmp/mysql/data到mysql容器内数据存储目录</p><p>② 挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件</p><p>③ 设置MySQL密码</p><p>命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建目录：</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">-p  /tmp/mysql/conf</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">-p  /tmp/mysql/data</span></span><br><span class="line"><span class="comment">#创建容器</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run \</span></span><br><span class="line"><span class="string"> --name=mysql \</span></span><br><span class="line"><span class="string"> -e MYSQL_ROOT_PASSWORD=root \</span></span><br><span class="line"><span class="string"> -p 3306:3306 \</span></span><br><span class="line"><span class="string"> -v /tmp/mysql/data:/var/lib/mysql \</span></span><br><span class="line"><span class="string"> -v /tmp/mysql/conf:/etc/mysql/conf.d \</span></span><br><span class="line"><span class="string"> -di \</span></span><br><span class="line"><span class="string"> mysql:5.7</span></span><br><span class="line"><span class="comment">#上传资料中的hmy.cnf到mysql容器中的/etc/mysql/conf.d文件夹下</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#最后测试mysql</span></span><br></pre></td></tr></table></figure><h1 id="Dockerfile自定义镜像"><a href="#Dockerfile自定义镜像" class="headerlink" title="Dockerfile自定义镜像"></a>Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p><p>而要自定义镜像，就必须先了解镜像的结构才行。</p><h2 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>我们以MySQL为例，来看看镜像的组成结构：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142208279.png" alt=""></p><p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><p>我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="Dockerfile语法"><a href="#Dockerfile语法" class="headerlink" title="Dockerfile语法"></a>Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p><p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p><p>而描述上述信息的文件就是Dockerfile文件。</p><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205843.png" alt="image-20210731180321133"></p><p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><h2 id="构建Java项目"><a href="#构建Java项目" class="headerlink" title="构建Java项目"></a>构建Java项目</h2><h3 id="基于Ubuntu构建Java项目"><a href="#基于Ubuntu构建Java项目" class="headerlink" title="基于Ubuntu构建Java项目"></a>基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li><p>步骤1：新建一个空文件夹docker-demo</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205826.png" alt=""></p></li><li><p>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142208629.png" alt=""></p></li><li><p>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205113.png" alt=""></p></li><li><p>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205675.png" alt=""></p><p>其中的内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="comment">#最终使用的是这行</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>步骤5：进入docker-demo</p><p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p></li><li><p>步骤6：运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .</span><br></pre></td></tr></table></figure></li><li><p>创建并运行当前容器</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=javaweb -p 8090:8090 javaweb:1.0</span></span><br></pre></td></tr></table></figure><p>最后访问 <a href="http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip">http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</a></p><h3 id="基于java8构建Java项目"><a href="#基于java8构建Java项目" class="headerlink" title="基于java8构建Java项目"></a>基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p><p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p><p>实现思路如下：</p><ul><li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p></li><li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p></li><li><p>③ 编写Dockerfile文件：</p><ul><li><p>a ）基于java:8-alpine作为基础镜像</p></li><li><p>b ）将app.jar拷贝到镜像中</p></li><li><p>c ）暴露端口</p></li><li><p>d ）编写入口ENTRYPOINT</p><p>内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>④ 使用docker build命令构建镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t javaweb:2.0 .</span><br></pre></td></tr></table></figure><ul><li>⑤ 使用docker run创建容器并运行</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=javaweb -p 8090:8090 javaweb:2.0</span></span><br></pre></td></tr></table></figure><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>小结：</p><ol><li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p></li></ol><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205410.png" alt=""></p><h2 id="初识DockerCompose"><a href="#初识DockerCompose" class="headerlink" title="初识DockerCompose"></a>初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version<span class="punctuation">:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> services<span class="punctuation">:</span></span><br><span class="line">  mysql<span class="punctuation">:</span></span><br><span class="line">    image<span class="punctuation">:</span> mysql<span class="punctuation">:</span><span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment<span class="punctuation">:</span></span><br><span class="line">     MYSQL_ROOT_PASSWORD<span class="punctuation">:</span> <span class="number">123</span> </span><br><span class="line">    volumes<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span><br><span class="line">  web<span class="punctuation">:</span></span><br><span class="line">    build<span class="punctuation">:</span> .</span><br><span class="line">    ports<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul><p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p><h2 id="安装DockerCompose"><a href="#安装DockerCompose" class="headerlink" title="安装DockerCompose"></a>安装DockerCompose</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。它<strong>是一个定义和运行多容器的</strong> <strong>docker应用工具</strong>。使用compose，你能通过YMAL文件配置你自己的服务，然后通过一个命令，你能使用配置文件 创建和运行所有的服务。</p><h4 id="安装DockerCompose-1"><a href="#安装DockerCompose-1" class="headerlink" title="安装DockerCompose"></a>安装DockerCompose</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">国内资源(建议)</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置文件可执行权限</span> </span><br><span class="line">chmod +x /usr/local/bin/docker-compose </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本信息</span> </span><br><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure><h2 id="部署微服务集群"><a href="#部署微服务集群" class="headerlink" title="部署微服务集群"></a>部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p><p><strong>实现思路</strong>：</p><p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p><p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p><p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p><p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p><p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p><h3 id="compose文件"><a href="#compose文件" class="headerlink" title="compose文件"></a>compose文件</h3><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205112.png" alt=""></p><p>内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:1.4.1</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MODE:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span></span><br><span class="line">  <span class="attr">userservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">  <span class="attr">orderservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./gateway</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10010:10010&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到，其中包含5个service服务：</p><ul><li><code>nacos</code>：作为注册中心和配置中心<ul><li><code>image: nacos/nacos-server:1.4.1</code>： 基于nacos/nacos-server镜像构建</li><li><code>environment</code>：环境变量<ul><li><code>MODE: standalone</code>：单点模式启动</li></ul></li><li><code>ports</code>：端口映射，这里暴露了8848端口</li></ul></li><li><code>mysql</code>：数据库<ul><li><code>image: mysql:5.7</code>：镜像版本是mysql:5.7</li><li><code>environment</code>：环境变量<ul><li><code>MYSQL_ROOT_PASSWORD: root</code>：设置数据库root账户的密码为root</li></ul></li><li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li></ul></li><li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li></ul><p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205839.png" alt=""></p><p>查看微服务目录，可以看到都包含Dockerfile文件：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205404.png" alt=""></p><p>内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure><h3 id="修改微服务配置"><a href="#修改微服务配置" class="headerlink" title="修改微服务配置"></a>修改微服务配置</h3><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p><p>如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># nacos服务地址</span></span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p><p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 服务打包的最终名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包后：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142204021.png" alt=""></p><h3 id="拷贝jar包到部署目录"><a href="#拷贝jar包到部署目录" class="headerlink" title="拷贝jar包到部署目录"></a>拷贝jar包到部署目录</h3><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p><p>user-service：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142204139.png" alt=""></p><p>order-service：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205522.png" alt=""></p><p>gateway：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142205385.png" alt=""></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。</p><p>上传到任意目录：</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142204879.png" alt=""></p><p>部署：</p><p>进入cloud-demo目录，然后运行下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>==注意：最后要把三个服务的容器重新启动==</p><h1 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h1><h2 id="搭建私有镜像仓库"><a href="#搭建私有镜像仓库" class="headerlink" title="搭建私有镜像仓库"></a>搭建私有镜像仓库</h2><h4 id="私有仓库搭建与配置"><a href="#私有仓库搭建与配置" class="headerlink" title="私有仓库搭建与配置"></a><strong>私有仓库搭建与配置</strong></h4><p>Docker官方的Docker hub（<a href="https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像">https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像</a> 到本地，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜 像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像。 </p><p>私有仓库搭建步骤：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、拉取私有仓库镜像 </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull registry </span></span><br><span class="line"><span class="comment"># 2、启动私有仓库容器 </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=registry -p 5000:5000 registry </span></span><br><span class="line"><span class="comment"># 3、打开浏览器 输入地址http://宿主机ip:5000/v2/_catalog，看到&#123;&quot;repositories&quot;:[]&#125; 表示私有仓库 搭建成功 </span></span><br><span class="line"><span class="comment"># 4、修改daemon.json </span></span><br><span class="line"><span class="attr">vi</span> <span class="string">/etc/docker/daemon.json </span></span><br><span class="line"><span class="comment"># 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将宿主机ip修改为自己宿主 机真实ip </span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: <span class="string">[</span></span><br><span class="line">        <span class="attr">&quot;http</span>:<span class="string">//hub-mirror.c.163.com&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//docker.mirrors.ustc.edu.cn&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//registry.docker-cn.com&quot;</span></span><br><span class="line">    <span class="attr">],</span></span><br><span class="line">   <span class="attr">&quot;insecure-registries&quot;</span>:<span class="string">[&quot;192.168.33.31:5000&quot;]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 5、重启docker 服务 </span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart docker </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">start registry</span></span><br></pre></td></tr></table></figure><p>访问私有仓库 <a href="http://192.168.200.140:5000/v2/_catalog">http://192.168.200.140:5000/v2/_catalog</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://IP:5000/v2/_catalog </span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202307142204440.png" alt=""></p><h2 id="推送、拉取镜像"><a href="#推送、拉取镜像" class="headerlink" title="推送、拉取镜像"></a>推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.33.31:5000/</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.33.31:5000/nginx:1.0 </span><br></pre></td></tr></table></figure><p>② 推送镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.33.31:5000/nginx:1.0 </span><br></pre></td></tr></table></figure><p>③ 拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.33.318:5000/nginx:1.0 </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">我的It之路,Docker入门操作篇</summary>
    
    
    
    
    <category term="Docker" scheme="https://blog.serms.top/tags/Docker/"/>
    
    <category term="我的It之路" scheme="https://blog.serms.top/tags/%E6%88%91%E7%9A%84It%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>手撸Java Spring</title>
    <link href="https://blog.serms.top/post/c02fe0e2/"/>
    <id>https://blog.serms.top/post/c02fe0e2/</id>
    <published>2023-05-11T08:59:11.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>首先，我们需要明白什么是BeanFactory和Ioc容器。在Java中，BeanFactory是一种用于创建和管理对象（也称为bean）的机制，而Ioc（Inversion of Control，控制反转）容器则是负责实现BeanFactory的框架。简单来说，BeanFactory就像是一个工厂，根据我们的需求来创建和提供对象。</p></div><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="Spring-IOC容器的概念"><a href="#Spring-IOC容器的概念" class="headerlink" title="Spring IOC容器的概念"></a>Spring IOC容器的概念</h3><blockquote><p>Spring IOC（控制反转）容器是Spring框架的核心组件之一。它负责管理应用程序中的对象，实现了对象的创建、组装和管理等功能。IOC容器通过反转控制，将对象的创建和依赖注入的责任从应用程序代码转移到容器中，提供了更高的灵活性和可测试性。</p></blockquote><h3 id="DI（依赖注入）"><a href="#DI（依赖注入）" class="headerlink" title="DI（依赖注入）"></a>DI（依赖注入）</h3><blockquote><p>依赖注入（DI）是IOC容器的重要特性之一。通过DI，对象的依赖关系由容器在运行时动态地注入，而不是由对象自己负责创建或查找依赖的实例。这种解耦的方式使得对象之间的协作更加灵活、可扩展和易于维护。</p></blockquote><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="获取Bean"><a href="#获取Bean" class="headerlink" title="获取Bean"></a>获取Bean</h3><p>我们先来看一下最常用的getBean()方法，在实现上，该方法主要分为三个步骤：</p><ul><li>获取BeanDefinition</li><li>创建Bean实例</li><li>初始化Bean</li></ul><h3 id="获取BeanDefinition"><a href="#获取BeanDefinition" class="headerlink" title="获取BeanDefinition"></a>获取BeanDefinition</h3><p>前两个步骤非常简单，我们直接来看第一步的实现。获取BeanDefinition主要调用的是DefaultListableBeanFactory类中的getBeanDefinition()方法，该方法返回的就是Bean的定义信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BeanDefinition <span class="title function_">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="comment">// 从缓存中获取BeanDefinition</span></span><br><span class="line">    <span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="built_in">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line">    <span class="keyword">if</span> (bd == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchBeanDefinitionException</span>(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回BeanDefinition</span></span><br><span class="line">    <span class="keyword">return</span> bd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法中，beanDefinitionMap是一个ConcurrentHashMap，用来缓存BeanDefinition对象，key为Bean的名称，value为BeanDefinition对象，这个容器是Spring IOC管理Bean的核心，后面的初始化Bean和创建Bean都是基于这个容器进行的，我们可以看到这个方法先从容器中获取BeanDefinition对象，如果获取到就直接返回，如果获取不到就抛出一个NoSuchBeanDefinitionException异常。</p><h3 id="创建Bean实例"><a href="#创建Bean实例" class="headerlink" title="创建Bean实例"></a>创建Bean实例</h3><p>下面是Bean实例化的主要过程（主要包含了Bean的创建，包括构造函数的调用和依赖注入等逻辑）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, Object[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 第一步，根据BeanDefinition获取Bean的class对象</span></span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步，校验Bean的依赖关系以及循环依赖，这里省略实现细节</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步，执行BeanDefinition中Scheduler的回调函数，这里省略实现细节</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object beanInstance;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第四步，判断是否启用了工厂方法构造Bean</span></span><br><span class="line">        <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第五步，执行构造函数</span></span><br><span class="line">        Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">        <span class="keyword">if</span> (ctors != <span class="literal">null</span> || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">                mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) &#123;</span><br><span class="line">            <span class="keyword">return</span> instantiateBean(beanName, mbd, args, ctors);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第六步，根据类型查找BeanFactory中是否注册了Bean的实例</span></span><br><span class="line">        beanInstance = getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (beanInstance != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanInstance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第七步，通过BeanWrapper来修改Bean的属性</span></span><br><span class="line">        <span class="type">BeanWrapper</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanWrapperImpl</span>();</span><br><span class="line">        bw.setConversionService(getConversionService());</span><br><span class="line">        initBeanWrapper(bw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第八步，为Bean属性设置值</span></span><br><span class="line">        applyPropertyValues(beanName, mbd, bw, mbd.getPropertyValues());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第九步，在设置完Bean属性之后，校验Bean的合法性等信息，这里省略实现细节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第十步，执行Bean的init方法，将Bean初始化完成</span></span><br><span class="line">        beanInstance = initializeBean(beanName, beanInstance, mbd);</span><br><span class="line">        <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            <span class="comment">// 添加原生的单例Bean</span></span><br><span class="line">            addSingleton(beanName, beanInstance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(beanName, <span class="string">&quot;Instantiation of bean failed&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码就是Bean的主要构造过程，其中主要包括了工厂方法构造、构造函数调用、属性注入、初始化等逻辑。</p><h3 id="初始化Bean"><a href="#初始化Bean" class="headerlink" title="初始化Bean"></a>初始化Bean</h3><p>最后一步就是初始化Bean了，这个过程主要包括以下三个方法：</p><p>firstly, applyBeanPostProcessorsBeforeInitialization(ob, beanName);</p><p>secondly, invokeInitMethods(beanName, wrappedBean, mbd);</p><p>thirdly, applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</p><p>这个方法可以在BeanDefinitionReaderUtils类中找到。</p><h3 id="Bean注入"><a href="#Bean注入" class="headerlink" title="Bean注入"></a>Bean注入</h3><p>pring在完成获取Bean和创建Bean的工作之后，需要将需要的Bean注入到需要该Bean的地方。在Spring中，Bean注入主要分为以下几种方式：</p><ul><li>构造函数注入</li><li>setter注入</li><li>通过注解实现的注入</li></ul><p>对于构造函数注入，Spring主要通过查找构造函数的参数及其类型，然后根据类型及其名称去容器中找到对应的Bean，最终完成注入。</p><p>对于setter注入，Spring则是直接对Bean的属性进行注入，setter属性注入其实是Spring IOC容器的一个特殊的语法糖，开发者只需要定义好setter方法，在容器中就可以完成 Bean的注入，非常方便。</p><p>对于通过注解实现的注入，所谓的注解指的是@Resource、@Autowired注解。这种方式只需要在需要注入的属性上添加对应的@Autowired或@Resource注解，Spring IOC就会自动完成注入。</p><blockquote><p>在源码中，Spring IOC的关键部分是BeanDefinition和BeanFactory的实现。BeanDefinition定义了Bean的元数据，包括类名、属性、依赖关系等信息。BeanFactory负责管理Bean的生命周期，根据BeanDefinition创建Bean实例，并处理依赖注入。</p><p>Spring IOC的核心原理是通过反射机制实现动态创建和初始化Bean对象。当容器启动时，会解析配置文件或注解，将Bean的定义转化为BeanDefinition对象，并缓存在IOC容器中。当需要获取Bean实例时，容器会根据BeanDefinition创建Bean对象，并将依赖注入到对应的属性中。</p></blockquote><h2 id="🔥开始手撕IOC"><a href="#🔥开始手撕IOC" class="headerlink" title="🔥开始手撕IOC"></a>🔥开始手撕IOC</h2><p>创建基本的Maven项目咱直接略过。。。。</p><p>首先我们通过读取xml配置文件的方式来实现，即需要引入demo4j的依赖来帮助我们解析配置文件内的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义Xml"><a href="#定义Xml" class="headerlink" title="定义Xml"></a>定义Xml</h3><p>定义⼀个外部的XML，⽤于声明Bean: applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.serms.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.serms.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写BeanDefinition"><a href="#编写BeanDefinition" class="headerlink" title="编写BeanDefinition"></a>编写BeanDefinition</h3><p>这个类表示一个bean的定义，包含了两个属性：id和className。其中，id是bean的唯一标识符，className是该bean对应的类名property就是属性，因我们的property属性可能有多个，并且对象类型也存在不同，所以这边直接采用List 集合的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinition</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">List</span> <span class="variable">propertyValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeanDefinition</span><span class="params">(String id, String className)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeanDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassName</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getPropertyValues</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyValues</span><span class="params">(List propertyValues)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.propertyValues = propertyValues;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写Bean工厂接口"><a href="#编写Bean工厂接口" class="headerlink" title="编写Bean工厂接口"></a>编写Bean工厂接口</h3><p><code>BeanFactory</code>接口是一个定义了创建和获取bean对象的机制的接口。</p><p>在Java中，我们可以把bean想象成应用程序中的各种对象，例如服务、工具、数据对象等等。而<code>BeanFactory</code>就像是一个工厂，负责根据我们的需求来创建和提供这些对象。</p><p>下面是<code>BeanFactory</code>接口中定义的方法：</p><ol><li><code>getBean(String beanName)</code>：根据指定的<code>beanName</code>获取对应的bean对象。通过调用这个方法，我们可以根据bean的名称来获取具体的对象实例。</li><li><code>containsBean(String name)</code>：检查是否存在指定名称的bean。通过调用这个方法，我们可以判断某个特定名称的bean是否已经被创建和注册。</li><li><code>registerBean(String beanName, Object obj)</code>：手动注册一个bean。通过调用这个方法，我们可以将一个对象注册为bean，并指定它的名称。</li></ol><p>在下述代码中，我们创建了一个名为<code>SimpleBeanFactory</code>的类，它是<code>BeanFactory</code>接口的一个简单实现。</p><p><code>SimpleBeanFactory</code>类继承了<code>DefaultSingletonBeanRegistry</code>类，这个类实现了<code>SingletonBeanRegistry</code>接口，提供了单例bean的管理功能。</p><p>在后面的<code>SimpleBeanFactory</code>类中，我们将要重写<code>getBean</code>方法。当我们调用<code>getBean</code>方法时，它会首先检查单例bean的管理器，即<code>DefaultSingletonBeanRegistry</code>，看看是否存在指定名称的bean。如果存在，则返回对应的单例bean实例；如果不存在，则抛出异常。</p><p>这样，通过<code>SimpleBeanFactory</code>创建的bean默认是单例的，因为它继承了单例bean管理的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取bean*/</span></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*判断包含Bean*/</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*注册Bean*/</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerBean</span><span class="params">(String beanName, Object obj)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建SingletonBeanRegistry接口"><a href="#创建SingletonBeanRegistry接口" class="headerlink" title="创建SingletonBeanRegistry接口"></a>创建<code>SingletonBeanRegistry</code>接口</h3><p><code>SingletonBeanRegistry</code>接口用于管理单例bean的注册和获取。</p><p>首先，让我们了解一下什么是单例bean。在Java中，单例bean是指只有一个实例存在的对象。在整个应用程序中，无论我们从何处获取该bean，都会得到同一个实例。</p><p>接下来，我们来解释<code>SingletonBeanRegistry</code>接口的方法：</p><ol><li><code>registerSingleton(String beanName, Object singletonObject)</code>：这个方法用于注册单例bean。我们可以通过指定的<code>beanName</code>将一个对象注册为单例bean。注册后，我们可以使用<code>beanName</code>来获取该单例bean的实例。</li><li><code>getSingleton(String beanName)</code>：这个方法用于获取指定<code>beanName</code>对应的单例bean实例。如果存在该单例bean，则返回其实例；如果不存在，则返回<code>null</code>。</li><li><code>containsSingleton(String beanName)</code>：这个方法用于检查是否存在指定名称的单例bean。如果存在，返回<code>true</code>；如果不存在，返回<code>false</code>。</li><li><code>getAllSingletons()</code>：这个方法用于获取所有已注册的单例bean的映射关系。返回一个<code>Map</code>，其中键是单例bean的名称，值是对应的单例bean实例。</li></ol><p>SingletonBeanRegistry接口主要用于管理单例Bean的注册和获取。它定义了两个方法：</p><ol><li><p>registerSingleton(String name, Object singleton): 将单例Bean注册到单例Bean容器中，其中name是该Bean的名称，singleton是该Bean的实例。</p></li><li><p>getSingleton(String name): 获取指定名称的单例Bean实例。</p></li><li><p>在下面代码中，我们实现了<code>SingletonBeanRegistry</code>接口的一个默认实现类<code>DefaultSingletonBeanRegistry</code>。</p><p><code>DefaultSingletonBeanRegistry</code>类维护了一个<code>singletons</code>字典，用于存储单例bean的名称和对应的实例。</p><p>在<code>registerSingleton</code>方法中，我们使用<code>synchronized</code>关键字来确保在多线程环境下对单例bean的安全管理。我们将指定的<code>singletonObject</code>对象与<code>beanName</code>关联，并将其存储在<code>singletons</code>字典中。</p><p><code>getSingleton</code>方法根据<code>beanName</code>从<code>singletons</code>字典中获取相应的单例bean实例。</p><p><code>containsSingleton</code>方法用于检查<code>singletons</code>字典中是否存在指定名称的单例bean。</p><p><code>getAllSingletons</code>方法返回<code>singletons</code>字典，其中包含了所有已注册的单例bean的名称和实例。</p></li></ol><p>此接口主要目的就是在整个Bean生命周期中只创建一次Bean，使用SingletonBeanRegistry可以方便地管理和获取单例Bean，保证每个单例Bean在整个应用中只存在一份，避免了重复创建和浪费资源的问题。同时，它还可以提供单例Bean之间的依赖注入和解耦的方式，使系统更加灵活、可维护和可扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*注册Bean*/</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通过名称获取对象*/</span></span><br><span class="line">    Object <span class="title function_">getSingleton</span><span class="params">(String beanName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*判断是否包含Bean*/</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsSingleton</span><span class="params">(String beanName)</span>;</span><br><span class="line"></span><br><span class="line">    String[] getSingletonNames();</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">createBean</span><span class="params">(BeanDefinition beanDefinition, List beanDefinitions)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现单例接口"><a href="#实现单例接口" class="headerlink" title="实现单例接口"></a>实现单例接口</h3><p>创建DefaultSingletonBeanRegistry类，实现<code>SingletonBeanRegistry</code>接口的所有方法，用于管理单例Bean的注册和获取。它维护了一个ConcurrentHashMap用于存储单例Bean，由名称和Bean对象组成，还维护了一个ConcurrentHashSet用于存储单例Bean名称。它提供了以下方法：</p><ul><li>registerSingleton(String beanName, Object singletonObject)：用于注册单例Bean。如果集合中已经包含相同名称的Bean，则抛出异常。</li><li>getSingleton(String beanName)：用于根据名称获取单例Bean的实例。</li><li>containsSingleton(String beanName)：用于判断是否存在指定名称的Bean。</li><li>getSingletonNames()：用于获取所有单例Bean的名称。</li><li>createBean(BeanDefinition beanDefinition, List beanDefinitions)：用于根据BeanDefinition对象创建Bean的实例。其中，BeanDefinition对象是从beanDefinitions参数中获取，是bean的配置信息。</li><li>getBeanDefinitionById(String id, List beanDefinitions)：用于通过Bean的唯一标识符id获取对应的BeanDefinition对象。</li></ul><p>在registerSingleton()方法中，使用synchronized锁定了singletons集合，以确保线程安全。在createBean()方法中，使用反射机制和依赖注入的方式创建和管理所有的Bean，若依赖对象未实例化，则会递归创建，并通过singletons集合进行缓存，以实现高效的访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储单例Bean的ConcurrentHashMap</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletons = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储单例Bean的名称的ConcurrentHashSet</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; beanNames = Collections.synchronizedSet(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册单例Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (singletons) &#123;</span><br><span class="line">            System.out.println(beanName + <span class="string">&quot; : &quot;</span> + singletonObject);</span><br><span class="line">            <span class="keyword">if</span> (singletons.containsKey(beanName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Could not register object [&quot;</span> + singletonObject + <span class="string">&quot;] under bean name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;: there is already object [&quot;</span> + singletons.get(beanName) + <span class="string">&quot;] bound&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            singletons.put(beanName, singletonObject);</span><br><span class="line">            beanNames.add(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Bean的名称</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singletons.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否包含单例bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsSingleton</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singletons.containsKey(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有单例bean的名称</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getSingletonNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> beanNames.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">createBean</span><span class="params">(BeanDefinition beanDefinition, List beanDefinitions)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bean = Class.forName(beanDefinition.getClassName()).newInstance();</span><br><span class="line">            List&lt;PropertyValue&gt; propertyValues = beanDefinition.getPropertyValues();</span><br><span class="line">            <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues) &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> bean.getClass().getDeclaredField(propertyValue.getName());</span><br><span class="line">                <span class="type">Object</span> <span class="variable">dependencyBean</span> <span class="operator">=</span> singletons.get(propertyValue.getValue());</span><br><span class="line">                <span class="keyword">if</span> (dependencyBean == <span class="literal">null</span>) &#123;</span><br><span class="line">                    dependencyBean = createBean(getBeanDefinitionById((String) propertyValue.getValue(), beanDefinitions), (List) singletons);</span><br><span class="line">                    singletons.put((String) propertyValue.getValue(), dependencyBean);</span><br><span class="line">                &#125;</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                declaredField.set(bean, dependencyBean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanDefinition <span class="title function_">getBeanDefinitionById</span><span class="params">(String id, List&lt;BeanDefinition&gt; beanDefinitions)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanDefinition beanDefinition : beanDefinitions) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanDefinition.getId().equals(id)) &#123;</span><br><span class="line">                <span class="keyword">return</span> beanDefinition;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建IOC容器类"><a href="#创建IOC容器类" class="headerlink" title="创建IOC容器类"></a>创建<code>IOC容器</code>类</h3><p>ClassPathXmlApplicationContext类实现了简单的IoC容器，它的作用是读取xml文件中的Bean配置信息，将其构建成BeanDefinition对象，然后使用反射创建Bean对象，并将其注册为单例对象，最后根据Bean的名称从容器中获取Bean实例。</p><p>在构造方法中，调用了readXml方法，该方法解析xml文件获取Bean的定义信息，并保存到beanDefinitions集合中。</p><p>instanceBeans方法用于创建Bean对象。它遍历beanDefinitions集合，先获取到一个Bean的定义信息，然后通过反射机制构建Bean对象，并将其添加到容器中。</p><p>getBean方法用于获取Bean对象。它内部调用了getSingleton方法，如果该Bean在容器中已经存在，就直接返回该Bean。否则，就抛出异常Bean is not defined: + beanName。</p><p>containsBean方法用于判断是否包含某个Bean对象，它内部调用了containsSingleton方法。</p><p>registerBean方法用于注册对象，它内部调用了registerSingleton方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储Bean的定义信息</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;BeanDefinition&gt; beanDefinitions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，读取xml文件并构建BeanDefinition对象，实例化Bean对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String xmlFileName)</span> &#123;</span><br><span class="line">        readXml(xmlFileName);</span><br><span class="line">        instanceBeans();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取xml文件，并将读取到的配置信息构建成BeanDefinition对象，并将其加入到beanDefinitions中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readXml</span><span class="params">(String xmlFileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(ClassPathXmlApplicationContext2.class.getClassLoader().getResourceAsStream(xmlFileName));</span><br><span class="line">            <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">            List&lt;Element&gt; beanElements = rootElement.elements(<span class="string">&quot;bean&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element beanElement : beanElements) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> beanElement.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> beanElement.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(id, className);</span><br><span class="line">                List&lt;Element&gt; propertyElements = beanElement.elements(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Element propertyElement : propertyElements) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> propertyElement.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> propertyElement.attributeValue(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                    <span class="type">PropertyValue</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyValue</span>(name, ref);</span><br><span class="line">                    System.out.println(propertyValue);</span><br><span class="line">                    beanDefinition.getPropertyValues().add(propertyValue);</span><br><span class="line">                &#125;</span><br><span class="line">                beanDefinitions.add(beanDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用反射来创建Bean对象，并将其存储到singletons中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">instanceBeans</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanDefinition beanDefinition : beanDefinitions) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//                Object bean = Class.forName(beanDefinition.getClassName()).newInstance();</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> createBean(beanDefinition, beanDefinitions);</span><br><span class="line">                registerSingleton(beanDefinition.getId(), bean);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Bean对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (bean == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//            throw new BeansException(&quot;Bean is not defined: &quot; + beanName);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否包含Bean对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> containsSingleton(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册Bean对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBean</span><span class="params">(String beanName, Object obj)</span> &#123;</span><br><span class="line">        registerSingleton(beanName, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建工厂实现类"><a href="#创建工厂实现类" class="headerlink" title="创建工厂实现类"></a>创建工厂实现类</h3><p>接下来我们对Bean工厂做一个简单的实现，基于 Map 存储 Bean 定义和 Bean 实例的容器。它实现了 BeanFactory 接口，可以通过 getBean 方法获取 Bean 的实例，并且实现了 SingletonBeanRegistry 接口，可以注册和存储 Bean 的单例实例。</p><p>SimpleBeanFactory 主要用于演示 Spring IoC 容器的基本原理和实现方式，对于真正的应用场景来说，它的功能和扩展性都远远不足。在实际项目中，我们通常会使用更为强大和灵活的容器，如 Spring 容器或其他开源容器，这些容器提供了很多高级特性，如 AOP、事务管理、Web 开发支持等，可以大大简化应用程序的开发和维护。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.registerSingleton(beanName, singletonObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (bean == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//            throw new BeansException(&quot;Bean is not defined: &quot; + beanName);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> containsSingleton(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBean</span><span class="params">(String beanName, Object obj)</span> &#123;</span><br><span class="line">        registerSingleton(beanName, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试自定义IOC容器"><a href="#测试自定义IOC容器" class="headerlink" title="测试自定义IOC容器"></a>测试自定义IOC容器</h2><h3 id="创建Dao层以及Service层"><a href="#创建Dao层以及Service层" class="headerlink" title="创建Dao层以及Service层"></a>创建Dao层以及Service层</h3><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg//serms/image-20230516151945494.png" alt=""></p><p>在UserDao中创建接口，Dao实现类中实现具体的业务，Service在进行调用，由于代码过于简单就不做展示了。</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg//serms/image-20230516152100323.png" alt=""></p><h3 id="创建Test测试类"><a href="#创建Test测试类" class="headerlink" title="创建Test测试类"></a>创建<code>Test</code>测试类</h3><p>创建容器对象传入<code>applicationContext.xml</code>文件。。。。。。。省略。。。。。</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg//serms/image-20230516152302642.png" alt="image-20230516152302642"></p><p>最后我们看运行结果</p><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg//serms/image-20230516152539108.png" alt=""></p><p>可以看到Serivce对象和Dao都以及分别进行了创建，实现了单例对象，并也实现了DI注入，如上就是所有代码过程，在整个SpringIOC的源码中实现的功能，远不止上述这些，上述只是简单的实现了一个IOC容器。如有写的不对的地方，还请指点！</p><p><strong>以上就是 手撸SpringIOC 的全部内容，看完如果对你有帮助，感谢赞助支持！。</strong></p><p><img src="https://img-blog.csdnimg.cn/20210115230629703.gif#pic_center" alt=""></p><h2 id="❤️Sponsor"><a href="#❤️Sponsor" class="headerlink" title="❤️Sponsor"></a>❤️Sponsor</h2><p>您的支持是我不断前进的动力，如果您恰巧财力雄厚，又感觉本文对您有所帮助的话，可以考虑打赏一下本文，用以维持本博客的运营费用，拒绝白嫖，从你我做起！🥰🥰🥰</p><div class="table-container"><table><thead><tr><th style="text-align:center">支付宝</th><th>微信</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/alipay.png" alt=""></td><td><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/wechat.png" alt=""></td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">还在使用别人的Spring框架吗？看我手撸的Java Spring！这个帖子将教你如何实现BeanFactory和Ioc，掌握控制反转的本质！</summary>
    
    
    
    <category term="Spring" scheme="https://blog.serms.top/categories/Spring/"/>
    
    <category term="Java" scheme="https://blog.serms.top/categories/Java/"/>
    
    <category term="IOC源码" scheme="https://blog.serms.top/categories/Spring/IOC%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Spring" scheme="https://blog.serms.top/tags/Spring/"/>
    
    <category term="Java" scheme="https://blog.serms.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>我的小目标</title>
    <link href="https://blog.serms.top/post/c084fe70/"/>
    <id>https://blog.serms.top/post/c084fe70/</id>
    <published>2023-03-28T06:51:57.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一周：异常处理和集合框架"><a href="#第一周：异常处理和集合框架" class="headerlink" title="第一周：异常处理和集合框架"></a>第一周：异常处理和集合框架</h3><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>复习Java基础语法和面向对象编程基本概念、数据类型、运算符、流程控制等基本语法知识。</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>了解Java API中常用类库，例如String、Math、Scanner等，并进行简单的练习。</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>掌握异常处理的基本语法和使用方法，学习try-catch-finally语句块，了解throw和throws关键字。</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>学习集合框架，掌握List、Set、Map等接口以及它们的实现类，了解各种集合类的特点和使用场景。</p>            </div><h3 id="第二周：多线程编程和IO流"><a href="#第二周：多线程编程和IO流" class="headerlink" title="第二周：多线程编程和IO流"></a>第二周：多线程编程和IO流</h3><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>理解面向对象编程思想，包括封装、继承、多态等基本概念，并写一些小的面向对象程序。</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>学习多线程编程，掌握线程的创建、启动、停止、同步等操作，了解线程池的概念和使用。</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>学习IO流，包括输入输出流、字节流、字符流等，理解BufferedReader、InputStreamReader、PrintWriter等常用类的使用方法。</p>            </div><h3 id="第三周：网络编程和反射机制"><a href="#第三周：网络编程和反射机制" class="headerlink" title="第三周：网络编程和反射机制"></a>第三周：网络编程和反射机制</h3><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>了解TCP/IP、UDP等网络通信协议，并学习Socket编程、HTTP协议等。</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>掌握Java的反射机制，了解在框架中应用反射的实现方式。</p>            </div><h3 id="第四周：注解以及Java虚拟机JVM"><a href="#第四周：注解以及Java虚拟机JVM" class="headerlink" title="第四周：注解以及Java虚拟机JVM"></a>第四周：注解以及Java虚拟机JVM</h3><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>学习注解的基本语法和使用方法，了解自定义注解和元注解的作用。</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>了解Java虚拟机（JVM）的原理和工作机制，了解垃圾回收算法、内存模型等概念。</p>            </div><details class="folding-tag" cyan open><summary> 打卡记录 </summary>              <div class='content'>              <div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-03-28</p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div></div>              </div>            </details><hr><h2 id="异常-（已完成）"><a href="#异常-（已完成）" class="headerlink" title="异常 （已完成）"></a>异常 （已完成）</h2><blockquote><p>概念：指的是程序在执行过程中，出现的非正常情况，如果不处理最终会导致JVM的非正常停止。</p></blockquote><h3 id="异常体系-（已完成）"><a href="#异常体系-（已完成）" class="headerlink" title="异常体系 （已完成）"></a>异常体系 （已完成）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printStackTrace</span><span class="params">()</span>;  <span class="comment">//打印异常信息，包含异常的类型、异常的原因、异常出现的位置、推荐在开发中和测试中使用。</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span>; <span class="comment">//获取发生异常的原因</span></span><br></pre></td></tr></table></figure><h2 id="WebSocket项目-已完成"><a href="#WebSocket项目-已完成" class="headerlink" title="WebSocket项目 (已完成)"></a>WebSocket项目 (已完成)</h2><p>需要实现的业务和功能</p><ol><li>用Spring实现</li><li>实现WebSocket协议</li><li>实现登录注册</li><li>实现多人聊天</li><li>实现私聊</li><li>ConcurrentMap 线程安全的</li></ol>]]></content>
    
    
    <summary type="html">给自己定的Java复习目标</summary>
    
    
    
    <category term="Java复习" scheme="https://blog.serms.top/categories/Java%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="学习任务" scheme="https://blog.serms.top/tags/%E5%AD%A6%E4%B9%A0%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>一键生成代码</title>
    <link href="https://blog.serms.top/post/1d84dc88/"/>
    <id>https://blog.serms.top/post/1d84dc88/</id>
    <published>2023-02-03T16:07:01.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>写在前面的话:<br>本脚本模板不收取任何费用,初衷就是不想重复造梯子,如果对各位有帮助的话,可以给作者打上一杯奶茶钱,目前插件还是有点小 Bug,但是不影响使用,现在各平台相关的代码生成插件也比较成熟了,并且带有独特的特色和一些自带的代码提示功能,使用感受整体都不错,但是好用的插件肯定是要收费的啦~具体的请参考下面相关插件查看</p></div><details class="folding-tag" green><summary> 查看视频教程 </summary>              <div class='content'>              <iframe class="bilibili" src="//player.bilibili.com/player.html?aid=981357376&bvid=BV1q44y1u7EL&cid=711986806&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" > </iframe>              </div>            </details><div class="table-container"><table><thead><tr><th style="text-align:center">参考插件</th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="https://github.com/gejun123456/MyBatisCodeHelper-Pro">MyBatisCodeHelper-Pro</a></strong></td></tr><tr><td style="text-align:center"><a href="https://github.com/zhengjunbase/codehelper.generator"><strong>codehelper.generator</strong></a></td></tr><tr><td style="text-align:center"><a href="https://github.com/mybatis/mybatis-3"><strong>mybatis</strong></a></td></tr><tr><td style="text-align:center"><a href="https://github.com/mybatis/generator">mybatis generator</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/pagehelper/Mybatis-PageHelper">pageHelper</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/zouzg/mybatis-generator-gui">mybatis-generator-gui</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/itfsw/mybatis-generator-plugin">mybatis generator plugin</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/baomidou/mybatis-plus">mybatisplus</a></td></tr></tbody></table></div><details class="folding-tag" cyan><summary> 功能介绍 </summary>              <div class='content'>              <p>本脚本只适用于 EasyCode 模板搭配使用</p><p>支持生成代码具体如下:</p><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>controller 层代码</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>handler 处理器</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>interceptor 拦截器</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>mapper 数据库接口</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>pojo 实体类</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>service 服务层</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>service-impl 服务层实现类</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>application.yaml yaml全局配置文件</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>Bug修复~</p>            </div><p>是不是很方便,一键生成到底,基本满足你日常 CRUD</p><p>虽然还是有点 Bug,但是我觉得他已经成熟了,因为不影响使用,具体 Bug 我会在下文中讲些</p>              </div>            </details><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>随意创建一个 SpringBoot 项目,在 pom 里面引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mp代码生成器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>搜索 EasyCode 插件安装</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504090944383.png" alt=""></p><p>在文件&gt;设置&gt;其他设置&gt;EasyCode&gt;Template 中添加组名,命名随意,可以看到,除了第一个,下面四个都插件自带的,你们也可以尝试一下</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504091123867.png" alt=""></p><p>接下来就是最重要的添加模板了</p><h3 id="pojo-java-vm"><a href="#pojo-java-vm" class="headerlink" title="pojo.java.vm"></a>pojo.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$!&#123;define.vm&#125;</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line">#save(<span class="string">&quot;/pojo&quot;</span>, <span class="string">&quot;.java&quot;</span>)</span><br><span class="line"></span><br><span class="line">#setPackageSuffix(<span class="string">&quot;pojo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#tableComment(<span class="string">&quot;实体类&quot;</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>!&#123;tableInfo.name&#125; <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> serialVersionUID= $!tool.serial();</span><br><span class="line">#foreach($column in $tableInfo.pkColumn)</span><br><span class="line">    #<span class="keyword">if</span>($&#123;column.comment&#125;)<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * $&#123;column.comment&#125;</span></span><br><span class="line"><span class="comment">     */</span>#end</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableId(value = &quot;$!&#123;column.obj.name&#125;&quot; , type = IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> $!&#123;tool.getClsNameByFullName($column.type)&#125; $!&#123;column.name&#125;;</span><br><span class="line">#end</span><br><span class="line">#foreach($column in $tableInfo.otherColumn)</span><br><span class="line"></span><br><span class="line">    #<span class="keyword">if</span>($&#123;column.comment&#125;)<span class="comment">/**$&#123;column.comment&#125;*/</span>#end</span><br><span class="line">    #<span class="keyword">if</span>(!($column.name.equals(<span class="string">&#x27;deleted&#x27;</span>)||$column.name.equals(<span class="string">&#x27;updateTime&#x27;</span>)||$column.name.equals(<span class="string">&#x27;createTime&#x27;</span>)))<span class="meta">@TableField(value = &quot;$!&#123;column.obj.name&#125;&quot;)</span>#end</span><br><span class="line">    #<span class="keyword">if</span>($column.name.equals(<span class="string">&#x27;createTime&#x27;</span>))</span><br><span class="line">    <span class="comment">/** 创建时间 */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;$!&#123;column.obj.name&#125;&quot; , fill = FieldFill.INSERT)</span>#end</span><br><span class="line">    #<span class="keyword">if</span>($column.name.equals(<span class="string">&#x27;updateTime&#x27;</span>))</span><br><span class="line">    <span class="comment">/** 修改时间 */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;$!&#123;column.obj.name&#125;&quot; , fill = FieldFill.INSERT_UPDATE)</span>#end</span><br><span class="line">    #<span class="keyword">if</span>($column.name.equals(<span class="string">&#x27;deleted&#x27;</span>))<span class="meta">@TableLogic</span></span><br><span class="line">    #end</span><br><span class="line"><span class="keyword">private</span> $!&#123;tool.getClsNameByFullName($column.type)&#125; $!&#123;column.name&#125;;</span><br><span class="line">#end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="serviceImpl-java-vm"><a href="#serviceImpl-java-vm" class="headerlink" title="serviceImpl.java.vm"></a>serviceImpl.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">##定义初始变量</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line">#set($tableName = $tool.append($tableInfo.name, <span class="string">&quot;ServiceImpl&quot;</span>))</span><br><span class="line">##设置回调</span><br><span class="line">$!callback.setFileName($tool.append($tableName, <span class="string">&quot;.java&quot;</span>))</span><br><span class="line">$!callback.setSavePath($tool.append($tableInfo.savePath, <span class="string">&quot;/service/impl&quot;</span>))</span><br><span class="line"></span><br><span class="line">##拿到主键</span><br><span class="line">#<span class="keyword">if</span>(!$tableInfo.pkColumn.isEmpty())</span><br><span class="line">    #set($pk = $tableInfo.pkColumn.get(<span class="number">0</span>))</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>($tableInfo.savePackageName)<span class="keyword">package</span> $!&#123;tableInfo.savePackageName&#125;.#&#123;end&#125;service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.pojo.$!&#123;tableInfo.name&#125;;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.mapper.$!&#123;tableInfo.name&#125;Mapper;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.service.$!&#123;tableInfo.name&#125;Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $!&#123;tableInfo.comment&#125;($!&#123;tableInfo.name&#125;)表服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;$!tool.firstLowerCase($!&#123;tableInfo.name&#125;)Service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>!&#123;tableName&#125; <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;$!&#123;tableInfo.name&#125;Mapper, $!&#123;tableInfo.name&#125;&gt; <span class="keyword">implements</span> <span class="title class_">$</span>!&#123;tableInfo.name&#125;Service &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mapper-java-vm"><a href="#mapper-java-vm" class="headerlink" title="mapper.java.vm"></a>mapper.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#set($tableName = $tool.append($tableInfo.name, <span class="string">&quot;Mapper&quot;</span>))</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line"></span><br><span class="line">$!callback.setFileName($tool.append($tableName, <span class="string">&quot;.java&quot;</span>))</span><br><span class="line">$!callback.setSavePath($tool.append($tableInfo.savePath, <span class="string">&quot;/mapper&quot;</span>))</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>(!$tableInfo.pkColumn.isEmpty())</span><br><span class="line">    #set($pk = $tableInfo.pkColumn.get(<span class="number">0</span>))</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>($tableInfo.savePackageName)<span class="keyword">package</span> $!&#123;tableInfo.savePackageName&#125;.#&#123;end&#125;mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.pojo.$!tableInfo.name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $!&#123;tableInfo.comment&#125;($!&#123;tableInfo.name&#125;)表数据库访问层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$</span>!&#123;tableName&#125; <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;$!tableInfo.name&gt; &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="service-java-vm"><a href="#service-java-vm" class="headerlink" title="service.java.vm"></a>service.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line">#set($tableName = $tool.append($tableInfo.name, <span class="string">&quot;Service&quot;</span>))</span><br><span class="line"></span><br><span class="line">$!callback.setFileName($tool.append($tableName, <span class="string">&quot;.java&quot;</span>))</span><br><span class="line">$!callback.setSavePath($tool.append($tableInfo.savePath, <span class="string">&quot;/service&quot;</span>))</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>(!$tableInfo.pkColumn.isEmpty())</span><br><span class="line">    #set($pk = $tableInfo.pkColumn.get(<span class="number">0</span>))</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>($tableInfo.savePackageName)<span class="keyword">package</span> $!&#123;tableInfo.savePackageName&#125;.#&#123;end&#125;service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.pojo.$!&#123;tableInfo.name&#125;;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $!&#123;tableInfo.comment&#125;($!&#123;tableInfo.name&#125;)表服务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$</span>!&#123;tableName&#125; <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;$!tableInfo.name&gt; &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="controller-java-vm"><a href="#controller-java-vm" class="headerlink" title="controller.java.vm"></a>controller.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line">#set($tableName = $tool.append($tableInfo.name, <span class="string">&quot;Controller&quot;</span>))</span><br><span class="line"></span><br><span class="line">$!callback.setFileName($tool.append($tableName, <span class="string">&quot;.java&quot;</span>))</span><br><span class="line">$!callback.setSavePath($tool.append($tableInfo.savePath, <span class="string">&quot;/controller&quot;</span>))</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>(!$tableInfo.pkColumn.isEmpty())</span><br><span class="line">    #set($pk = $tableInfo.pkColumn.get(<span class="number">0</span>))</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>($tableInfo.savePackageName)<span class="keyword">package</span> $!&#123;tableInfo.savePackageName&#125;.#&#123;end&#125;controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.pojo.$!&#123;tableInfo.name&#125;;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.service.$!&#123;tableInfo.name&#125;Service;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.util.R;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $!&#123;tableInfo.comment&#125;($!&#123;tableInfo.name&#125;)表控制层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$!tool.firstLowerCase($tableInfo.name)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>!&#123;tableName&#125; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> $!&#123;tableInfo.name&#125;Service $!tool.firstLowerCase($tableInfo.name)Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam</span> <span class="type">int</span> current,<span class="meta">@RequestParam</span> <span class="type">int</span> size)</span>&#123;</span><br><span class="line">        Page&lt;$!&#123;tableInfo.name&#125;&gt; page=<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current,size);</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(<span class="built_in">this</span>.$!&#123;tool.firstLowerCase($tableInfo.name)&#125;Service.page(page));&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过主键查询单条数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">selectOne</span><span class="params">(<span class="meta">@PathVariable</span> Serializable id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(<span class="built_in">this</span>.$!&#123;tool.firstLowerCase($tableInfo.name)&#125;Service.getById(id));&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> $!&#123;tableInfo.name&#125; $!tool.firstLowerCase($tableInfo.name)</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(<span class="built_in">this</span>.$!&#123;tool.firstLowerCase($tableInfo.name)&#125;Service.save($!tool.firstLowerCase($tableInfo.name)));&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">updateById</span><span class="params">(<span class="meta">@RequestBody</span> $!&#123;tableInfo.name&#125; $!tool.firstLowerCase($tableInfo.name)</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(<span class="built_in">this</span>.$!&#123;tool.firstLowerCase($tableInfo.name)&#125;Service.updateById($!tool.firstLowerCase($tableInfo.name)));&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单条/批量删除数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(<span class="built_in">this</span>.$!&#123;tool.firstLowerCase($tableInfo.name)&#125;Service.removeByIds(id));&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>r.java.vm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$!&#123;define.vm&#125;</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line"></span><br><span class="line">#save(<span class="string">&quot;/util&quot;</span>, <span class="string">&quot;R.java&quot;</span>)</span><br><span class="line"></span><br><span class="line">#setPackageSuffix(<span class="string">&quot;util&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一返回对象R</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.code = <span class="number">200</span>;</span><br><span class="line">        r.message = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.code = <span class="number">205</span>;</span><br><span class="line">        r.message = <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">exp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.code = <span class="number">500</span>;</span><br><span class="line">        r.message = <span class="string">&quot;exception&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="interceptor3-5-1-java-vm"><a href="#interceptor3-5-1-java-vm" class="headerlink" title="interceptor3.5.1.java.vm"></a>interceptor3.5.1.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$!&#123;define.vm&#125;</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line"></span><br><span class="line">#save(<span class="string">&quot;/interceptor&quot;</span>, <span class="string">&quot;MybatisPlusPageInterceptor.java&quot;</span>)</span><br><span class="line"></span><br><span class="line">#setPackageSuffix(<span class="string">&quot;interceptor&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis-Plus 3.5.1 拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusPageInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新版分页插件设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">getPaginationInnerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="handler3-5-1-java-vm"><a href="#handler3-5-1-java-vm" class="headerlink" title="handler3.5.1.java.vm"></a>handler3.5.1.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$!&#123;define.vm&#125;</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#save(<span class="string">&quot;/handler&quot;</span>,<span class="string">&quot;MyMetaObjectHandler.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#setPackageSuffix(<span class="string">&quot;handler&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis-Plus 3.5.1 处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入时的填充策略</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span> , <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span> , <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时的填充策略</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span> , <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.yaml.vm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">##设置保存名称与保存位置</span><br><span class="line">$!callback.setFileName(<span class="string">&quot;application.yaml&quot;</span>)</span><br><span class="line">$!callback.setSavePath($tool.append($modulePath, <span class="string">&quot;/src/main/resources&quot;</span>))</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/XXXX?allowPublicKeyRetrieval=true&amp;serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    druid:</span><br><span class="line">      # 下面为连接池的补充设置，应用到上面所有数据源中</span><br><span class="line">      # 初始化大小，最小，最大</span><br><span class="line">      initial-size: <span class="number">5</span></span><br><span class="line">      min-idle: <span class="number">5</span></span><br><span class="line">      max-active: <span class="number">20</span></span><br><span class="line">      # 配置获取连接等待超时的时间</span><br><span class="line">      max-wait: <span class="number">60000</span></span><br><span class="line">      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class="line">      time-between-eviction-runs-millis: <span class="number">60000</span></span><br><span class="line">      # 配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class="line">      min-evictable-idle-time-millis: <span class="number">300000</span></span><br><span class="line"></span><br><span class="line">#配置日志，我们所用的sql现在是不可见的，我们希望知道他是怎么执行的，所以我们必须要查看日志！</span><br><span class="line">mybatis-plus:</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      logic-delete-field: deleted # 全局逻辑删除的实体字段名(since <span class="number">3.3</span><span class="number">.0</span>,配置后可以忽略不配置步骤<span class="number">2</span>)</span><br><span class="line">      logic-delete-value: <span class="number">1</span> # 逻辑已删除值(默认为 <span class="number">1</span>)</span><br><span class="line">      logic-not-delete-value: <span class="number">0</span> # 逻辑未删除值(默认为 <span class="number">0</span>)</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><p>添加完后点击应用</p><h3 id="一键生成"><a href="#一键生成" class="headerlink" title="一键生成"></a>一键生成</h3><p>选择<code>数据库表</code>右击选择<code>EasyCode</code>选择第一个</p><p>注意看,目前可以看到我项目左右目录里面并没有什么代码~</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504093031339.png" alt=""></p><p>选择项目工程模块,选择模块对应的包,选择你创建好的组名</p><p>选择单表,选择单表,第一次使用模板不要多表!!!!!!!</p><p>单表构建全选所有配置,侧面按照我选的来选就行,下面我会讲解,因为这里有 Bug</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504093152583.png" alt=""></p><p>点击确定之后可以看到我左侧项目目录代码已经生成完毕了~</p><p>接下来如果你想多表创建就可以这样选择,不需要在选择<span class='p blue'>applicationYAML&interceptor类&R类&handler配置类</span>了</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504094428113.png" alt=""></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>因为本人技术有限,有些地方还是会有一点小 Bug</p><p>如下图所示:在生成的文件里面会发现有 handler 处理类 interceptor 拦截器 util 工具类都相应的爆红了~</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504094957874.png" alt=""></p><p>不要慌,这里的原因很简单,解决方案也就更很简单了</p><p>把文件名修改更 class 类名一直就欧克了</p><p>然后修改 applicationYml 文件,把你数据库名修改一下,账号密码修改一下,就可以跑了~</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504095443091.png" alt=""></p><h3 id="去-man-访问一下"><a href="#去-man-访问一下" class="headerlink" title="去 man 访问一下~"></a>去 man 访问一下~</h3><p>分页查询一下 200OK 没问题,</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504095959606.png" alt=""></p><p>其余的自己测试,这里就不多做阐述了~</p><div class="tip warning"><p>注意:Bug!!!!</p><p>在项目第一次使用模板的时候建议先单表生成,因为<span class='p blue'>applicationYAML&amp;interceptor类&amp;R类&amp;handler配置类</span>都只需生成一次,如果你多表一次性全部全选,就会创建多个<span class='p blue'>applicationYAML&amp;interceptor类&amp;R类&amp;handler配置类</span>,到时候出事就别说我没提醒~</p><p>如有更好的建议,可以在下面留言反馈~</p></div>]]></content>
    
    
    <summary type="html">减轻你的代码工作量,用EasyCode生成代码!</summary>
    
    
    
    <category term="Spring" scheme="https://blog.serms.top/categories/Spring/"/>
    
    <category term="插件" scheme="https://blog.serms.top/categories/Spring/%E6%8F%92%E4%BB%B6/"/>
    
    <category term="EasyCode代码模板生成" scheme="https://blog.serms.top/categories/Spring/EasyCode%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%E7%94%9F%E6%88%90/"/>
    
    
    <category term="SpringBoot代码模板" scheme="https://blog.serms.top/tags/SpringBoot%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
    
    <category term="MybatisPlus代码模板" scheme="https://blog.serms.top/tags/MybatisPlus%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>阿里云部署项目</title>
    <link href="https://blog.serms.top/post/32277b7/"/>
    <id>https://blog.serms.top/post/32277b7/</id>
    <published>2022-06-16T07:53:50.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>前言:ces<br>        学校近期实训周做项目,我想着能不能把项目直接部署在云上,刚好阿里云有ECS服务器免费试用活动,不嫖白不嫖,因此记录本项目的所有部署流程,从申请服务器到部署项目,完整的流程<br>        本次采用的是两台阿里云ECS的服务器,因为我项目采用数据库是主从复制的架构,所以需要两台服务器,刚好我也想把前台部署到第二台服务器上去,第一台服务器部署主要后台代码</p></div><hr><div class="table-container"><table><thead><tr><th style="text-align:center">主库服务器</th><th style="text-align:center">从库服务器</th></tr></thead><tbody><tr><td style="text-align:center">后台代码</td><td style="text-align:center">前台代码</td></tr><tr><td style="text-align:center">mysql5.0主库部署</td><td style="text-align:center">mysql5.0从库部署</td></tr><tr><td style="text-align:center">redis部署</td><td style="text-align:center">Nginx配置</td></tr><tr><td style="text-align:center">JDK环境配置</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">tomcat配置</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Maven环境配置</td></tr></tbody></table></div><hr><h2 id="阿里云服务器申请"><a href="#阿里云服务器申请" class="headerlink" title="阿里云服务器申请"></a>阿里云服务器申请</h2><p>首先去阿里云申请两台服务器,可免费使用1个月<p class='p red'>如果不用了记得提前退订</p></p><div class="tabs" id="ecs申请"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ecs申请-1">主库SerMsMaster</button></li><li class="tab"><button type="button" data-href="#ecs申请-2">从库SerMsSlave</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ecs申请-1"><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616160142652.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ecs申请-2"><p><img src="https://npm.elemecdn.com/serms-assets@1.1.0/imgs/image-20220616222532022.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h2><blockquote><p>通过本地连接阿里云ECS主库</p></blockquote><h2 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h2><blockquote><p>这里不做介绍,自行百度Linux配置网卡</p></blockquote><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h3 id="vim文本工具"><a href="#vim文本工具" class="headerlink" title="vim文本工具"></a>vim文本工具</h3><blockquote><p>yum install vim</p></blockquote><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><blockquote><ol><li><p>去[oracle][<a href="https://www.oracle.com/java/technologies/downloads/archive/]官网下载对应操作系统的JDK">https://www.oracle.com/java/technologies/downloads/archive/]官网下载对应操作系统的JDK</a></p></li><li><p>把下载好的JDK传入Linux</p></li><li><p>执行解压命令: tar -zxvf 改成你自己上传的包名 -C /usr/local</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616164103639.png" alt=""></p></li><li><p>修改系统环境变量:</p><ol><li><p>vim /etc/profile</p></li><li><p>插入以下代码,注意路径修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_331  (注意路径)</span><br><span class="line">export JRE_HOME=/usr/local/jdk1.8.0_331/jre ((注意路径))</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li></ol></li></ol><p> <img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616164702404.png" alt=""></p><ol><li><p>修改完后:wq退出</p></li><li><p>执行 source /etc/profile 刷新环境变量</p></li><li><p>执行 java -version 或 javac 查看是否安装成功</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616165121907.png" alt=""></p><p>看到显示版本号即安装成功</p></li></ol></blockquote><h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><blockquote><ol><li><p><a href="https://tomcat.apache.org/download-90.cgi">官网下载</a>对应系统版本的tomcat安装包</p></li><li><p>并上传至Linux内</p></li><li><p>执行解压命令</p><ol><li>tar -zxvf apache-tomcat-9.0.62.tar.gz -C /usr/local</li></ol></li><li><p>进入到tomcat的bin目录下执行 sh startup.sh</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616170832755.png" alt=""></p></li><li><p>这个时候我还需要去阿里云ECS控制台设置一下安全组规则,把8080端口开打</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616171251694.png" alt=""></p></li><li><p>再去浏览器访问 服务器ip+端口号8080 比如我的是<code>http://47.99.194.162:8080/</code> (本人是把防火墙直接关闭了,所以能访问)</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616171342487.png" alt=""></p></li><li><p>如果还访问不到,那就得改一下防火墙的设置,设置防火墙开放8080端口</p><ol><li><p>设置防火墙开机启动:<code>chkconfig firewalld on</code></p></li><li><p>开启防火墙: <code>systemctl start firewalld</code>(执行完之后,再去访问就访问不到了,所以我们需要开发8080端口)</p></li><li><p>查询8080端口是否开启: <code>firewall-cmd --query-port=8080/tcp</code></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616172135805.png" alt=""></p></li><li><p>开启8080端口</p><ol><li><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code>（–permanent永久生效，没有此参数重启后失效）</li></ol></li><li><p>重启防火墙</p><ol><li>firewall-cmd —reload</li></ol></li><li><p>查看8080端口是否开启成功</p><ol><li>firewall-cmd —zone=public —query-port=8080/tcp</li></ol></li><li><p>当然还可以删除指定端口</p><ol><li>firewall-cmd —zone=public —remove-port=端口号/tcp —permanent</li></ol></li><li><p>再去刷新一下页面,就又可以访问了</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616172712137.png" alt=""></p></li><li><p>查看已开放的所有端口</p><ol><li>firewall-cmd —zone=public —list-ports</li></ol></li><li><p>索性在这里一并开放3306 / 6379 / 8888 端口 后期也会用到</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616174156782.png" alt=""></p></li><li><p>其余操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">停止Tomcat服务</span><br><span class="line">sh shutdown.sh</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>安全提醒:防火墙不建议关闭,已经阿里云服务器安全组也不建议设置全部端口打开,会有一些黑客或者不正当的人入侵服务器,拿你服务器干坏事,本人就是因为此件事搞得我服务器,需要重新配置,索性也就写了这篇文章,真的不要随意打开任何一个端口!!!</p></blockquote><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><blockquote><ol><li><p>一样的去官网下载对应系统版本的安装包,并上传到Linux</p></li><li><p>解压MySql安装包之后会得到以下几个文件</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616202538594.png" alt=""></p></li><li><p>接下来需要按照以下顺序一一安装,按照顺序必须跟我一样</p><ol><li>安装顺序如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">安装到这的时候需要安装一个依赖: net-tools,在执行最后一个安装包,直接执行则会报缺少net-tools依赖</span><br><span class="line">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ol><li>安装完后执行内核更新:<ol><li>yum update</li></ol></li></ol></li><li><p>启动mysql</p><ol><li>systemctl status mysqld       查看mysql服务状态</li><li>systemctl start mysqld        启动mysql服务</li></ol></li><li><p>设置为开机启动</p><ol><li>systemctl enable mysqld</li><li>netstat -tunlp     查看已启动的服务</li><li>ps - ef|grep mysql    查看mysql进程</li></ol></li><li><p>登录mysql</p><ol><li><p>查阅临时密码:      cat /var/log/mysqld.log  | grep password</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616204308979.png" alt=""></p></li><li><p>登录mysql,并修改密码,开放访问权限</p><ol><li><p>mysql -uroot -p   (输入查出来的临时密码)</p></li><li><p>修改密码以及访问权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_length=4;设置密码长度最低位数</span><br><span class="line">set global validate_password_policy=LOW;设置密码安全等级低,便于密码可以修改成root</span><br><span class="line">set password = password(&#x27;root&#x27;);设置密码为root</span><br><span class="line">grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;开启访问权限</span><br><span class="line">flush privileges;刷新权限</span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616204910291.png" alt=""></p></li></ol></li><li><p>到此就可以用Navicat进行外部连接了</p></li></ol></li></ol></blockquote><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><blockquote><ol><li><p>官网下载对应系统版本的安装包,并上传至Linux系统和解压安装,在此不做阐述</p></li><li><p>安装Redis的依赖环境gcc, 执行:   yum install gcc-c++</p></li><li><p>进入安装redis软件目录,进行编译,执行:  make</p></li><li><p>在进入redis软件目录下的src执行: make install</p></li><li><p>redis启动与停止</p><ol><li>在redis/src下执行: ./redis-server</li></ol><p><img src="C:\Users\18399\Desktop\image-20220616210708814.png" alt="image-20220616210708814"></p></li><li><p>进入redis根目录,修改配置文件</p><ol><li><p>vim redis.conf</p></li><li><p>找到daemonize,修改为 yes  允许后台启动</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616211256462.png" alt=""></p></li><li><p>修改配置文件,将 bind 注释 即可实现外部访问</p></li></ol><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616211638029.png" alt=""></p><ol><li>将protected-mode 改为 no</li></ol></li><li><p>启动Redis</p><ol><li><p>src/redis-server ./redis.conf</p></li><li><p>外部进行连接</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616212406655.png" alt=""></p></li></ol></li><li><p>设置为开机启动</p><ol><li><p>网上有很多教程这里就不多阐述了 <a href="https://blog.csdn.net/qq_28041113/article/details/122291622">点我查看教程</a></p></li><li><p>快捷操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">打开redis命令:service redis start</span><br><span class="line">                              </span><br><span class="line">关闭redis命令:service redis stop</span><br><span class="line">                              </span><br><span class="line">设为开机启动:chkconfig redis on</span><br><span class="line">                              </span><br><span class="line">设为开机关闭:chkconfig redis off</span><br></pre></td></tr></table></figure></li></ol></li></ol></blockquote><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><blockquote><p>执行: yum install git</p><p>查看git版本: git —version</p></blockquote><p>安装Mavne</p><blockquote><p>自行百度</p></blockquote><h2 id="后端部署"><a href="#后端部署" class="headerlink" title="后端部署"></a>后端部署</h2><blockquote><ol><li><p>拉取git项目到本地 git clone xxxxx</p></li><li><p>在项目根目录编写启动脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"><span class="built_in">echo</span>  自动化部《湘约楼》署脚本启动 </span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 停止原来运行中的工程</span><br><span class="line">APP_NAME=xyl_take_out</span><br><span class="line"></span><br><span class="line">tpid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;tpid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Stop Process...&#x27;</span></span><br><span class="line">    <span class="built_in">kill</span> -15 <span class="variable">$tpid</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line">tpid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;tpid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Kill Process!&#x27;</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$tpid</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Stop Success!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 准备从Git仓库拉取最新代码</span><br><span class="line"><span class="built_in">cd</span> /usr/local/javaapp/xyl_ms_km</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 开始从Git仓库拉取最新代码</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">echo</span> 代码拉取完成</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 开始打包</span><br><span class="line">output=`mvn clean package -Dmaven.test.skip=<span class="literal">true</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 启动项目</span><br><span class="line"><span class="built_in">nohup</span> java -jar xyl_take_out-1.0-SNAPSHOT.jar &amp;&gt; xyl_take_out.log &amp;</span><br><span class="line"><span class="built_in">echo</span> 项目启动完成</span><br></pre></td></tr></table></figure></li><li><p>赋予脚本最高权限,然后执行, sh xyl.sh</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616221445525.png" alt=""></p><p>稍等片刻,将会打包完成</p><p>这里呢启动之后肯定是访问不到的,因为从库的sql还没配置,所以先配置从库的数据库和前端页面在来启动</p></li></ol></blockquote><h2 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h2><h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h3><blockquote><p>上面有教程,这边不做阐述</p></blockquote><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><ol><li>前期准备</li></ol><blockquote><p>安装依赖包<br>yum -y install gcc pcre-devel zlib-devel openssl openssl-devel<br>下载Nginx安装包<br>wget  <a href="http://nginx.org/download/nginx-1.22.0.tar.gz">http://nginx.org/download/nginx-1.22.0.tar.gz</a><br>解压 tar -zxvf nginx-1.22.0.tar.gz<br>创建文件夹 mkdir -p /usr/local/nginx<br>执行安装命令: ./configure —prefix=/usr/local/nginx<br>执行编译: make &amp;&amp; make install<br>导入静态页面到html目录</p><p>配置反向代理<br>修改nginx.conf文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   html/dist;</span><br><span class="line">    index  index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#反向代理配置</span><br><span class="line">location ^~ /api/ &#123;</span><br><span class="line">    rewrite ^/api/(.*)$ /$1 break;</span><br><span class="line">    proxy_pass http://47.99.194.162:8888/</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><ol><li><p>配置Nginx环境</p><ol><li>编辑 vim /etc/profile</li><li>export PATH=/usr/local/nginx/sbin:$PATH</li><li>执行 source /etc/profile 刷新环境变量</li></ol></li><li><p>配置开机启动</p><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"> &gt;<span class="comment">#!/bin/sh</span></span><br><span class="line"> &gt;<span class="comment">#</span></span><br><span class="line"> &gt;<span class="comment"># nginx - this script starts and stops the nginx daemon</span></span><br><span class="line"> &gt;<span class="comment">#</span></span><br><span class="line"> &gt;<span class="comment"># chkconfig:   - 85 15</span></span><br><span class="line"> &gt;<span class="comment"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span></span><br><span class="line"> &gt;<span class="comment">#               proxy and IMAP/POP3 proxy server</span></span><br><span class="line"> &gt;<span class="comment"># processname: nginx</span></span><br><span class="line"> &gt;<span class="comment"># config:      /etc/nginx/nginx.conf</span></span><br><span class="line"> &gt;<span class="comment"># config:      /etc/sysconfig/nginx</span></span><br><span class="line"> &gt;<span class="comment"># pidfile:     /var/run/nginx.pid</span></span><br><span class="line"></span><br><span class="line"> &gt;<span class="comment"># Source function library.</span></span><br><span class="line"> &gt;. /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line"> &gt;<span class="comment"># Source networking configuration.</span></span><br><span class="line"> &gt;. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"> &gt;<span class="comment"># Check that networking is up.</span></span><br><span class="line"> &gt;[ <span class="string">&quot;<span class="variable">$NETWORKING</span>&quot;</span> = <span class="string">&quot;no&quot;</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line"> &gt;nginx=<span class="string">&quot;/usr/local/nginx/sbin/nginx&quot;</span></span><br><span class="line"> &gt;prog=$(<span class="built_in">basename</span> <span class="variable">$nginx</span>)</span><br><span class="line"></span><br><span class="line"> &gt;NGINX_CONF_FILE=<span class="string">&quot;/usr/local/nginx/conf/nginx.conf&quot;</span></span><br><span class="line"></span><br><span class="line"> &gt;[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line"> &gt;lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">make_dirs</span></span>() &#123;</span><br><span class="line"> <span class="comment"># make required directories</span></span><br><span class="line"> user=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">&quot;configure arguments:.*--user=&quot;</span> | sed <span class="string">&#x27;s/[^*]*--user=\([^ ]*\).*/\1/g&#x27;</span> -`</span><br><span class="line"> <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$user</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;`grep <span class="variable">$user</span> /etc/passwd`&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">       useradd -M -s /bin/nologin <span class="variable">$user</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    options=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">&#x27;configure arguments:&#x27;</span>`</span><br><span class="line">    <span class="keyword">for</span> opt <span class="keyword">in</span> <span class="variable">$options</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ `<span class="built_in">echo</span> <span class="variable">$opt</span> | grep <span class="string">&#x27;.*-temp-path&#x27;</span>` ]; <span class="keyword">then</span></span><br><span class="line">            value=`<span class="built_in">echo</span> <span class="variable">$opt</span> | <span class="built_in">cut</span> -d <span class="string">&quot;=&quot;</span> -f 2`</span><br><span class="line">            <span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$value</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="comment"># echo &quot;creating&quot; $value</span></span><br><span class="line">                <span class="built_in">mkdir</span> -p <span class="variable">$value</span> &amp;&amp; <span class="built_in">chown</span> -R <span class="variable">$user</span> <span class="variable">$value</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">  [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</span><br><span class="line">  [ -f <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</span><br><span class="line">  make_dirs</span><br><span class="line">  <span class="built_in">echo</span> -n $<span class="string">&quot;Starting <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">  daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">  retval=$?</span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line">  [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; <span class="built_in">touch</span> <span class="variable">$lockfile</span></span><br><span class="line">  <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> -n $<span class="string">&quot;Stopping <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">  killproc <span class="variable">$prog</span> -QUIT</span><br><span class="line">  retval=$?</span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line">  [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; <span class="built_in">rm</span> -f <span class="variable">$lockfile</span></span><br><span class="line">  <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">  configtest || <span class="built_in">return</span> $?</span><br><span class="line">  stop</span><br><span class="line">  <span class="built_in">sleep</span> 1</span><br><span class="line">  start</span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">  configtest || <span class="built_in">return</span> $?</span><br><span class="line">  <span class="built_in">echo</span> -n $<span class="string">&quot;Reloading <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">  killproc <span class="variable">$prog</span> -HUP</span><br><span class="line">  retval=$?</span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">  restart</span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line"><span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">  status <span class="variable">$prog</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">  rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">      rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">      <span class="variable">$1</span></span><br><span class="line">      ;;</span><br><span class="line">  stop)</span><br><span class="line">      rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">      <span class="variable">$1</span></span><br><span class="line">      ;;</span><br><span class="line">  restart|configtest)</span><br><span class="line">      <span class="variable">$1</span></span><br><span class="line">      ;;</span><br><span class="line">  reload)</span><br><span class="line">      rh_status_q || <span class="built_in">exit</span> 7</span><br><span class="line">      <span class="variable">$1</span></span><br><span class="line">      ;;</span><br><span class="line">  force-reload)</span><br><span class="line">      force_reload</span><br><span class="line">      ;;</span><br><span class="line">  status)</span><br><span class="line">      rh_status</span><br><span class="line">      ;;</span><br><span class="line">  condrestart|try-restart)</span><br><span class="line">      rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">          ;;</span><br><span class="line">  *)</span><br><span class="line">      <span class="built_in">echo</span> $<span class="string">&quot;Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</span></span><br><span class="line">      <span class="built_in">exit</span> 2</span><br><span class="line"> &gt;<span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>这段代码是官方提供的,并不是我自己写的,里面有两行Nginx的路径需要改成你自己的安装路径</p></blockquote></li><li><p>编写完毕之后在/etc/init.d下创建nginx文件,把上面的代码复制进去,并给予最高执行权限</p></li><li><p>使用chkconfig管理</p><ol><li><p><strong>将nginx服务加入chkconfig管理列表</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig --add /etc/init.d/nginx</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用service管理服务</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service nginx start    启动服务   </span></span><br><span class="line"><span class="comment"># service nginx stop     停止服务</span></span><br><span class="line"><span class="comment"># service nginx restart  重启服务</span></span><br><span class="line"><span class="comment"># service nginx status   查询服务的状态</span></span><br><span class="line"><span class="comment"># service nginx relaod   刷新配置文</span></span><br></pre></td></tr></table></figure></li><li><p><strong>设置终端模式开机启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig nginx on</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="安装MySql"><a href="#安装MySql" class="headerlink" title="安装MySql"></a>安装MySql</h3><blockquote><p>上述已经讲到,这里不做阐述</p></blockquote><h2 id="配置主从复制"><a href="#配置主从复制" class="headerlink" title="配置主从复制"></a>配置主从复制</h2><h3 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h3><blockquote><p>修改 vim /etc/my.nf<br>[mysql]<br>log-bin = mysql-bin            #[必须]启用二进制日志<br>server-id=100            服务器唯一ID</p><p>重启mysql服务<br>systemctl restart mysqld</p><p>登录到主库中执行代码<br>GRANT REPLICATION SLAVE ON <em>.</em> to ‘serms’@’%’ identified by ‘Root@123456’;<br>上面SQL的作用是创建一个用户serms,密码为Root@123456,并且给serms用户授予 REPLICATION SLAVE权限,常用于建立复制时所需要用到的用户权限,也就是说slave必须被master授权具有权限的用户,才能提供该用户复制</p><p>执行SQL,查看FIle和Position的值<br>show master status;</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616235947262.png" alt=""></p><p>至此不需要在动主库的mysql了</p></blockquote><h3 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h3><blockquote><p>修改mysql数据库配置文件<br>server-id=100<br>刷新数据库</p><p>执行SQL</p><p>change master to master_host=’47.99.194.162’,master_user=’serms’,master_password=’Root@123456’,master_log_file=’mysql-bin.000001’,master_log_pos=438;</p><p>start slave;</p><p>查看数据库状态</p><p>show slave status;</p></blockquote><p>到此呢主库和从库的配置就已经结束啦~</p><p>有些地方写的不是很好, 有不明白的地方请在下方留言</p><h2 id="❤️Sponsor"><a href="#❤️Sponsor" class="headerlink" title="❤️Sponsor"></a>❤️Sponsor</h2><p>您的支持是我不断前进的动力，如果您恰巧财力雄厚，又感觉本文对您有所帮助的话，可以考虑打赏一下本文，用以维持本博客的运营费用，拒绝白嫖，从你我做起！🥰🥰🥰</p><div class="table-container"><table><thead><tr><th style="text-align:center">支付宝</th><th>微信</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/alipay.png" alt=""></td><td><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/wechat.png" alt=""></td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">使用阿里云两台服务器部署我的毕业设计</summary>
    
    
    
    <category term="阿里云" scheme="https://blog.serms.top/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="项目部署" scheme="https://blog.serms.top/categories/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="阿里云ECS" scheme="https://blog.serms.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91ECS/"/>
    
    <category term="项目部署" scheme="https://blog.serms.top/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>NavigationDuplicated异常警告!!!</title>
    <link href="https://blog.serms.top/post/86aff880/"/>
    <id>https://blog.serms.top/post/86aff880/</id>
    <published>2022-05-22T12:46:59.000Z</published>
    <updated>2023-09-01T03:47:56.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Vue路由当你重复传相同参数时,控制台就会报:<span class='p red'>NavigationDuplicated</span></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.25/imgs/image-20220522204757177.png" alt=""></p><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><p>最新的vue-router引入了promise</p><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>通过给push方法传递相应的成功,失败的回调,可以捕获当前错误,可以解决问题</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">name: &#x27;search&#x27;,</span><br><span class="line">query: &#123;</span><br><span class="line">k: this.keyword.toUpperCase(),</span><br><span class="line">&#125;,</span><br><span class="line">params: &#123;</span><br><span class="line">keyword: this.keyword,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">() =&gt; &#123; &#125;,//函数传入成功</span><br><span class="line">() =&gt; &#123; &#125;//函数传入失败</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="tip success"><p><span class='p red'>但是这种方法治标不治本!!!!</span></p></div><hr><blockquote><p>重写Router原型对象上的push方法和replace方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置路由的主文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"><span class="comment">//打印路由原型</span></span><br><span class="line"><span class="comment">// console.log(Router.prototype);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//备份Router原型对象的push方法</span></span><br><span class="line"><span class="keyword">let</span> originPush = <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>;</span><br><span class="line"><span class="comment">// console.log(originPush);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//备份Router原型对象的replace方法</span></span><br><span class="line"><span class="keyword">let</span> originReplace = <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">replace</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写push和replace方法</span></span><br><span class="line"><span class="comment">//第一个参数:路由路径以及传递的参数</span></span><br><span class="line"><span class="comment">//第二个参数:成功的回调</span></span><br><span class="line"><span class="comment">//第三个参数:失败的回调</span></span><br><span class="line"><span class="comment">//this:当前的路由对象(当前组件实例对象)</span></span><br><span class="line"><span class="comment">//call和apply的区别:都是改变this指向,但是call和apply的区别是:call是把参数传递给函数,apply是把参数传递给函数的数组</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">location, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (resolve &amp;&amp; reject) &#123;</span><br><span class="line">        <span class="keyword">return</span> originPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> originPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, <span class="function">() =&gt;</span> &#123; &#125;, <span class="function">() =&gt;</span> &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">replace</span> = <span class="keyword">function</span> (<span class="params">location, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (resolve &amp;&amp; reject) &#123;</span><br><span class="line">        <span class="keyword">return</span> originReplace.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> originReplace.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, <span class="function">() =&gt;</span> &#123; &#125;, <span class="function">() =&gt;</span> &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="comment">//配置路由</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>至此push和replace重复提交问题以全部解决</p><hr><h2 id="❤️Sponsor"><a href="#❤️Sponsor" class="headerlink" title="❤️Sponsor"></a>❤️Sponsor</h2><p>您的支持是我不断前进的动力，如果您恰巧财力雄厚，又感觉本文对您有所帮助的话，可以考虑打赏一下本文，用以维持本博客的运营费用，拒绝白嫖，从你我做起！🥰🥰🥰</p><div class="table-container"><table><thead><tr><th style="text-align:center">支付宝</th><th>微信</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/alipay.png" alt=""></td><td><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/wechat.png" alt=""></td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">Vue路由报错问题</summary>
    
    
    
    <category term="Vue" scheme="https://blog.serms.top/categories/Vue/"/>
    
    <category term="Vue-NavigationDuplicated异常" scheme="https://blog.serms.top/categories/Vue/Vue-NavigationDuplicated%E5%BC%82%E5%B8%B8/"/>
    
    <category term="编程笔记" scheme="https://blog.serms.top/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Vue" scheme="https://blog.serms.top/tags/Vue/"/>
    
    <category term="NavigationDuplicated异常" scheme="https://blog.serms.top/tags/NavigationDuplicated%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由传参的三种方式</title>
    <link href="https://blog.serms.top/post/da904ab5/"/>
    <id>https://blog.serms.top/post/da904ab5/</id>
    <published>2022-05-22T11:10:18.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="tip home"><p><strong>vue</strong> 路由传参的使用场景一般都是应用在父路由跳转到子路由时，携带参数跳转。传参方式可划分为 <code>params</code> 传参和 <code>query</code> 传参，而 <code>params</code> 传参又可分为在 <strong>url</strong> 中显示参数和不显示参数两种方式，这就是vue路由传参的三种方式。</p></div><h2 id="方式一：params-传参（显示参数）"><a href="#方式一：params-传参（显示参数）" class="headerlink" title="方式一：params 传参（显示参数）"></a>方式一：<code>params</code> 传参（显示参数）</h2><span class='p red'>params</span> 传参（显示参数）又可分为 声明式 和 编程式 两种方式> 1、声明式 `router-link`该方式是通过 `router-link` 组件的 `to` 属性实现，该方法的参数可以是一个字符串路径，或者一个描述地址的对象。使用该方式传值的时候，需要子路由提前配置好参数，例如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//子路由配置</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/child/:id&#x27;,</span><br><span class="line">component: Child</span><br><span class="line">&#125;</span><br><span class="line">//父路由组件</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/child/123&quot;</span>&gt;</span>进入Child路由<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2、编程式 <code>this.$router.push</code></p></blockquote><p>使用该方式传值的时候，同样需要子路由提前配置好参数，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//子路由配置</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/child/:id&#x27;,</span><br><span class="line">component: Child</span><br><span class="line">&#125;</span><br><span class="line">//父路由编程式传参(一般通过事件触发)</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">path:&#x27;/child/$&#123;id&#125;&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在子路由中可以通过下面代码来获取传递的参数值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure><h2 id="方式二：params-传参（不显示参数）"><a href="#方式二：params-传参（不显示参数）" class="headerlink" title="方式二：params 传参（不显示参数）"></a>方式二：<code>params</code> 传参（不显示参数）</h2><p><code>params</code> 传参（不显示参数）也可分为 声明式 和 编程式 两种方式，与方式一不同的是，这里是通过路由的别名 <code>name</code> 进行传值的</p><p>1、声明式 <code>router-link</code></p><p>该方式也是通过 <code>router-link</code> 组件的 <code>to</code> 属性实现，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;Child&#x27;,params:&#123;id:123&#125;&#125;&quot;&gt;进入Child路由&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>2、编程式 <code>this.$router.push</code></p><p>使用该方式传值的时候，同样需要子路由提前配置好参数，不过不能再使用 <code>:/id</code> 来传递参数了，因为父路由中，已经使用 <code>params</code> 来携带参数了，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//子路由配置</span><br><span class="line">&#123;</span><br><span class="line">  path: &#x27;/child,</span><br><span class="line">  name: &#x27;Child&#x27;,</span><br><span class="line">  component: Child</span><br><span class="line">&#125;</span><br><span class="line">//父路由编程式传参(一般通过事件触发)</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">    name:&#x27;Child&#x27;,</span><br><span class="line">    params:&#123;</span><br><span class="line">    id:123</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在子路由中可以通过下面代码来获取传递的参数值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure><p><strong>注意：上述这种利用 <code>params</code> 不显示 <code>url</code> 传参的方式会导致在刷新页面的时候，传递的值会丢失</strong></p><h2 id="方式三：query-传参（显示参数）"><a href="#方式三：query-传参（显示参数）" class="headerlink" title="方式三：query 传参（显示参数）"></a>方式三：<code>query</code> 传参（显示参数）</h2><p><code>query</code> 传参（显示参数）也可分为 声明式 和 编程式 两种方式</p><blockquote><p>1、声明式 <code>router-link</code></p></blockquote><p>该方式也是通过 <code>router-link</code> 组件的 <code>to</code> 属性实现，不过使用该方式传值的时候，需要子路由提前配置好路由别名（<code>name</code> 属性），例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//子路由配置</span><br><span class="line">&#123;</span><br><span class="line">  path: &#x27;/child,</span><br><span class="line">  name: &#x27;Child&#x27;,</span><br><span class="line">  component: Child</span><br><span class="line">&#125;</span><br><span class="line">//父路由组件</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;Child&#x27;,query:&#123;id:123&#125;&#125;&quot;&gt;进入Child路由&lt;/router-link&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2、编程式 <code>this.$router.push</code></p></blockquote><p>使用该方式传值的时候，同样需要子路由提前配置好路由别名（<code>name</code> 属性），例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//子路由配置</span><br><span class="line">&#123;</span><br><span class="line">  path: &#x27;/child,</span><br><span class="line">  name: &#x27;Child&#x27;,</span><br><span class="line">  component: Child</span><br><span class="line">&#125;</span><br><span class="line">//父路由编程式传参(一般通过事件触发)</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">    name:&#x27;Child&#x27;,</span><br><span class="line">    query:&#123;</span><br><span class="line">    id:123</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在子路由中可以通过下面代码来获取传递的参数值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.query.id</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Vue路由传参的三种方式</summary>
    
    
    
    <category term="Vue" scheme="https://blog.serms.top/categories/Vue/"/>
    
    <category term="Vue路由三种传参方式" scheme="https://blog.serms.top/categories/Vue/Vue%E8%B7%AF%E7%94%B1%E4%B8%89%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/"/>
    
    <category term="编程笔记" scheme="https://blog.serms.top/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Vue" scheme="https://blog.serms.top/tags/Vue/"/>
    
    <category term="Vue路由传参的三种方式" scheme="https://blog.serms.top/tags/Vue%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Vue(尚硅谷天禹老师)</title>
    <link href="https://blog.serms.top/post/75ce1e02/"/>
    <id>https://blog.serms.top/post/75ce1e02/</id>
    <published>2022-05-21T16:24:23.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>📝学习资料：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH">尚硅谷天禹Vue</a><br>🚩时间安排：预计5天更新完<br>🎯开始时间：05-21<br>🎉结束时间：05-xx</p></div><h2 id="Vue-简介"><a href="#Vue-简介" class="headerlink" title="Vue 简介"></a>Vue 简介</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><ol><li><a href="https://vuejs.org/">英文官网</a></li><li><a href="https://cn.vuejs.org/">中文官网</a></li></ol><h3 id="介绍与描述"><a href="#介绍与描述" class="headerlink" title="介绍与描述"></a>介绍与描述</h3><ol><li>动态构建用户界面的 渐进式 JavaScript框架</li><li>作者:尤雨溪</li></ol><h3 id="Vue-的特点"><a href="#Vue-的特点" class="headerlink" title="Vue 的特点"></a>Vue 的特点</h3><ol><li>遵循 MVVM 模式 </li><li>编码简洁,体积小,运行效率高,适合移动/PC 端开发</li><li>它本身只关注 UI,也可以引入其它第三方库开发项目</li></ol><h3 id="与其它-JS-框架的关联"><a href="#与其它-JS-框架的关联" class="headerlink" title="与其它 JS 框架的关联"></a>与其它 JS 框架的关联</h3><ol><li>借鉴Angular的 模板 和 数据绑定 技术</li><li>借鉴React的 组件化 和 虚拟DOM 技术</li></ol><h3 id="Vue-周边库"><a href="#Vue-周边库" class="headerlink" title="Vue 周边库"></a>Vue 周边库</h3><ol><li>vue-cli:vue脚手架</li><li>vue-resource</li><li>axios</li><li>vue-router:路由</li><li>vuex:状态管理</li><li>element-ui:基于vue的UI组件库(PC端)</li></ol><h2 id="初识-Vue"><a href="#初识-Vue" class="headerlink" title="初识 Vue"></a>初识 Vue</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>初识vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello！&#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">// 阻止vue在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, <span class="comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>:&#123; <span class="comment">//data用于存储数据，数据共el所指定的容器去使用</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/9ab2f21a5134c5d3c8bbf86495d3d031.png" alt="img"></p><blockquote><p>注意:</p><ol><li>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象</li><li>root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法</li><li>root容器里的代码被称为Vue模板</li><li>Vue实例与容器是一一对应的</li><li>真实开发中只有一个Vue实例，并且会配合着组件一起使用</li><li>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性</li><li>一旦data中的数据发生变化，那么模板中用到该数据的地方也会自动更新</li></ol></blockquote><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue模板语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>快去看新番！<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>快去看新番！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>:&#123; </span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>:<span class="string">&#x27;https://www.bilibili.com/&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5064db5c00a8878b26bcd486fa51a853.png" alt="img"></p><p>html 中包含了一些 JS 语法代码，语法分为两种，分别为：</p><ol><li>插值语法（双大括号表达式）</li><li>指令（以 v-开头）</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h4><h5 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h5><ol><li><p>功能:用于解析标签体内容</p></li><li><p>语法:，xxxx会作为js表达式解析</p></li></ol><h5 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h5><ol><li><p>功能:解析标签属性、解析标签体内容、绑定事件</p></li><li><p>举例：v-bind:href=’xxxx’，xxxx会作为js表达式被解析</p></li><li>说明：Vue中有有很多的指令，此处只是用v-bind举个例子</li></ol><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><h4 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/094b060391528a0185e12f1287645cbe.png" alt=""></p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h4><ul><li>Vue中有2种数据绑定的方式：<ul><li>单向绑定（<code>v-bind</code>）：数据只能从data流向页面</li><li>双向绑定（<code>v-model</code>）：数据不仅能从data流向页面，还可以从页面流向data</li></ul></li></ul><h3 id="el与data的两种写法"><a href="#el与data的两种写法" class="headerlink" title="el与data的两种写法"></a>el与data的两种写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>el与data的两种写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//el的两种写法：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     // el:&#x27;#root&#x27;, //第一种写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     data:&#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//         name:&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// vm.$mount(&#x27;#root&#x27;)//第二种写法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//data的两种写法：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//data的第一种写法：对象式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// data:&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     name:&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//data的第二种写法：函数式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h4><p>el有2种写法：</p><ol><li>创建Vue实例对象的时候配置el属性</li><li>先创建Vue实例，随后再通过<code>vm.$mount(&#39;#root&#39;)</code>指定el的值</li></ol><p>data有2种写法：</p><ol><li>对象式</li><li>函数式</li></ol><ul><li>如何选择：目前哪种写法都可以，以后学到组件时，data必须使用函数，否则会报错</li></ul><blockquote><p>由Vue管理的函数，一定不要写箭头函数，否则this就不再是Vue实例了</p></blockquote><h3 id="MVVM-模型"><a href="#MVVM-模型" class="headerlink" title="MVVM 模型"></a>MVVM 模型</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/ac43527b06defd324a702aea4f7940a0.png" alt="img"></p><ul><li>MVVM模型:<ul><li>M：模型(Model)：对应data中的数据</li><li>V：视图(View)：模板</li><li>VM：视图模型(ViewModel)：Vue实例对象</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>mvvm<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>战队：&#123;&#123;rank&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试：&#123;&#123;$options&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>:&#123; </span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&#x27;uzi&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">rank</span>:<span class="string">&#x27;RNG&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/94ba0684daa6f21dbb14873a29d9c67a.png" alt="img"></p><p><strong>总结：</strong></p><ul><li>data中所有的属性，最后都出现在了vm身上</li><li>vm身上所有的属性 及 Vue原型身上所有的属性，在Vue模板中都可以直接使用</li></ul><h3 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/1fbebd52e39fa5a97210ee65d0a58069.png" alt="img"></p><p><strong>总结：</strong></p><ol><li>Vue中的数据代理通过vm对象来代理data对象中属性的操作（读/写）</li><li>Vue中数据代理的好处：更加方便的操作data中的数据</li><li>基本原理：<ul><li>通过<code>object.defineProperty()</code>把data对象中所有属性添加到vm上。</li><li>为每一个添加到vm上的属性，都指定一个getter/setter。</li><li>在getter/setter内部去操作（读/写）data中对应的属性。</li></ul></li></ol><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="事件的基本用法"><a href="#事件的基本用法" class="headerlink" title="事件的基本用法"></a>事件的基本用法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件的基本用法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">showInfo2</span>(<span class="params">evnet,num</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(event,num)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/a3463fb07e6ae6d6acc288aaf19b0f8b.png" alt="img"></p><p><strong>总结：</strong></p><ol><li>使用<code>v-on:xxx</code>或<code>@xxx</code>绑定事件，其中xxx是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中配置的函数，==不要用箭头函数！==否则this就不是vm了</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象</li><li><code>@click=&quot;demo</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致，但后者可以传参</li></ol><h4 id="1-6-3-事件修饰符"><a href="#1-6-3-事件修饰符" class="headerlink" title="1. 6. 3 .事件修饰符"></a>1. 6. 3 .事件修饰符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 ..prevent:阻止事件的默认行为event.preventDefault()</span><br><span class="line">2 ..stop:停止事件冒泡event.stopPropagation()</span><br></pre></td></tr></table></figure><h4 id="1-6-4-按键修饰符"><a href="#1-6-4-按键修饰符" class="headerlink" title="1. 6. 4 .按键修饰符"></a>1. 6. 4 .按键修饰符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 .keycode:操作的是某个keycode值的键</span><br><span class="line">2 ..keyName:操作的某个按键名的键(少部分)</span><br></pre></td></tr></table></figure><h3 id="1-7-计算属性与监视"><a href="#1-7-计算属性与监视" class="headerlink" title="1. 7 .计算属性与监视"></a>1. 7 .计算属性与监视</h3><h4 id="1-7-1-效果"><a href="#1-7-1-效果" class="headerlink" title="1. 7. 1 .效果"></a>1. 7. 1 .效果</h4><h4 id="1-7-2-计算属性-computed"><a href="#1-7-2-计算属性-computed" class="headerlink" title="1. 7. 2 .计算属性-computed"></a>1. 7. 2 .计算属性-computed</h4><h6 id="1-要显示的数据不存在，要通过计算得来。"><a href="#1-要显示的数据不存在，要通过计算得来。" class="headerlink" title="1. 要显示的数据不存在，要通过计算得来。"></a>1. 要显示的数据不存在，要通过计算得来。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2. 在computed对象中定义计算属性。</span><br><span class="line">3. 在页面中使用&#123;&#123;方法名&#125;&#125;来显示计算的结果。</span><br></pre></td></tr></table></figure><h4 id="1-7-3-监视属性-watch"><a href="#1-7-3-监视属性-watch" class="headerlink" title="1. 7. 3 .监视属性-watch"></a>1. 7. 3 .监视属性-watch</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 通过通过vm对象的$watch()或watch配置来监视指定的属性</span><br><span class="line">2. 当属性变化时,回调函数自动调用,在函数内部进行计算</span><br></pre></td></tr></table></figure><h3 id="1-8-class-与-style-绑定"><a href="#1-8-class-与-style-绑定" class="headerlink" title="1. 8 .class 与 style 绑定"></a>1. 8 .class 与 style 绑定</h3><h4 id="1-8-1-理解"><a href="#1-8-1-理解" class="headerlink" title="1. 8. 1 .理解"></a>1. 8. 1 .理解</h4><h6 id="1-在应用界面中-某个-些-元素的样式是变化的"><a href="#1-在应用界面中-某个-些-元素的样式是变化的" class="headerlink" title="1. 在应用界面中,某个(些)元素的样式是变化的"></a>1. 在应用界面中,某个(些)元素的样式是变化的</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. class/style绑定就是专门用来实现动态样式效果的技术</span><br></pre></td></tr></table></figure><h4 id="1-8-2-class-绑定"><a href="#1-8-2-class-绑定" class="headerlink" title="1. 8. 2 .class 绑定"></a>1. 8. 2 .class 绑定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. :class=&#x27;xxx&#x27;</span><br><span class="line">2. 表达式是字符串:&#x27;classA&#x27;</span><br><span class="line">3. 表达式是对象:&#123;classA:isA,classB:isB&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4. 表达式是数组:[&#x27;classA&#x27;,&#x27;classB&#x27;]</span><br></pre></td></tr></table></figure><h4 id="1-8-3-style-绑定"><a href="#1-8-3-style-绑定" class="headerlink" title="1. 8. 3 .style 绑定"></a>1. 8. 3 .style 绑定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. :style=&quot;&#123;color:activeColor,fontSize:fontSize+&#x27;px&#x27;&#125;&quot;</span><br><span class="line">2. 其中activeColor/fontSize是data属性</span><br></pre></td></tr></table></figure><h3 id="1-9-条件渲染"><a href="#1-9-条件渲染" class="headerlink" title="1. 9 .条件渲染"></a>1. 9 .条件渲染</h3><h4 id="1-9-1-条件渲染指令"><a href="#1-9-1-条件渲染指令" class="headerlink" title="1. 9. 1 .条件渲染指令"></a>1. 9. 1 .条件渲染指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. v-if与v-else</span><br><span class="line">2. v-show</span><br></pre></td></tr></table></figure><h4 id="1-9-2-比较-v-if-与-v-show"><a href="#1-9-2-比较-v-if-与-v-show" class="headerlink" title="1. 9. 2 .比较 v-if 与 v-show"></a>1. 9. 2 .比较 v-if 与 v-show</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 如果需要频繁切换v-show较好</span><br><span class="line">2. 当条件不成立时,v-if的所有子节点不会解析(项目中使用)</span><br></pre></td></tr></table></figure><h3 id="1-10-列表渲染"><a href="#1-10-列表渲染" class="headerlink" title="1. 10 .列表渲染"></a>1. 10 .列表渲染</h3><h4 id="1-10-1-效果"><a href="#1-10-1-效果" class="headerlink" title="1. 10. 1 .效果"></a>1. 10. 1 .效果</h4><h4 id="1-10-2-列表显示指令"><a href="#1-10-2-列表显示指令" class="headerlink" title="1. 10. 2 .列表显示指令"></a>1. 10. 2 .列表显示指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">遍历数组:v-for/index</span><br><span class="line">遍历对象:v-for/key</span><br></pre></td></tr></table></figure><h3 id="1-11-收集表单数据"><a href="#1-11-收集表单数据" class="headerlink" title="1. 11 .收集表单数据"></a>1. 11 .收集表单数据</h3><h3 id="1-12-过滤器"><a href="#1-12-过滤器" class="headerlink" title="1. 12 .过滤器"></a>1. 12 .过滤器</h3><h4 id="1-12-1-效果"><a href="#1-12-1-效果" class="headerlink" title="1. 12. 1 .效果"></a>1. 12. 1 .效果</h4><h4 id="1-12-2-理解过滤器"><a href="#1-12-2-理解过滤器" class="headerlink" title="1. 12. 2 .理解过滤器"></a>1. 12. 2 .理解过滤器</h4><h6 id="1-功能-对要显示的数据进行特定格式化后再显示"><a href="#1-功能-对要显示的数据进行特定格式化后再显示" class="headerlink" title="1. 功能:对要显示的数据进行特定格式化后再显示"></a>1. 功能:对要显示的数据进行特定格式化后再显示</h6><h6 id="2-注意-并没有改变原本的数据-是产生新的对应的数据"><a href="#2-注意-并没有改变原本的数据-是产生新的对应的数据" class="headerlink" title="2. 注意:并没有改变原本的数据,是产生新的对应的数据"></a>2. 注意:并没有改变原本的数据,是产生新的对应的数据</h6><h3 id="1-13-内置指令与自定义指令"><a href="#1-13-内置指令与自定义指令" class="headerlink" title="1. 13 .内置指令与自定义指令"></a>1. 13 .内置指令与自定义指令</h3><h4 id="1-13-1-常用内置指令"><a href="#1-13-1-常用内置指令" class="headerlink" title="1. 13. 1 .常用内置指令"></a>1. 13. 1 .常用内置指令</h4><p>1 .v-text:更新元素的 textContent<br>2 .v-html:更新元素的 innerHTML<br>3 .v-if:如果为 true,当前标签才会输出到页面<br>4 .v-else:如果为 false,当前标签才会输出到页面<br>5 .v-show:通过控制 display 样式来控制显示/隐藏<br>6 .v-for:遍历数组/对象<br>7 .v-on:绑定事件监听,一般简写为@<br>8 .v-bind:绑定解析表达式,可以省略 v-bind<br>9 .v-model:双向数据绑定<br>10 .v-cloak:防止闪现,与 css 配合:[v-cloak]{display:none}</p><h4 id="1-13-2-自定义指令"><a href="#1-13-2-自定义指令" class="headerlink" title="1. 13. 2 .自定义指令"></a>1. 13. 2 .自定义指令</h4><h6 id="1-注册全局指令"><a href="#1-注册全局指令" class="headerlink" title="1. 注册全局指令"></a>1. 注册全局指令</h6><p>Vue.directive(‘my-directive’,function(el,binding){<br>el.innerHTML=binding.value.toupperCase()<br>})<br><strong>2. 注册局部指令</strong><br>directives:{<br>‘my-directive’:{<br>bind(el,binding){<br>el.innerHTML=binding.value.toupperCase()<br>}<br>}<br>}<br>1 ) 使用指令<br>v-my-directive=’xxx’</p><h3 id="1-14-Vue-实例生命周期"><a href="#1-14-Vue-实例生命周期" class="headerlink" title="1. 14 .Vue 实例生命周期"></a>1. 14 .Vue 实例生命周期</h3><h4 id="1-14-1-效果"><a href="#1-14-1-效果" class="headerlink" title="1. 14. 1 .效果"></a>1. 14. 1 .效果</h4><h4 id="1-14-2-生命周期流程图"><a href="#1-14-2-生命周期流程图" class="headerlink" title="1. 14. 2 .生命周期流程图"></a>1. 14. 2 .生命周期流程图</h4><h4 id="1-14-3-vue-生命周期分析"><a href="#1-14-3-vue-生命周期分析" class="headerlink" title="1. 14. 3 .vue 生命周期分析"></a>1. 14. 3 .vue 生命周期分析</h4><h6 id="1-初始化显示"><a href="#1-初始化显示" class="headerlink" title="1 ) 初始化显示"></a>1 ) 初始化显示</h6><h5 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="*beforeCreate()"></a>*beforeCreate()</h5><h5 id="created"><a href="#created" class="headerlink" title="*created()"></a>*created()</h5><h5 id="beforeMount"><a href="#beforeMount" class="headerlink" title="*beforeMount()"></a>*beforeMount()</h5><h5 id="mounted"><a href="#mounted" class="headerlink" title="*mounted()"></a>*mounted()</h5><p>2 ) 更新状态:this.xxx=value</p><h5 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="*beforeUpdate()"></a>*beforeUpdate()</h5><h5 id="updated"><a href="#updated" class="headerlink" title="*updated()"></a>*updated()</h5><p>3 ) 销毁 vue 实例:vm.$destory()</p><h5 id="beforeDestory"><a href="#beforeDestory" class="headerlink" title="*beforeDestory()"></a>*beforeDestory()</h5><h5 id="destoryed"><a href="#destoryed" class="headerlink" title="*destoryed()"></a>*destoryed()</h5><h4 id="1-14-4-常用的生命周期方法"><a href="#1-14-4-常用的生命周期方法" class="headerlink" title="1. 14. 4 .常用的生命周期方法"></a>1. 14. 4 .常用的生命周期方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. mounted():发送ajax请求,启动定时器等异步任务</span><br><span class="line">2. beforeDestory():做收尾工作,如:清除定时器</span><br></pre></td></tr></table></figure><h2 id="第-2-章：Vue-组件化编程"><a href="#第-2-章：Vue-组件化编程" class="headerlink" title="第 2 章：Vue 组件化编程"></a>第 2 章：Vue 组件化编程</h2><h3 id="2-1-模块与组件、模块化与组件化"><a href="#2-1-模块与组件、模块化与组件化" class="headerlink" title="2. 1 模块与组件、模块化与组件化"></a>2. 1 模块与组件、模块化与组件化</h3><h4 id="2-1-1-模块"><a href="#2-1-1-模块" class="headerlink" title="2. 1. 1 .模块"></a>2. 1. 1 .模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 理解:向外提供特定功能的js程序,一般就是一个js文件</span><br><span class="line">2. 为什么: js文件很多很复杂</span><br><span class="line">3. 作用:复用js,简化js的编写,提高js运行效率</span><br></pre></td></tr></table></figure><h4 id="2-1-2-组件"><a href="#2-1-2-组件" class="headerlink" title="2. 1. 2 .组件"></a>2. 1. 2 .组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 理解:用来实现局部(特定)功能效果的代码集合(html/css/js/image.....)</span><br><span class="line">2. 为什么:一个界面的功能很复杂</span><br></pre></td></tr></table></figure><h6 id="3-作用-复用编码-简化项目编码-提高运行效率"><a href="#3-作用-复用编码-简化项目编码-提高运行效率" class="headerlink" title="3. 作用:复用编码,简化项目编码,提高运行效率"></a>3. 作用:复用编码,简化项目编码,提高运行效率</h6><h4 id="2-1-3-模块化"><a href="#2-1-3-模块化" class="headerlink" title="2. 1. 3 .模块化"></a>2. 1. 3 .模块化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当应用中的js都以模块来编写的,那这个应用就是一个模块化的应用。</span><br></pre></td></tr></table></figure><h4 id="2-1-4-组件化"><a href="#2-1-4-组件化" class="headerlink" title="2. 1. 4 .组件化"></a>2. 1. 4 .组件化</h4><h6 id="当应用中的功能都是多组件的方式来编写的-那这个应用就是一个组件化的应用-。"><a href="#当应用中的功能都是多组件的方式来编写的-那这个应用就是一个组件化的应用-。" class="headerlink" title="当应用中的功能都是多组件的方式来编写的,那这个应用就是一个组件化的应用,。"></a>当应用中的功能都是多组件的方式来编写的,那这个应用就是一个组件化的应用,。</h6><h3 id="2-2-非单文件组件"><a href="#2-2-非单文件组件" class="headerlink" title="2. 2 .非单文件组件"></a>2. 2 .非单文件组件</h3><h6 id="1-模板编写没有提示"><a href="#1-模板编写没有提示" class="headerlink" title="1. 模板编写没有提示"></a>1. 模板编写没有提示</h6><h6 id="2-没有构建过程-无法将-ES-6-转换成-ES-5"><a href="#2-没有构建过程-无法将-ES-6-转换成-ES-5" class="headerlink" title="2. 没有构建过程,无法将 ES 6 转换成 ES 5"></a>2. 没有构建过程,无法将 ES 6 转换成 ES 5</h6><h6 id="3-不支持组件的-CSS"><a href="#3-不支持组件的-CSS" class="headerlink" title="3. 不支持组件的 CSS"></a>3. 不支持组件的 CSS</h6><h6 id="4-真正开发中几乎不用"><a href="#4-真正开发中几乎不用" class="headerlink" title="4. 真正开发中几乎不用"></a>4. 真正开发中几乎不用</h6><h3 id="2-3-单文件组件"><a href="#2-3-单文件组件" class="headerlink" title="2. 3 .单文件组件"></a>2. 3 .单文件组件</h3><h4 id="2-3-1-一个-vue-文件的组成-3-个部分"><a href="#2-3-1-一个-vue-文件的组成-3-个部分" class="headerlink" title="2. 3. 1 .一个.vue 文件的组成( 3 个部分)"></a>2. 3. 1 .一个.vue 文件的组成( 3 个部分)</h4><h6 id="1-模板页面"><a href="#1-模板页面" class="headerlink" title="1. 模板页面"></a>1. 模板页面</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">页面模板</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h6 id="2-JS-模块对象"><a href="#2-JS-模块对象" class="headerlink" title="2. JS 模块对象"></a>2. JS 模块对象</h6><script>exportdefault{data(){return{}},methods:{},computed:{},components:{}}</script><p><strong>3. 样式</strong></p><style>样式定义</style><h4 id="2-3-2-基本使用"><a href="#2-3-2-基本使用" class="headerlink" title="2. 3. 2 .基本使用"></a>2. 3. 2 .基本使用</h4><h6 id="1-引入组件"><a href="#1-引入组件" class="headerlink" title="1. 引入组件"></a>1. 引入组件</h6><h6 id="2-映射成标签"><a href="#2-映射成标签" class="headerlink" title="2. 映射成标签"></a>2. 映射成标签</h6><h6 id="3-使用组件标签"><a href="#3-使用组件标签" class="headerlink" title="3. 使用组件标签"></a>3. 使用组件标签</h6><h2 id="第-3-章：使用-Vue-脚手架"><a href="#第-3-章：使用-Vue-脚手架" class="headerlink" title="第 3 章：使用 Vue 脚手架"></a>第 3 章：使用 Vue 脚手架</h2><h3 id="3-1-初始化脚手架"><a href="#3-1-初始化脚手架" class="headerlink" title="3. 1 初始化脚手架"></a>3. 1 初始化脚手架</h3><h4 id="3-1-1-说明"><a href="#3-1-1-说明" class="headerlink" title="3. 1. 1 说明"></a>3. 1. 1 说明</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Vue脚手架是Vue官方提供的标准化开发工具（开发平台）。</span><br><span class="line">2. 最新的版本是 4 .x。</span><br><span class="line">3. 文档:https://cli.vuejs.org/zh/。</span><br></pre></td></tr></table></figure><h3 id="3-1-2-具体步骤"><a href="#3-1-2-具体步骤" class="headerlink" title="3. 1. 2 具体步骤"></a>3. 1. 2 具体步骤</h3><p>第一步（仅第一次执行）：全局安装@vue/cli。<br>npminstall-g@vue/cli<br>第二步： <strong>切换到你要创建项目的目录</strong> ，然后使用命令创建项目<br>vuecreatexxxx<br>第三步：启动项目<br>npmrunserve<br>备注：</p><ol><li><p>如 ht 出 tp 现 s:/下/re 载 g 缓 ist 慢 ry 请.n 配 pm 置.tanopbmao 淘.o 宝 rg 镜像：npmconfigsetregistry</p></li><li><p>Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpakc 配置，<br>请执行：vueinspect&gt;output.js</p></li></ol><h4 id="3-1-3-模板项目的结构"><a href="#3-1-3-模板项目的结构" class="headerlink" title="3. 1. 3 模板项目的结构"></a>3. 1. 3 模板项目的结构</h4><h5 id="├──node-modules"><a href="#├──node-modules" class="headerlink" title="├──node_modules"></a>├──node_modules</h5><h5 id="├──public"><a href="#├──public" class="headerlink" title="├──public"></a>├──public</h5><h5 id="│-├──favicon-ico-页签图标"><a href="#│-├──favicon-ico-页签图标" class="headerlink" title="│ ├──favicon.ico:页签图标"></a>│ ├──favicon.ico:页签图标</h5><h5 id="│-└──index-html-主页面"><a href="#│-└──index-html-主页面" class="headerlink" title="│ └──index.html:主页面"></a>│ └──index.html:主页面</h5><h5 id="├──src"><a href="#├──src" class="headerlink" title="├──src"></a>├──src</h5><h5 id="│-├──assets-存放静态资源"><a href="#│-├──assets-存放静态资源" class="headerlink" title="│ ├──assets:存放静态资源"></a>│ ├──assets:存放静态资源</h5><h5 id="│-│-└──logo-png"><a href="#│-│-└──logo-png" class="headerlink" title="│ │ └──logo.png"></a>│ │ └──logo.png</h5><h5 id="│-│──component-存放组件"><a href="#│-│──component-存放组件" class="headerlink" title="│ │──component:存放组件"></a>│ │──component:存放组件</h5><h5 id="│-│-└──HelloWorld-vue"><a href="#│-│-└──HelloWorld-vue" class="headerlink" title="│ │ └──HelloWorld.vue"></a>│ │ └──HelloWorld.vue</h5><h5 id="│-│──App-vue-汇总所有组件"><a href="#│-│──App-vue-汇总所有组件" class="headerlink" title="│ │──App.vue:汇总所有组件"></a>│ │──App.vue:汇总所有组件</h5><h5 id="│-│──main-js-入口文件"><a href="#│-│──main-js-入口文件" class="headerlink" title="│ │──main.js:入口文件"></a>│ │──main.js:入口文件</h5><h5 id="├──-gitignore-git-版本管制忽略的配置"><a href="#├──-gitignore-git-版本管制忽略的配置" class="headerlink" title="├──.gitignore:git 版本管制忽略的配置"></a>├──.gitignore:git 版本管制忽略的配置</h5><h5 id="├──babel-config-js-babel-的配置文件"><a href="#├──babel-config-js-babel-的配置文件" class="headerlink" title="├──babel.config.js:babel 的配置文件"></a>├──babel.config.js:babel 的配置文件</h5><h5 id="├──package-json-应用包配置文件"><a href="#├──package-json-应用包配置文件" class="headerlink" title="├──package.json:应用包配置文件"></a>├──package.json:应用包配置文件</h5><h5 id="├──README-md-应用描述文件"><a href="#├──README-md-应用描述文件" class="headerlink" title="├──README.md:应用描述文件"></a>├──README.md:应用描述文件</h5><h5 id="├──package-lock-json：包版本控制文件"><a href="#├──package-lock-json：包版本控制文件" class="headerlink" title="├──package-lock.json：包版本控制文件"></a>├──package-lock.json：包版本控制文件</h5><h3 id="3-2-ref-与-props"><a href="#3-2-ref-与-props" class="headerlink" title="3. 2 ref 与 props"></a>3. 2 ref 与 props</h3><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><h6 id="1-作用：-用于给节点打标识"><a href="#1-作用：-用于给节点打标识" class="headerlink" title="1 .作用： 用于给节点打标识"></a>1 .作用： 用于给节点打标识</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 .读取方式： this.$refs.xxxxxx</span><br></pre></td></tr></table></figure><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><h6 id="1-作用：-用于父组件给子组件传递数据"><a href="#1-作用：-用于父组件给子组件传递数据" class="headerlink" title="1. 作用： 用于父组件给子组件传递数据"></a>1. 作用： 用于父组件给子组件传递数据</h6><h6 id="2-读取方式一-只指定名称"><a href="#2-读取方式一-只指定名称" class="headerlink" title="2. 读取方式一:只指定名称"></a>2. 读取方式一:只指定名称</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">props:[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;setName&#x27;]</span><br><span class="line">3. 读取方式二:指定名称和类型</span><br><span class="line">props:&#123;</span><br><span class="line">name:String,</span><br><span class="line">age:Number,</span><br><span class="line">setNmae:Function</span><br><span class="line">&#125;</span><br><span class="line">4. 读取方式三:指定名称/类型/必要性/默认值</span><br><span class="line">props:&#123;</span><br><span class="line">name:&#123;type:String,required:true,default:xxx&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-混入"><a href="#3-3-混入" class="headerlink" title="3. 3 混入"></a>3. 3 混入</h3><ol><li><p>Vue 插件是一个包含 install 方法的对象</p></li><li><p>通过 install 方法给 Vue 或 Vue 实例添加方法,定义全局指令等</p></li></ol><h3 id="3-4-插件"><a href="#3-4-插件" class="headerlink" title="3. 4 插件"></a>3. 4 插件</h3><ol><li>Vue 插件是一个包含 install 方法的对象</li><li>通过 install 方法给 Vue 或 Vue 实例添加方法,定义全局指令等</li></ol><h3 id="3-5-Todo-list-案例"><a href="#3-5-Todo-list-案例" class="headerlink" title="3. 5 Todo-list 案例"></a>3. 5 Todo-list 案例</h3><h4 id="组件化编码流程（通用）"><a href="#组件化编码流程（通用）" class="headerlink" title="组件化编码流程（通用）"></a>组件化编码流程（通用）</h4><h6 id="1-实现静态组件：抽取组件，使用组件实现静态页面效果"><a href="#1-实现静态组件：抽取组件，使用组件实现静态页面效果" class="headerlink" title="1 .实现静态组件：抽取组件，使用组件实现静态页面效果"></a>1 .实现静态组件：抽取组件，使用组件实现静态页面效果</h6><h6 id="2-展示动态数据："><a href="#2-展示动态数据：" class="headerlink" title="2 .展示动态数据："></a>2 .展示动态数据：</h6><h6 id="2-1-数据的类型、名称是什么？"><a href="#2-1-数据的类型、名称是什么？" class="headerlink" title="2. 1 .数据的类型、名称是什么？"></a>2. 1 .数据的类型、名称是什么？</h6><h6 id="2-2-数据保存在哪个组件？"><a href="#2-2-数据保存在哪个组件？" class="headerlink" title="2. 2 .数据保存在哪个组件？"></a>2. 2 .数据保存在哪个组件？</h6><h6 id="3-交互——从绑定事件监听开始"><a href="#3-交互——从绑定事件监听开始" class="headerlink" title="3 .交互——从绑定事件监听开始"></a>3 .交互——从绑定事件监听开始</h6><h3 id="3-6-Vue-中的自定义事件"><a href="#3-6-Vue-中的自定义事件" class="headerlink" title="3. 6 Vue 中的自定义事件"></a>3. 6 Vue 中的自定义事件</h3><h4 id="绑定事件监听"><a href="#绑定事件监听" class="headerlink" title="绑定事件监听"></a>绑定事件监听</h4><p>&lt; <strong>Header@addTodo=”</strong> addTodo <strong>“</strong> /&gt;<br>或者<br>&lt; <strong>tHheiasd</strong>. <strong>e$rrerfesf</strong>. <strong>=</strong> h <strong>“</strong> e <strong>h</strong> a <strong>e</strong> d <strong>a</strong> e <strong>d</strong> r <strong>e</strong>. <strong>r</strong> $ <strong>“</strong> o/n&gt;( <strong>‘addTodo’</strong> , <strong>this</strong> .addTodo)</p><h4 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h4><p><strong>this</strong> .$emit( <strong>‘addTodo’</strong> , todo)</p><h3 id="3-7-全局事件总线"><a href="#3-7-全局事件总线" class="headerlink" title="3. 7 全局事件总线"></a>3. 7 全局事件总线</h3><h4 id="3-7-1-理解"><a href="#3-7-1-理解" class="headerlink" title="3. 7. 1 理解"></a>3. 7. 1 理解</h4><ol><li>Vue 原型对象上包含事件处理的方法<br>1 ) $on(eventName,listener):绑定自定义事件监听<br>2 ) $emit(eventName,data):分发自定义事件<br>3 ) $off(eventName):解绑自定义事件监听<br>4 ) $once(eventName,listener):绑定事件监听,但只能处理一次</li><li>所有组件实例对象的原型对象的原型对象就是 Vue 的原型对象</li></ol><p>1 ) 所有组件对象都能看到 Vue 原型对象上的属性和方法<br>2 ) Vue.prototype.$bus=newVue(),所有的组件对象都能看到$bus 这个属性<br>对象 3. 全局事件总线<br>1 ) 包含事件处理相关方法的对象(只有一个)<br>2 ) 所有的组件都可以得到</p><h4 id="3-7-2-指定事件总线对象"><a href="#3-7-2-指定事件总线对象" class="headerlink" title="3. 7. 2 指定事件总线对象"></a>3. 7. 2 指定事件总线对象</h4><p><strong>new</strong> beVfuoer(e{Create () { <em>//</em> 尽量早的执行挂载全局事件总线对象的操作</p><p>},Vue. <strong>prototype</strong>. <strong>$globalEventBus</strong> = <strong>this</strong><br>}).$mount( <strong>‘#root’</strong> )</p><h4 id="3-7-3-绑定事件"><a href="#3-7-3-绑定事件" class="headerlink" title="3. 7. 3 绑定事件"></a>3. 7. 3 绑定事件</h4><p><strong>this</strong>. <strong>$globalEventBus</strong> .$on( <strong>‘deleteTodo’</strong> , <strong>this</strong> .deleteTodo)</p><h4 id="3-7-4-分发事件"><a href="#3-7-4-分发事件" class="headerlink" title="3. 7. 4 分发事件"></a>3. 7. 4 分发事件</h4><p><strong>this</strong>. <strong>$globalEventBus</strong> .$emit( <strong>‘deleteTodo’</strong> , <strong>this</strong>. <strong>index</strong> )</p><h4 id="3-7-5-解绑事件"><a href="#3-7-5-解绑事件" class="headerlink" title="3. 7. 5 解绑事件"></a>3. 7. 5 解绑事件</h4><p><strong>this</strong>. <strong>$globalEventBus</strong> .$off( <strong>‘deleteTodo’</strong> )</p><h3 id="3-8-消息订阅与发布"><a href="#3-8-消息订阅与发布" class="headerlink" title="3. 8 消息订阅与发布"></a>3. 8 消息订阅与发布</h3><h4 id="3-8-1-理解"><a href="#3-8-1-理解" class="headerlink" title="3. 8. 1 理解"></a>3. 8. 1 理解</h4><h6 id="1-这种方式的思想与全局事件总线很相似"><a href="#1-这种方式的思想与全局事件总线很相似" class="headerlink" title="1 .这种方式的思想与全局事件总线很相似"></a>1 .这种方式的思想与全局事件总线很相似</h6><h6 id="2-它包含以下操作"><a href="#2-它包含以下操作" class="headerlink" title="2 .它包含以下操作:"></a>2 .它包含以下操作:</h6><h6 id="1-订阅消息—对应绑定事件监听"><a href="#1-订阅消息—对应绑定事件监听" class="headerlink" title="( 1 ) 订阅消息—对应绑定事件监听"></a>( 1 ) 订阅消息—对应绑定事件监听</h6><h6 id="2-发布消息—分发事件"><a href="#2-发布消息—分发事件" class="headerlink" title="( 2 ) 发布消息—分发事件"></a>( 2 ) 发布消息—分发事件</h6><h6 id="3-取消消息订阅—解绑事件监听"><a href="#3-取消消息订阅—解绑事件监听" class="headerlink" title="( 3 ) 取消消息订阅—解绑事件监听"></a>( 3 ) 取消消息订阅—解绑事件监听</h6><p>3 .需要引入一个消息订阅与发布的第三方实现库: <strong>PubSubJS</strong></p><h4 id="3-8-2-使用-PubSubJS"><a href="#3-8-2-使用-PubSubJS" class="headerlink" title="3. 8. 2 使用 PubSubJS"></a>3. 8. 2 使用 PubSubJS</h4><h5 id="1-在线文档-https-github-com-mroderick-PubSubJS"><a href="#1-在线文档-https-github-com-mroderick-PubSubJS" class="headerlink" title="1 .在线文档:https://github.com/mroderick/PubSubJS"></a>1 .在线文档:<a href="https://github.com/mroderick/PubSubJS">https://github.com/mroderick/PubSubJS</a></h5><p>2 .下载:npminstall-Spubsub-js<br>3 .相关语法<br>( 1 ) importPubSubfrom’pubsub-js’ //引入<br>( 2 ) PubSub.subscribe(‘msgName’,functon(msgName,data){})<br>( 3 ) PubSub.publish(‘msgName’,data):发布消息,触发订阅的回调函数调用<br>( 4 ) PubSub.unsubscribe(token):取消消息的订阅</p><h3 id="3-9-过度与动画"><a href="#3-9-过度与动画" class="headerlink" title="3. 9 过度与动画"></a>3. 9 过度与动画</h3><h4 id="3-9-1-效果"><a href="#3-9-1-效果" class="headerlink" title="3. 9. 1 效果"></a>3. 9. 1 效果</h4><h4 id="3-9-2-vue-动画的理解"><a href="#3-9-2-vue-动画的理解" class="headerlink" title="3. 9. 2 vue 动画的理解"></a>3. 9. 2 vue 动画的理解</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 .操作css的trasition或animation</span><br><span class="line">2 .vue会给目标元素添加/移除特定的class</span><br><span class="line">3 .过渡的相关类名：</span><br><span class="line">1 .xxx-enter-active:指定显示的transition</span><br><span class="line">2 .xxx-leave-active:指定隐藏的transition</span><br><span class="line">3 .xxx-enter/xxx-leave-to:指定隐藏时的样式</span><br></pre></td></tr></table></figure><h4 id="3-9-3-基本过渡动画的编码"><a href="#3-9-3-基本过渡动画的编码" class="headerlink" title="3. 9. 3 基本过渡动画的编码"></a>3. 9. 3 基本过渡动画的编码</h4><ol><li>在目标元素外包裹<transitionname="xxx"></li><li>定义 class 样式<br>a) 指定过渡样式:transition<br>b) 指定隐藏时的样式:opacity/其它</li></ol><h2 id="第-4-章：Vue-中的-ajax"><a href="#第-4-章：Vue-中的-ajax" class="headerlink" title="第 4 章：Vue 中的 ajax"></a>第 4 章：Vue 中的 ajax</h2><h3 id="4-1-解决开发环境-Ajax-跨域问题"><a href="#4-1-解决开发环境-Ajax-跨域问题" class="headerlink" title="4. 1 解决开发环境 Ajax 跨域问题"></a>4. 1 解决开发环境 Ajax 跨域问题</h3><h6 id="使用代理服务器"><a href="#使用代理服务器" class="headerlink" title="使用代理服务器"></a>使用代理服务器</h6><h3 id="4-2-github-用户搜索案例"><a href="#4-2-github-用户搜索案例" class="headerlink" title="4. 2 github 用户搜索案例"></a>4. 2 github 用户搜索案例</h3><h3 id="4-2-1-效果"><a href="#4-2-1-效果" class="headerlink" title="4. 2. 1 效果"></a>4. 2. 1 效果</h3><h3 id="4-2-2-接口地址"><a href="#4-2-2-接口地址" class="headerlink" title="4. 2. 2 接口地址"></a>4. 2. 2 接口地址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.github.com/search/users?q=xxx</span><br></pre></td></tr></table></figure><h3 id="4-3-vue-项目中常用的-2-个-Ajax-库"><a href="#4-3-vue-项目中常用的-2-个-Ajax-库" class="headerlink" title="4. 3 vue 项目中常用的 2 个 Ajax 库"></a>4. 3 vue 项目中常用的 2 个 Ajax 库</h3><h4 id="4-3-1-axios"><a href="#4-3-1-axios" class="headerlink" title="4. 3. 1 axios"></a>4. 3. 1 axios</h4><p>通用的 Ajax 请求库,官方推荐，使用广泛</p><h4 id="4-3-2-vue-resource"><a href="#4-3-2-vue-resource" class="headerlink" title="4. 3. 2 vue-resource"></a>4. 3. 2 vue-resource</h4><p>vue 插件库,vue 1 .x 使用广泛， <strong>官方已不维护。</strong></p><h3 id="4-4-slot-插槽"><a href="#4-4-slot-插槽" class="headerlink" title="4. 4 slot 插槽"></a>4. 4 slot 插槽</h3><h4 id="4-4-1-效果"><a href="#4-4-1-效果" class="headerlink" title="4. 4. 1 效果"></a>4. 4. 1 效果</h4><h6 id="效果一（不使用插槽）："><a href="#效果一（不使用插槽）：" class="headerlink" title="效果一（不使用插槽）："></a>效果一（不使用插槽）：</h6><h6 id="效果二（默认插槽）："><a href="#效果二（默认插槽）：" class="headerlink" title="效果二（默认插槽）："></a>效果二（默认插槽）：</h6><h6 id="效果三（具名插槽）："><a href="#效果三（具名插槽）：" class="headerlink" title="效果三（具名插槽）："></a>效果三（具名插槽）：</h6><h6 id="效果三（作用域插槽）："><a href="#效果三（作用域插槽）：" class="headerlink" title="效果三（作用域插槽）："></a>效果三（作用域插槽）：</h6><h4 id="4-4-1-理解"><a href="#4-4-1-理解" class="headerlink" title="4. 4. 1 理解"></a>4. 4. 1 理解</h4><h6 id="父组件向子组件传递带数据的标签，当一个组件有不确定的结构时-就需要使用"><a href="#父组件向子组件传递带数据的标签，当一个组件有不确定的结构时-就需要使用" class="headerlink" title="父组件向子组件传递带数据的标签，当一个组件有不确定的结构时,就需要使用"></a>父组件向子组件传递带数据的标签，当一个组件有不确定的结构时,就需要使用</h6><p>slot 技术，注意：插槽内容是在父组件中编译后,再传递给子组件的。</p><h4 id="4-4-2-分类"><a href="#4-4-2-分类" class="headerlink" title="4. 4. 2 分类"></a>4. 4. 2 分类</h4><h6 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1 .默认插槽"></a>1 .默认插槽</h6><h6 id="2-命名插槽"><a href="#2-命名插槽" class="headerlink" title="2 .命名插槽"></a>2 .命名插槽</h6><h6 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3 .作用域插槽"></a>3 .作用域插槽</h6><h2 id="第-5-章：vuex"><a href="#第-5-章：vuex" class="headerlink" title="第 5 章：vuex"></a>第 5 章：vuex</h2><h3 id="5-1-理解-vuex"><a href="#5-1-理解-vuex" class="headerlink" title="5. 1 理解 vuex"></a>5. 1 理解 vuex</h3><h4 id="5-1-1-vuex-是什么"><a href="#5-1-1-vuex-是什么" class="headerlink" title="5. 1. 1 vuex 是什么"></a>5. 1. 1 vuex 是什么</h4><ol><li>概念：专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应<br>用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方<br>式，且适用于任意组件间通信。</li><li>Github 地址:<a href="https://github.com/vuejs/vuex">https://github.com/vuejs/vuex</a></li></ol><h4 id="5-1-2-什么时候使用-Vuex"><a href="#5-1-2-什么时候使用-Vuex" class="headerlink" title="5. 1. 2 什么时候使用 Vuex"></a>5. 1. 2 什么时候使用 Vuex</h4><h6 id="1-多个组件依赖于同一状态"><a href="#1-多个组件依赖于同一状态" class="headerlink" title="1 .多个组件依赖于同一状态"></a>1 .多个组件依赖于同一状态</h6><h6 id="2-来自不同组件的行为需要变更同一状态"><a href="#2-来自不同组件的行为需要变更同一状态" class="headerlink" title="2 .来自不同组件的行为需要变更同一状态"></a>2 .来自不同组件的行为需要变更同一状态</h6><h4 id="5-1-3-案例"><a href="#5-1-3-案例" class="headerlink" title="5. 1. 3 案例"></a>5. 1. 3 案例</h4><h4 id="5-1-4-Vuex-工作原理图"><a href="#5-1-4-Vuex-工作原理图" class="headerlink" title="5. 1. 4 Vuex 工作原理图"></a>5. 1. 4 Vuex 工作原理图</h4><h3 id="5-2-vuex-核心概念和-API"><a href="#5-2-vuex-核心概念和-API" class="headerlink" title="5. 2 vuex 核心概念和 API"></a>5. 2 vuex 核心概念和 API</h3><h3 id="5-2-1-state"><a href="#5-2-1-state" class="headerlink" title="5. 2. 1 state"></a>5. 2. 1 state</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 .vuex管理的状态对象</span><br><span class="line">2 .它应该是唯一的</span><br><span class="line">3 .示例代码：</span><br></pre></td></tr></table></figure><h3 id="5-2-2-actions"><a href="#5-2-2-actions" class="headerlink" title="5. 2. 2 actions"></a>5. 2. 2 actions</h3><h6 id="1-值为一个对象，包含多个响应用户动作的回调函数"><a href="#1-值为一个对象，包含多个响应用户动作的回调函数" class="headerlink" title="1 .值为一个对象，包含多个响应用户动作的回调函数"></a>1 .值为一个对象，包含多个响应用户动作的回调函数</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 .通过commit()来触发mutation中函数的调用,间接更新state</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 .如何触发actions中的回调？</span><br><span class="line">在组件中使用: $store.dispatch(&#x27;对应的action回调名&#x27;) 触发</span><br><span class="line">4 .可以包含异步代码（定时器,ajax等等）</span><br><span class="line">5 .示例代码：</span><br></pre></td></tr></table></figure><h3 id="5-2-3-mutations"><a href="#5-2-3-mutations" class="headerlink" title="5. 2. 3 mutations"></a>5. 2. 3 mutations</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 .值是一个对象，包含多个直接更新state的方法</span><br><span class="line">2 .谁能调用mutations中的方法？如何调用？</span><br><span class="line">在action中使用： commit(&#x27;对应的mutations方法名&#x27;) 触发</span><br><span class="line">3 .mutations中方法的特点：不能写异步代码、只能单纯的操作state</span><br><span class="line">4 .示例代码：</span><br></pre></td></tr></table></figure><h3 id="5-2-4-getters"><a href="#5-2-4-getters" class="headerlink" title="5. 2. 4 getters"></a>5. 2. 4 getters</h3><h6 id="1-值为一个对象，包含多个用于返回数据的函数"><a href="#1-值为一个对象，包含多个用于返回数据的函数" class="headerlink" title="1 .值为一个对象，包含多个用于返回数据的函数"></a>1 .值为一个对象，包含多个用于返回数据的函数</h6><h5 id="2-如何使用？——-store-getters-xxx"><a href="#2-如何使用？——-store-getters-xxx" class="headerlink" title="2 .如何使用？—— $store.getters.xxx"></a>2 .如何使用？—— $store.getters.xxx</h5><h6 id="3-示例代码："><a href="#3-示例代码：" class="headerlink" title="3 .示例代码："></a>3 .示例代码：</h6><h3 id="5-2-5-modules"><a href="#5-2-5-modules" class="headerlink" title="5. 2. 5 modules"></a>5. 2. 5 modules</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 .包含多个module</span><br><span class="line">2 .一个module是一个store的配置对象</span><br><span class="line">3 .与一个组件（包含有共享数据）对应</span><br></pre></td></tr></table></figure><h2 id="第-6-章：vue-router"><a href="#第-6-章：vue-router" class="headerlink" title="第 6 章：vue-router"></a>第 6 章：vue-router</h2><h3 id="6-1-相关理解"><a href="#6-1-相关理解" class="headerlink" title="6. 1 相关理解"></a>6. 1 相关理解</h3><h4 id="6-1-1-vue-router-的理解"><a href="#6-1-1-vue-router-的理解" class="headerlink" title="6. 1. 1 vue-router 的理解"></a>6. 1. 1 vue-router 的理解</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue的一个插件库，专门用来实现SPA应用</span><br></pre></td></tr></table></figure><h4 id="6-1-2-对-SPA-应用的理解"><a href="#6-1-2-对-SPA-应用的理解" class="headerlink" title="6. 1. 2 对 SPA 应用的理解"></a>6. 1. 2 对 SPA 应用的理解</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 单页Web应用（singlepagewebapplication，SPA）。</span><br><span class="line">2. 整个应用只有 一个完整的页面 。</span><br><span class="line">3. 点击页面中的导航链接 不会刷新 页面，只会做页面的 局部更新。</span><br><span class="line">4. 数据需要通过ajax请求获取。</span><br></pre></td></tr></table></figure><h4 id="6-1-3-路由的理解"><a href="#6-1-3-路由的理解" class="headerlink" title="6. 1. 3 路由的理解"></a>6. 1. 3 路由的理解</h4><h6 id="1-什么是路由"><a href="#1-什么是路由" class="headerlink" title="1. 什么是路由?"></a>1. 什么是路由?</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 一个路由就是一组映射关系（key-value）</span><br><span class="line">2. key为路径,value可能是function或component</span><br><span class="line">2. 路由分类</span><br><span class="line">1. 后端路由：</span><br><span class="line">1 ) 理解：value是function,用于处理客户端提交的请求。</span><br><span class="line">2 ) 工作过程：服务器接收到一个请求时,根据 请求路径 找到匹配的 函数</span><br><span class="line">来处理请求,返回响应数据。</span><br><span class="line">2. 前端路由：</span><br><span class="line">1 ) 理解：value是component，用于展示页面内容。</span><br><span class="line">2 ) 工作过程：当浏览器的路径改变时,对应的组件就会显示。</span><br></pre></td></tr></table></figure><h3 id="6-2-基本路由"><a href="#6-2-基本路由" class="headerlink" title="6. 2 基本路由"></a>6. 2 基本路由</h3><h4 id="6-2-1-效果"><a href="#6-2-1-效果" class="headerlink" title="6. 2. 1 效果"></a>6. 2. 1 效果</h4><h4 id="6-2-2-总结-编写使用路由的-3-步"><a href="#6-2-2-总结-编写使用路由的-3-步" class="headerlink" title="6. 2. 2 总结:编写使用路由的 3 步"></a>6. 2. 2 总结:编写使用路由的 3 步</h4><h6 id="1-定义路由组件"><a href="#1-定义路由组件" class="headerlink" title="1. 定义路由组件"></a>1. 定义路由组件</h6><h6 id="2-注册路由"><a href="#2-注册路由" class="headerlink" title="2. 注册路由"></a>2. 注册路由</h6><h6 id="3-使用路由"><a href="#3-使用路由" class="headerlink" title="3. 使用路由"></a>3. 使用路由</h6><h3 id="6-3-嵌套（多级）路由"><a href="#6-3-嵌套（多级）路由" class="headerlink" title="6. 3 嵌套（多级）路由"></a>6. 3 嵌套（多级）路由</h3><h3 id="6-4-路由传参"><a href="#6-4-路由传参" class="headerlink" title="6. 4 路由传参"></a>6. 4 路由传参</h3><h3 id="6-5-编程式路由导航"><a href="#6-5-编程式路由导航" class="headerlink" title="6. 5 编程式路由导航"></a>6. 5 编程式路由导航</h3><h5 id="相关-API："><a href="#相关-API：" class="headerlink" title="相关 API："></a>相关 API：</h5><ol><li>this.$router.push(path):相当于点击路由链接(可以返回到当前路由界面)</li><li>this.$router.replace(path):用新路由替换当前路由(不可以返回到当前路由界面)</li><li>this.$router.back():请求(返回)上一个记录路由</li><li>this.$router.go(- 1 ):请求(返回)上一个记录路由</li><li>this.$router.go( 1 ):请求下一个记录路由</li></ol><h2 id="第-7-章：Vue-UI-组件库"><a href="#第-7-章：Vue-UI-组件库" class="headerlink" title="第 7 章：Vue UI 组件库"></a>第 7 章：Vue UI 组件库</h2><h4 id="7-1-移动端常用-UI-组件库"><a href="#7-1-移动端常用-UI-组件库" class="headerlink" title="7. 1 移动端常用 UI 组件库"></a>7. 1 移动端常用 UI 组件库</h4><ol><li>Vant <a href="https://youzan.github.io/vant">https://youzan.github.io/vant</a></li><li>CubeUI <a href="https://didi.github.io/cube-ui">https://didi.github.io/cube-ui</a></li><li>MintUI <a href="http://mint-ui.github.io">http://mint-ui.github.io</a></li></ol><h4 id="7-2-PC-端常用-UI-组件库"><a href="#7-2-PC-端常用-UI-组件库" class="headerlink" title="7. 2 PC 端常用 UI 组件库"></a>7. 2 PC 端常用 UI 组件库</h4><ol><li>ElementUI <a href="https://element.eleme.cn">https://element.eleme.cn</a></li><li>IViewUI <a href="https://www.iviewui.com">https://www.iviewui.com</a></li></ol>]]></content>
    
    
    <summary type="html">Vue(尚硅谷天禹老师)</summary>
    
    
    
    <category term="Vue" scheme="https://blog.serms.top/categories/Vue/"/>
    
    <category term="编程笔记" scheme="https://blog.serms.top/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Vue天禹老师笔记" scheme="https://blog.serms.top/categories/Vue/Vue%E5%A4%A9%E7%A6%B9%E8%80%81%E5%B8%88%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Vue" scheme="https://blog.serms.top/tags/Vue/"/>
    
    <category term="编程笔记" scheme="https://blog.serms.top/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Vue学习笔记(尚硅谷天禹老师)" scheme="https://blog.serms.top/tags/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A9%E7%A6%B9%E8%80%81%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>Spring常见面试题</title>
    <link href="https://blog.serms.top/post/5dd00982/"/>
    <id>https://blog.serms.top/post/5dd00982/</id>
    <published>2022-05-04T10:28:38.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一般问题"><a href="#一般问题" class="headerlink" title="一般问题"></a>一般问题</h2><h3 id="不同版本的-Spring-Framework-有哪些主要功能？"><a href="#不同版本的-Spring-Framework-有哪些主要功能？" class="headerlink" title="不同版本的 Spring Framework 有哪些主要功能？"></a>不同版本的 Spring Framework 有哪些主要功能？</h3><div class="table-container"><table><thead><tr><th>Version</th><th>Feature</th></tr></thead><tbody><tr><td>Spring 2.5</td><td>发布于 2007 年。这是第一个支持注解的版本。</td></tr><tr><td>Spring 3.0</td><td>发布于 2009 年。它完全利用了 Java5 中的改进，并为 JEE6 提供了支持。</td></tr><tr><td>Spring 4.0</td><td>发布于 2013 年。这是第一个完全支持 JAVA8 的版本。</td></tr></tbody></table></div><h3 id="什么是-Spring-Framework？"><a href="#什么是-Spring-Framework？" class="headerlink" title="什么是 Spring Framework？"></a>什么是 Spring Framework？</h3><ul><li>Spring 是一个开源应用框架，旨在降低应用程序开发的复杂度。</li><li>它是轻量级、松散耦合的。</li><li>它具有分层体系结构，允许用户选择组件，同时还为 J2EE 应用程序开发提供了一个有凝聚力的框架。</li><li>它可以集成其他框架，如 Structs、Hibernate、EJB 等，所以又称为框架的框架。</li></ul><h3 id="列举-Spring-Framework-的优点。"><a href="#列举-Spring-Framework-的优点。" class="headerlink" title="列举 Spring Framework 的优点。"></a>列举 Spring Framework 的优点。</h3><ul><li>由于 Spring Frameworks 的分层架构，用户可以自由选择自己需要的组件。</li><li>Spring Framework 支持 POJO(Plain Old Java Object) 编程，从而具备持续集成和可测试性。</li><li>由于依赖注入和控制反转，JDBC 得以简化。</li><li>它是开源免费的。</li></ul><h3 id="Spring-Framework-有哪些不同的功能？"><a href="#Spring-Framework-有哪些不同的功能？" class="headerlink" title="Spring Framework 有哪些不同的功能？"></a>Spring Framework 有哪些不同的功能？</h3><ul><li><strong>轻量级</strong> - Spring 在代码量和透明度方面都很轻便。</li><li><strong>IOC</strong> - 控制反转</li><li><strong>AOP</strong> - 面向切面编程可以将应用业务逻辑和系统服务分离，以实现高内聚。</li><li><strong>容器</strong> - Spring 负责创建和管理对象（Bean）的生命周期和配置。</li><li><strong>MVC</strong> - 对 web 应用提供了高度可配置性，其他框架的集成也十分方便。</li><li><strong>事务管理</strong> - 提供了用于事务管理的通用抽象层。Spring 的事务支持也可用于容器较少的环境。</li><li><strong>JDBC 异常</strong> - Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。</li></ul><h3 id="Spring-Framework-中有多少个模块，它们分别是什么？"><a href="#Spring-Framework-中有多少个模块，它们分别是什么？" class="headerlink" title="Spring Framework 中有多少个模块，它们分别是什么？"></a>Spring Framework 中有多少个模块，它们分别是什么？</h3><ul><li><p>Spring 核心容器</p><p>– 该层基本上是 Spring Framework 的核心。它包含以下模块：</p><ul><li>Spring Core</li><li>Spring Bean</li><li>SpEL (Spring Expression Language)</li><li>Spring Context</li></ul></li><li><p>数据访问/集成</p><p>– 该层提供与数据库交互的支持。它包含以下模块：</p><ul><li>JDBC (Java DataBase Connectivity)</li><li>ORM (Object Relational Mapping)</li><li>OXM (Object XML Mappers)</li><li>JMS (Java Messaging Service)</li><li>Transaction</li></ul></li><li><p>Web</p><p>– 该层提供了创建 Web 应用程序的支持。它包含以下模块：</p><ul><li>Web</li><li>Web – Servlet</li><li>Web – Socket</li><li>Web – Portlet</li></ul></li><li><p><strong>AOP</strong> – 该层支持面向切面编程</p></li><li><p><strong>Instrumentation</strong> – 该层为类检测和类加载器实现提供支持。</p></li><li><p><strong>Test</strong> – 该层为使用 JUnit 和 TestNG 进行测试提供支持。</p></li><li><p>几个杂项模块:</p><ul><li>Messaging – 该模块为 STOMP 提供支持。它还支持注解编程模型，该模型用于从 WebSocket 客户端路由和处理 STOMP 消息。</li><li>Aspects – 该模块为与 AspectJ 的集成提供支持。</li></ul></li></ul><h3 id="什么是-Spring-配置文件？"><a href="#什么是-Spring-配置文件？" class="headerlink" title="什么是 Spring 配置文件？"></a>什么是 Spring 配置文件？</h3><p>Spring 配置文件是 XML 文件。该文件主要包含类信息。它描述了这些类是如何配置以及相互引入的。但是，XML 配置文件冗长且更加干净。如果没有正确规划和编写，那么在大项目中管理变得非常困难。</p><h3 id="Spring-应用程序有哪些不同组件？"><a href="#Spring-应用程序有哪些不同组件？" class="headerlink" title="Spring 应用程序有哪些不同组件？"></a>Spring 应用程序有哪些不同组件？</h3><p>Spring 应用一般有以下组件：</p><ul><li><strong>接口</strong> - 定义功能。</li><li><strong>Bean 类</strong> - 它包含属性，setter 和 getter 方法，函数等。</li><li><strong>Spring 面向切面编程（AOP）</strong> - 提供面向切面编程的功能。</li><li><strong>Bean 配置文件</strong> - 包含类的信息以及如何配置它们。</li><li><strong>用户程序</strong> - 它使用接口。</li></ul><h3 id="使用-Spring-有哪些方式？"><a href="#使用-Spring-有哪些方式？" class="headerlink" title="使用 Spring 有哪些方式？"></a>使用 Spring 有哪些方式？</h3><p>使用 Spring 有以下方式：</p><ul><li>作为一个成熟的 Spring Web 应用程序。</li><li>作为第三方 Web 框架，使用 Spring Frameworks 中间层。</li><li>用于远程使用。</li><li>作为企业级 Java Bean，它可以包装现有的 POJO（Plain Old Java Objects）。</li></ul><h2 id="依赖注入（Ioc）"><a href="#依赖注入（Ioc）" class="headerlink" title="依赖注入（Ioc）"></a>依赖注入（Ioc）</h2><h3 id="什么是-Spring-IOC-容器？"><a href="#什么是-Spring-IOC-容器？" class="headerlink" title="什么是 Spring IOC 容器？"></a>什么是 Spring IOC 容器？</h3><p>Spring 框架的核心是 Spring 容器。容器创建对象，将它们装配在一起，配置它们并管理它们的完整生命周期。Spring 容器使用依赖注入来管理组成应用程序的组件。容器通过读取提供的配置元数据来接收对象进行实例化，配置和组装的指令。该元数据可以通过 XML，Java 注解或 Java 代码提供。</p><p><img src="https://upload-images.jianshu.io/upload_images/3101171-33099411d16ca051.png" alt="img"></p><h3 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h3><p>在依赖注入中，您不必创建对象，但必须描述如何创建它们。您不是直接在代码中将组件和服务连接在一起，而是描述配置文件中哪些组件需要哪些服务。由 IoC 容器将它们装配在一起。</p><h3 id="可以通过多少种方式完成依赖注入？"><a href="#可以通过多少种方式完成依赖注入？" class="headerlink" title="可以通过多少种方式完成依赖注入？"></a>可以通过多少种方式完成依赖注入？</h3><p>通常，依赖注入可以通过三种方式完成，即：</p><ul><li>构造函数注入</li><li>setter 注入</li><li>接口注入</li></ul><p>在 Spring Framework 中，仅使用构造函数和 setter 注入。</p><h3 id="区分构造函数注入和-setter-注入。"><a href="#区分构造函数注入和-setter-注入。" class="headerlink" title="区分构造函数注入和 setter 注入。"></a>区分构造函数注入和 setter 注入。</h3><div class="table-container"><table><thead><tr><th>构造函数注入</th><th>setter 注入</th></tr></thead><tbody><tr><td>没有部分注入</td><td>有部分注入</td></tr><tr><td>不会覆盖 setter 属性</td><td>会覆盖 setter 属性</td></tr><tr><td>任意修改都会创建一个新实例</td><td>任意修改不会创建一个新实例</td></tr><tr><td>适用于设置很多属性</td><td>适用于设置少量属性</td></tr></tbody></table></div><h3 id="spring-中有多少种-IOC-容器？"><a href="#spring-中有多少种-IOC-容器？" class="headerlink" title="spring 中有多少种 IOC 容器？"></a>spring 中有多少种 IOC 容器？</h3><ul><li>BeanFactory - BeanFactory 就像一个包含 bean 集合的工厂类。它会在客户端要求时实例化 bean。</li><li>ApplicationContext - ApplicationContext 接口扩展了 BeanFactory 接口。它在 BeanFactory 基础上提供了一些额外的功能。</li></ul><h3 id="区分-BeanFactory-和-ApplicationContext。"><a href="#区分-BeanFactory-和-ApplicationContext。" class="headerlink" title="区分 BeanFactory 和 ApplicationContext。"></a>区分 BeanFactory 和 ApplicationContext。</h3><div class="table-container"><table><thead><tr><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>它使用懒加载</td><td>它使用即时加载</td></tr><tr><td>它使用语法显式提供资源对象</td><td>它自己创建和管理资源对象</td></tr><tr><td>不支持国际化</td><td>支持国际化</td></tr><tr><td>不支持基于依赖的注解</td><td>支持基于依赖的注解</td></tr></tbody></table></div><h3 id="列举-IoC-的一些好处。"><a href="#列举-IoC-的一些好处。" class="headerlink" title="列举 IoC 的一些好处。"></a>列举 IoC 的一些好处。</h3><p>IoC 的一些好处是：</p><ul><li>它将最小化应用程序中的代码量。</li><li>它将使您的应用程序易于测试，因为它不需要单元测试用例中的任何单例或 JNDI 查找机制。</li><li>它以最小的影响和最少的侵入机制促进松耦合。</li><li>它支持即时的实例化和延迟加载服务。</li></ul><h3 id="Spring-IoC-的实现机制。"><a href="#Spring-IoC-的实现机制。" class="headerlink" title="Spring IoC 的实现机制。"></a>Spring IoC 的实现机制。</h3><p>Spring 中的 IoC 的实现原理就是工厂模式加反射机制。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orange</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title function_">getInstance</span><span class="params">(String ClassName)</span> &#123;</span><br><span class="line">        Fruit f=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f=(Fruit)Class.forName(ClassName).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span> &#123;</span><br><span class="line">        Fruit f=Factory.getInstance(<span class="string">&quot;io.github.dunwu.spring.Apple&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(f!=<span class="literal">null</span>)&#123;</span><br><span class="line">            f.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Beans"><a href="#Beans" class="headerlink" title="Beans"></a>Beans</h2><h3 id="什么是-spring-bean？"><a href="#什么是-spring-bean？" class="headerlink" title="什么是 spring bean？"></a>什么是 spring bean？</h3><ul><li>它们是构成用户应用程序主干的对象。</li><li>Bean 由 Spring IoC 容器管理。</li><li>它们由 Spring IoC 容器实例化，配置，装配和管理。</li><li>Bean 是基于用户提供给容器的配置元数据创建。</li></ul><h3 id="spring-提供了哪些配置方式？"><a href="#spring-提供了哪些配置方式？" class="headerlink" title="spring 提供了哪些配置方式？"></a>spring 提供了哪些配置方式？</h3><ul><li>基于 xml 配置</li></ul><p>bean 所需的依赖项和服务在 XML 格式的配置文件中指定。这些配置文件通常包含许多 bean 定义和特定于应用程序的配置选项。它们通常以 bean 标签开头。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentbean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.edureka.firstSpring.StudentBean&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Edureka&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于注解配置</li></ul><p>您可以通过在相关的类，方法或字段声明上使用注解，将 bean 配置为组件类本身，而不是使用 XML 来描述 bean 装配。默认情况下，Spring 容器中未打开注解装配。因此，您需要在使用它之前在 Spring 配置文件中启用它。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bean definitions go here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于 Java API 配置</li></ul><p>Spring 的 Java 配置是通过使用 @Bean 和 @Configuration 来实现。</p><ol><li>@Bean 注解扮演与 <code>&lt;bean /&gt;</code> 元素相同的角色。</li><li>@Configuration 类允许通过简单地调用同一个类中的其他 @Bean 方法来定义 bean 间依赖关系。</li></ol><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> StudentBean <span class="title function_">myStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-支持集中-bean-scope？"><a href="#spring-支持集中-bean-scope？" class="headerlink" title="spring 支持集中 bean scope？"></a>spring 支持集中 bean scope？</h3><p>Spring bean 支持 5 种 scope：</p><ul><li><strong>Singleton</strong> - 每个 Spring IoC 容器仅有一个单实例。</li><li><strong>Prototype</strong> - 每次请求都会产生一个新的实例。</li><li><strong>Request</strong> - 每一次 HTTP 请求都会产生一个新的实例，并且该 bean 仅在当前 HTTP 请求内有效。</li><li><strong>Session</strong> - 每一次 HTTP 请求都会产生一个新的 bean，同时该 bean 仅在当前 HTTP session 内有效。</li><li><strong>Global-session</strong> - 类似于标准的 HTTP Session 作用域，不过它仅仅在基于 portlet 的 web 应用中才有意义。Portlet 规范定义了全局 Session 的概念，它被所有构成某个 portlet web 应用的各种不同的 portlet 所共享。在 global session 作用域中定义的 bean 被限定于全局 portlet Session 的生命周期范围内。如果你在 web 中使用 global session 作用域来标识 bean，那么 web 会自动当成 session 类型来使用。</li></ul><p>仅当用户使用支持 Web 的 ApplicationContext 时，最后三个才可用。</p><h3 id="spring-bean-容器的生命周期是什么样的？"><a href="#spring-bean-容器的生命周期是什么样的？" class="headerlink" title="spring bean 容器的生命周期是什么样的？"></a>spring bean 容器的生命周期是什么样的？</h3><p>spring bean 容器的生命周期流程如下：</p><ol><li>Spring 容器根据配置中的 bean 定义中实例化 bean。</li><li>Spring 使用依赖注入填充所有属性，如 bean 中所定义的配置。</li><li>如果 bean 实现 BeanNameAware 接口，则工厂通过传递 bean 的 ID 来调用 setBeanName()。</li><li>如果 bean 实现 BeanFactoryAware 接口，工厂通过传递自身的实例来调用 setBeanFactory()。</li><li>如果存在与 bean 关联的任何 BeanPostProcessors，则调用 preProcessBeforeInitialization() 方法。</li><li>如果为 bean 指定了 init 方法（<code>&lt;bean&gt;</code> 的 init-method 属性），那么将调用它。</li><li>最后，如果存在与 bean 关联的任何 BeanPostProcessors，则将调用 postProcessAfterInitialization() 方法。</li><li>如果 bean 实现 DisposableBean 接口，当 spring 容器关闭时，会调用 destory()。</li><li>如果为 bean 指定了 destroy 方法（<code>&lt;bean&gt;</code> 的 destroy-method 属性），那么将调用它。</li></ol><h3 id="什么是-spring-的内部-bean？"><a href="#什么是-spring-的内部-bean？" class="headerlink" title="什么是 spring 的内部 bean？"></a>什么是 spring 的内部 bean？</h3><p>只有将 bean 用作另一个 bean 的属性时，才能将 bean 声明为内部 bean。为了定义 bean，Spring 的基于 XML 的配置元数据在 <code>&lt;property&gt;</code> 或 <code>&lt;constructor-arg&gt;</code> 中提供了 <code>&lt;bean&gt;</code> 元素的使用。内部 bean 总是匿名的，它们总是作为原型。</p><p>例如，假设我们有一个 Student 类，其中引用了 Person 类。这里我们将只创建一个 Person 类实例并在 Student 中使用它。</p><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="comment">//Setters and Getters</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//Setters and Getters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bean.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">“StudentBean</span>&quot; <span class="attr">class</span>=<span class="string">&quot;com.edureka.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--This is inner bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.edureka.Person&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">“Scott</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">“Bangalore</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="什么是-spring-装配"><a href="#什么是-spring-装配" class="headerlink" title="什么是 spring 装配"></a>什么是 spring 装配</h3><p>当 bean 在 Spring 容器中组合在一起时，它被称为装配或 bean 装配。 Spring 容器需要知道需要什么 bean 以及容器应该如何使用依赖注入来将 bean 绑定在一起，同时装配 bean。</p><h3 id="自动装配有哪些方式？"><a href="#自动装配有哪些方式？" class="headerlink" title="自动装配有哪些方式？"></a>自动装配有哪些方式？</h3><p>Spring 容器能够自动装配 bean。也就是说，可以通过检查 BeanFactory 的内容让 Spring 自动解析 bean 的协作者。</p><p>自动装配的不同模式：</p><ul><li><strong>no</strong> - 这是默认设置，表示没有自动装配。应使用显式 bean 引用进行装配。</li><li><strong>byName</strong> - 它根据 bean 的名称注入对象依赖项。它匹配并装配其属性与 XML 文件中由相同名称定义的 bean。</li><li><strong>byType</strong> - 它根据类型注入对象依赖项。如果属性的类型与 XML 文件中的一个 bean 名称匹配，则匹配并装配属性。</li><li><strong>构造函数</strong> - 它通过调用类的构造函数来注入依赖项。它有大量的参数。</li><li><strong>autodetect</strong> - 首先容器尝试通过构造函数使用 autowire 装配，如果不能，则尝试通过 byType 自动装配。</li></ul><h3 id="自动装配有什么局限？"><a href="#自动装配有什么局限？" class="headerlink" title="自动装配有什么局限？"></a>自动装配有什么局限？</h3><ul><li>覆盖的可能性 - 您始终可以使用 <code>&lt;constructor-arg&gt;</code> 和 <code>&lt;property&gt;</code> 设置指定依赖项，这将覆盖自动装配。</li><li>基本元数据类型 - 简单属性（如原数据类型，字符串和类）无法自动装配。</li><li>令人困惑的性质 - 总是喜欢使用明确的装配，因为自动装配不太精确。</li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="你用过哪些重要的-Spring-注解？"><a href="#你用过哪些重要的-Spring-注解？" class="headerlink" title="你用过哪些重要的 Spring 注解？"></a>你用过哪些重要的 Spring 注解？</h3><ul><li><strong>@Controller</strong> - 用于 Spring MVC 项目中的控制器类。</li><li><strong>@Service</strong> - 用于服务类。</li><li><strong>@RequestMapping</strong> - 用于在控制器处理程序方法中配置 URI 映射。</li><li><strong>@ResponseBody</strong> - 用于发送 Object 作为响应，通常用于发送 XML 或 JSON 数据作为响应。</li><li><strong>@PathVariable</strong> - 用于将动态值从 URI 映射到处理程序方法参数。</li><li><strong>@Autowired</strong> - 用于在 spring bean 中自动装配依赖项。</li><li><strong>@Qualifier</strong> - 使用 @Autowired 注解，以避免在存在多个 bean 类型实例时出现混淆。</li><li><strong>@Scope</strong> - 用于配置 spring bean 的范围。</li><li><strong>@Configuration</strong>，<strong>@ComponentScan</strong> 和 <strong>@Bean</strong> - 用于基于 java 的配置。</li><li><strong>@Aspect</strong>，<strong>@Before</strong>，<strong>@After</strong>，<strong>@Around</strong>，<strong>@Pointcut</strong> - 用于切面编程（AOP）。</li></ul><h3 id="如何在-spring-中启动注解装配？"><a href="#如何在-spring-中启动注解装配？" class="headerlink" title="如何在 spring 中启动注解装配？"></a>如何在 spring 中启动注解装配？</h3><p>默认情况下，Spring 容器中未打开注解装配。因此，要使用基于注解装配，我们必须通过配置<code>&lt;context：annotation-config /&gt;</code> 元素在 Spring 配置文件中启用它。</p><h3 id="Component-Controller-Repository-Service-有何区别？"><a href="#Component-Controller-Repository-Service-有何区别？" class="headerlink" title="@Component, @Controller, @Repository, @Service 有何区别？"></a>@Component, @Controller, @Repository, @Service 有何区别？</h3><ul><li>@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。</li><li>@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。</li><li>@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。</li><li>@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。</li></ul><h3 id="Required-注解有什么用？"><a href="#Required-注解有什么用？" class="headerlink" title="@Required 注解有什么用？"></a>@Required 注解有什么用？</h3><p>@Required 应用于 bean 属性 setter 方法。此注解仅指示必须在配置时使用 bean 定义中的显式属性值或使用自动装配填充受影响的 bean 属性。如果尚未填充受影响的 bean 属性，则容器将抛出 BeanInitializationException。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Required</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> string <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Autowired-注解有什么用？"><a href="#Autowired-注解有什么用？" class="headerlink" title="@Autowired 注解有什么用？"></a>@Autowired 注解有什么用？</h3><p>@Autowired 可以更准确地控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造函数，具有任意名称或多个参数的属性或方法上自动装配 bean。默认情况下，它是类型驱动的注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> string <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Qualifier-注解有什么用？"><a href="#Qualifier-注解有什么用？" class="headerlink" title="@Qualifier 注解有什么用？"></a>@Qualifier 注解有什么用？</h3><p>当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。</p><p>例如，这里我们分别有两个类，Employee 和 EmpAccount。在 EmpAccount 中，使用@Qualifier 指定了必须装配 id 为 emp1 的 bean。</p><p>Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> string <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpAccount.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpAccount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Employee emp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(emp1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(“Employee name : ”+emp.getName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestMapping-注解有什么用？"><a href="#RequestMapping-注解有什么用？" class="headerlink" title="@RequestMapping 注解有什么用？"></a>@RequestMapping 注解有什么用？</h3><p>@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注解可应用于两个级别：</p><ul><li>类级别：映射请求的 URL</li><li>方法级别：映射 URL 以及 HTTP 请求方法</li></ul><h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><h3 id="spring-DAO-有什么用？"><a href="#spring-DAO-有什么用？" class="headerlink" title="spring DAO 有什么用？"></a>spring DAO 有什么用？</h3><p>Spring DAO 使得 JDBC，Hibernate 或 JDO 这样的数据访问技术更容易以一种统一的方式工作。这使得用户容易在持久性技术之间切换。它还允许您在编写代码时，无需考虑捕获每种技术不同的异常。</p><h3 id="列举-Spring-DAO-抛出的异常。"><a href="#列举-Spring-DAO-抛出的异常。" class="headerlink" title="列举 Spring DAO 抛出的异常。"></a>列举 Spring DAO 抛出的异常。</h3><h3 id="spring-JDBC-API-中存在哪些类？"><a href="#spring-JDBC-API-中存在哪些类？" class="headerlink" title="spring JDBC API 中存在哪些类？"></a>spring JDBC API 中存在哪些类？</h3><ul><li>JdbcTemplate</li><li>SimpleJdbcTemplate</li><li>NamedParameterJdbcTemplate</li><li>SimpleJdbcInsert</li><li>SimpleJdbcCall</li></ul><h3 id="使用-Spring-访问-Hibernate-的方法有哪些？"><a href="#使用-Spring-访问-Hibernate-的方法有哪些？" class="headerlink" title="使用 Spring 访问 Hibernate 的方法有哪些？"></a>使用 Spring 访问 Hibernate 的方法有哪些？</h3><p>我们可以通过两种方式使用 Spring 访问 Hibernate：</p><ol><li>使用 Hibernate 模板和回调进行控制反转</li><li>扩展 HibernateDAOSupport 并应用 AOP 拦截器节点</li></ol><h3 id="列举-spring-支持的事务管理类型"><a href="#列举-spring-支持的事务管理类型" class="headerlink" title="列举 spring 支持的事务管理类型"></a>列举 spring 支持的事务管理类型</h3><p>Spring 支持两种类型的事务管理：</p><ol><li>程序化事务管理：在此过程中，在编程的帮助下管理事务。它为您提供极大的灵活性，但维护起来非常困难。</li><li>声明式事务管理：在此，事务管理与业务代码分离。仅使用注解或基于 XML 的配置来管理事务。</li></ol><h3 id="spring-支持哪些-ORM-框架"><a href="#spring-支持哪些-ORM-框架" class="headerlink" title="spring 支持哪些 ORM 框架"></a>spring 支持哪些 ORM 框架</h3><ul><li>Hibernate</li><li>iBatis</li><li>JPA</li><li>JDO</li><li>OJB</li></ul><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="什么是-AOP？"><a href="#什么是-AOP？" class="headerlink" title="什么是 AOP？"></a>什么是 AOP？</h3><p>AOP(Aspect-Oriented Programming), 即 <strong>面向切面编程</strong>, 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角. 在 OOP 中, 我们以类(class)作为我们的基本单元, 而 AOP 中的基本单元是 <strong>Aspect(切面)</strong></p><h3 id="AOP-中的-Aspect、Advice、Pointcut、JointPoint-和-Advice-参数分别是什么？"><a href="#AOP-中的-Aspect、Advice、Pointcut、JointPoint-和-Advice-参数分别是什么？" class="headerlink" title="AOP 中的 Aspect、Advice、Pointcut、JointPoint 和 Advice 参数分别是什么？"></a>AOP 中的 Aspect、Advice、Pointcut、JointPoint 和 Advice 参数分别是什么？</h3><ul><li><strong>Aspect</strong> - Aspect 是一个实现交叉问题的类，例如事务管理。方面可以是配置的普通类，然后在 Spring Bean 配置文件中配置，或者我们可以使用 Spring AspectJ 支持使用 @Aspect 注解将类声明为 Aspect。</li><li><strong>Advice</strong> - Advice 是针对特定 JoinPoint 采取的操作。在编程方面，它们是在应用程序中达到具有匹配切入点的特定 JoinPoint 时执行的方法。您可以将 Advice 视为 Spring 拦截器（Interceptor）或 Servlet 过滤器（filter）。</li><li><strong>Advice Arguments</strong> - 我们可以在 advice 方法中传递参数。我们可以在切入点中使用 args() 表达式来应用于与参数模式匹配的任何方法。如果我们使用它，那么我们需要在确定参数类型的 advice 方法中使用相同的名称。</li><li><strong>Pointcut</strong> - Pointcut 是与 JoinPoint 匹配的正则表达式，用于确定是否需要执行 Advice。 Pointcut 使用与 JoinPoint 匹配的不同类型的表达式。Spring 框架使用 AspectJ Pointcut 表达式语言来确定将应用通知方法的 JoinPoint。</li><li><strong>JoinPoint</strong> - JoinPoint 是应用程序中的特定点，例如方法执行，异常处理，更改对象变量值等。在 Spring AOP 中，JoinPoint 始终是方法的执行器。</li></ul><h3 id="什么是通知（Advice）？"><a href="#什么是通知（Advice）？" class="headerlink" title="什么是通知（Advice）？"></a>什么是通知（Advice）？</h3><p>特定 JoinPoint 处的 Aspect 所采取的动作称为 Advice。Spring AOP 使用一个 Advice 作为拦截器，在 JoinPoint “周围”维护一系列的拦截器。</p><h3 id="有哪些类型的通知（Advice）？"><a href="#有哪些类型的通知（Advice）？" class="headerlink" title="有哪些类型的通知（Advice）？"></a>有哪些类型的通知（Advice）？</h3><ul><li><strong>Before</strong> - 这些类型的 Advice 在 joinpoint 方法之前执行，并使用 @Before 注解标记进行配置。</li><li><strong>After Returning</strong> - 这些类型的 Advice 在连接点方法正常执行后执行，并使用@AfterReturning 注解标记进行配置。</li><li><strong>After Throwing</strong> - 这些类型的 Advice 仅在 joinpoint 方法通过抛出异常退出并使用 @AfterThrowing 注解标记配置时执行。</li><li><strong>After (finally)</strong> - 这些类型的 Advice 在连接点方法之后执行，无论方法退出是正常还是异常返回，并使用 @After 注解标记进行配置。</li><li><strong>Around</strong> - 这些类型的 Advice 在连接点之前和之后执行，并使用 @Around 注解标记进行配置。</li></ul><h3 id="指出在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处。"><a href="#指出在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处。" class="headerlink" title="指出在 spring aop 中 concern 和 cross-cutting concern 的不同之处。"></a>指出在 spring aop 中 concern 和 cross-cutting concern 的不同之处。</h3><p>concern 是我们想要在应用程序的特定模块中定义的行为。它可以定义为我们想要实现的功能。</p><p>cross-cutting concern 是一个适用于整个应用的行为，这会影响整个应用程序。例如，日志记录，安全性和数据传输是应用程序几乎每个模块都需要关注的问题，因此它们是跨领域的问题。</p><h3 id="AOP-有哪些实现方式？"><a href="#AOP-有哪些实现方式？" class="headerlink" title="AOP 有哪些实现方式？"></a>AOP 有哪些实现方式？</h3><p>实现 AOP 的技术，主要分为两大类：</p><ul><li>静态代理 - 指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；<ul><li>编译时编织（特殊编译器实现）</li><li>类加载时编织（特殊的类加载器实现）。</li></ul></li><li>动态代理 - 在运行时在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。<ul><li>JDK 动态代理</li><li>CGLIB</li></ul></li></ul><h3 id="Spring-AOP-and-AspectJ-AOP-有什么区别？"><a href="#Spring-AOP-and-AspectJ-AOP-有什么区别？" class="headerlink" title="Spring AOP and AspectJ AOP 有什么区别？"></a>Spring AOP and AspectJ AOP 有什么区别？</h3><p>Spring AOP 基于动态代理方式实现；AspectJ 基于静态代理方式实现。 Spring AOP 仅支持方法级别的 PointCut；提供了完全的 AOP 支持，它还支持属性级别的 PointCut。</p><h3 id="如何理解-Spring-中的代理？"><a href="#如何理解-Spring-中的代理？" class="headerlink" title="如何理解 Spring 中的代理？"></a>如何理解 Spring 中的代理？</h3><p>将 Advice 应用于目标对象后创建的对象称为代理。在客户端对象的情况下，目标对象和代理对象是相同的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Advice + Target Object = Proxy</span><br></pre></td></tr></table></figure><h3 id="什么是编织（Weaving）？"><a href="#什么是编织（Weaving）？" class="headerlink" title="什么是编织（Weaving）？"></a>什么是编织（Weaving）？</h3><p>为了创建一个 advice 对象而链接一个 aspect 和其它应用类型或对象，称为编织（Weaving）。在 Spring AOP 中，编织在运行时执行。请参考下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/3101171-cfaa92f0e4115b4a.png" alt="img"></p><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="Spring-MVC-框架有什么用？"><a href="#Spring-MVC-框架有什么用？" class="headerlink" title="Spring MVC 框架有什么用？"></a>Spring MVC 框架有什么用？</h3><p>Spring Web MVC 框架提供 <strong>模型-视图-控制器</strong> 架构和随时可用的组件，用于开发灵活且松散耦合的 Web 应用程序。 MVC 模式有助于分离应用程序的不同方面，如输入逻辑，业务逻辑和 UI 逻辑，同时在所有这些元素之间提供松散耦合。</p><h3 id="描述一下-DispatcherServlet-的工作流程"><a href="#描述一下-DispatcherServlet-的工作流程" class="headerlink" title="描述一下 DispatcherServlet 的工作流程"></a>描述一下 DispatcherServlet 的工作流程</h3><p>DispatcherServlet 的工作流程可以用一幅图来说明：</p><ol><li><p>向服务器发送 HTTP 请求，请求被前端控制器 <code>DispatcherServlet</code> 捕获。</p></li><li><p><code>DispatcherServlet</code> 根据 <strong>-servlet.xml</strong> 中的配置对请求的 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 <code>HandlerMapping</code> 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以<code>HandlerExecutionChain</code> 对象的形式返回。</p></li><li><p><code>DispatcherServlet</code> 根据获得的<code>Handler</code>，选择一个合适的 <code>HandlerAdapter</code>。（附注：如果成功获得<code>HandlerAdapter</code>后，此时将开始执行拦截器的 preHandler(…)方法）。</p></li><li><p>提取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Request</span><br></pre></td></tr></table></figure><p>中的模型数据，填充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handler</span><br></pre></td></tr></table></figure><p>入参，开始执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handler</span><br></pre></td></tr></table></figure><p>（</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controller</span><br></pre></td></tr></table></figure><p>)。 在填充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handler</span><br></pre></td></tr></table></figure><p>的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：</p><ul><li>HttpMessageConveter： 将请求消息（如 Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息。</li><li>数据转换：对请求消息进行数据转换。如<code>String</code>转换成<code>Integer</code>、<code>Double</code>等。</li><li>数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等。</li><li>数据验证： 验证数据的有效性（长度、格式等），验证结果存储到<code>BindingResult</code>或<code>Error</code>中。</li></ul></li><li><p>Handler(Controller)执行完成后，向 <code>DispatcherServlet</code> 返回一个 <code>ModelAndView</code> 对象；</p></li><li><p>根据返回的<code>ModelAndView</code>，选择一个适合的 <code>ViewResolver</code>（必须是已经注册到 Spring 容器中的<code>ViewResolver</code>)返回给<code>DispatcherServlet</code>。</p></li><li><p><code>ViewResolver</code> 结合<code>Model</code>和<code>View</code>，来渲染视图。</p></li><li><p>视图负责将渲染结果返回给客户端。</p></li></ol><h3 id="介绍一下-WebApplicationContext"><a href="#介绍一下-WebApplicationContext" class="headerlink" title="介绍一下 WebApplicationContext"></a>介绍一下 WebApplicationContext</h3><p>WebApplicationContext 是 ApplicationContext 的扩展。它具有 Web 应用程序所需的一些额外功能。它与普通的 ApplicationContext 在解析主题和决定与哪个 servlet 关联的能力方面有所不同。</p><p>本文大部分从网络收集,希望此文能给您带来帮助!</p><p>如果您有更好的建议可以在下方留言!</p>]]></content>
    
    
    <summary type="html">Spring常见面试题</summary>
    
    
    
    <category term="Spring" scheme="https://blog.serms.top/categories/Spring/"/>
    
    <category term="Java" scheme="https://blog.serms.top/categories/Java/"/>
    
    <category term="面试题" scheme="https://blog.serms.top/categories/Spring/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="Spring" scheme="https://blog.serms.top/tags/Spring/"/>
    
    <category term="Spring面试题" scheme="https://blog.serms.top/tags/Spring%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>SpringBean生命周期</title>
    <link href="https://blog.serms.top/post/93f3f3c2/"/>
    <id>https://blog.serms.top/post/93f3f3c2/</id>
    <published>2022-05-04T10:06:04.000Z</published>
    <updated>2023-09-01T03:47:56.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Bean-简介"><a href="#Spring-Bean-简介" class="headerlink" title="Spring Bean 简介"></a>Spring Bean 简介</h2><p>如何注册一个 Spring Bean？</p><p>通过 BeanDefinition 和外部单体对象来注册</p><h3 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h3><h4 id="什么是-BeanDefinition"><a href="#什么是-BeanDefinition" class="headerlink" title="什么是 BeanDefinition"></a>什么是 BeanDefinition</h4><p><code>BeanDefinition</code> 是 Spring Framework 中定义 Bean 的配置元信息接口，包含：</p><ul><li>Bean 类名</li><li>Bean 行为配置元素，如：作用域、自动绑定的模式、生命周期回调等</li><li>其他 Bean 引用</li><li>配置设置，如 Bean 属性（Properties）</li></ul><h4 id="l-beandefinition-元信息-BeanDefinition-元信息"><a href="#l-beandefinition-元信息-BeanDefinition-元信息" class="headerlink" title="l#beandefinition-元信息)BeanDefinition 元信息"></a>l#beandefinition-元信息)BeanDefinition 元信息</h4><p><code>BeanDefinition</code> 元信息如下：</p><div class="table-container"><table><thead><tr><th>属性（Property）</th><th>说明</th></tr></thead><tbody><tr><td>Class Bean</td><td>全类名，必须是具体类，不能用抽象类或接口</td></tr><tr><td>Name Bean</td><td>的名称或者 ID</td></tr><tr><td>Scope Bean</td><td>的作用域（如：singleton、prototype 等）</td></tr><tr><td>Constructor arguments Bean</td><td>构造器参数（用于依赖注入）</td></tr><tr><td>Properties Bean</td><td>属性设置（用于依赖注入）</td></tr><tr><td>Autowiring mode Bean</td><td>自动绑定模式（如：通过名称 byName）</td></tr><tr><td>Lazy initialization mode Bean</td><td>延迟初始化模式（延迟和非延迟）</td></tr><tr><td>Initialization method Bean</td><td>初始化回调方法名称</td></tr><tr><td>Destruction method Bean</td><td>销毁回调方法名称</td></tr></tbody></table></div><h4 id="BeanDefinition-构建"><a href="#BeanDefinition-构建" class="headerlink" title="BeanDefinition 构建"></a>BeanDefinition 构建</h4><p>BeanDefinition 构建方式：</p><ul><li>通过 <code>BeanDefinitionBuilder</code></li><li>通过 <code>AbstractBeanDefinition</code> 以及派生类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.通过 BeanDefinitionBuilder 构建</span></span><br><span class="line"><span class="type">BeanDefinitionBuilder</span> <span class="variable">beanDefinitionBuilder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(User.class);</span><br><span class="line"><span class="comment">// 通过属性设置</span></span><br><span class="line">beanDefinitionBuilder</span><br><span class="line">  .addPropertyValue(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">  .addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小马哥&quot;</span>);</span><br><span class="line"><span class="comment">// 获取 BeanDefinition 实例</span></span><br><span class="line"><span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> beanDefinitionBuilder.getBeanDefinition();</span><br><span class="line"><span class="comment">// BeanDefinition 并非 Bean 终态，可以自定义修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过 AbstractBeanDefinition 以及派生类</span></span><br><span class="line"><span class="type">GenericBeanDefinition</span> <span class="variable">genericBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericBeanDefinition</span>();</span><br><span class="line"><span class="comment">// 设置 Bean 类型</span></span><br><span class="line">genericBeanDefinition.setBeanClass(User.class);</span><br><span class="line"><span class="comment">// 通过 MutablePropertyValues 批量操作属性</span></span><br><span class="line"><span class="type">MutablePropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line"><span class="comment">//        propertyValues.addPropertyValue(&quot;id&quot;, 1);</span></span><br><span class="line"><span class="comment">//        propertyValues.addPropertyValue(&quot;name&quot;, &quot;小马哥&quot;);</span></span><br><span class="line">propertyValues</span><br><span class="line">  .add(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">  .add(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小马哥&quot;</span>);</span><br><span class="line"><span class="comment">// 通过 set MutablePropertyValues 批量操作属性</span></span><br><span class="line">genericBeanDefinition.setPropertyValues(propertyValues);</span><br></pre></td></tr></table></figure><h3 id="命名-Spring-Bean"><a href="#命名-Spring-Bean" class="headerlink" title="命名 Spring Bean"></a>命名 Spring Bean</h3><h4 id="Spring-Bean-命名规则"><a href="#Spring-Bean-命名规则" class="headerlink" title="Spring Bean 命名规则"></a>Spring Bean 命名规则</h4><p>每个 Bean 拥有一个或多个标识符（identifiers），这些标识符在 Bean 所在的容器必须是唯一的。通常，一个 Bean 仅有一个标识符，如果需要额外的，可考虑使用别名（Alias）来扩充。</p><p>在基于 XML 的配置元信息中，开发人员可用 id 或者 name 属性来规定 Bean 的标识符。通常 Bean 的标识符由字母组成，允许出现特殊字符。如果要想引入 Bean 的别名的话，可在 name 属性使用半角逗号（“,”）或分号（“;”) 来间隔。</p><p>Bean 的 id 或 name 属性并非必须制定，如果留空的话，容器会为 Bean 自动生成一个唯一的名称。Bean 的命名尽管没有限制，不过官方建议采用驼峰的方式，更符合 Java 的命名约定。</p><h4 id="Spring-Bean-命名生成器"><a href="#Spring-Bean-命名生成器" class="headerlink" title="Spring Bean 命名生成器"></a>Spring Bean 命名生成器</h4><p>Spring 提供了两种 Spring Bean 命名生成器：</p><ul><li>DefaultBeanNameGenerator：默认通用 BeanNameGenerator 实现。</li><li>AnnotationBeanNameGenerator：基于注解扫描的 BeanNameGenerator 实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanNameGenerator</span> &#123;</span><br><span class="line">   String <span class="title function_">generateBeanName</span><span class="params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Bean-别名"><a href="#Spring-Bean-别名" class="headerlink" title="Spring Bean 别名"></a>Spring Bean 别名</h4><p>可能存在这样的场景，不同系统中对于同一 bean 的命名方式不一样。 为了适配，Spring 支持 <code>&lt;alias&gt;</code> 为 bean 添加别名的功能。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.dunwu.spring.core.domain.User&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;sysUser&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;superUser&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Bean 别名（Alias）的作用：</p><ul><li>复用现有的 BeanDefinition</li><li>更具有场景化的命名方法，比如：<ul><li><code>&lt;alias name=&quot;myApp-dataSource&quot; alias=&quot;subsystemA-dataSource&quot;/&gt;</code></li><li><code>&lt;alias name=&quot;myApp-dataSource&quot; alias=&quot;subsystemB-dataSource&quot;/&gt;</code></li></ul></li></ul><h2 id="Bean-生命周期流程"><a href="#Bean-生命周期流程" class="headerlink" title="Bean 生命周期流程"></a>Bean 生命周期流程</h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F14623831-a87d9a6ee1be94a3.png%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F2%2Fw%2F1240&amp;refer=http%3A%2F%2Fupload-images.jianshu.io&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1654251154&amp;t=39886bb51305eca4d749695ecca02657" alt="img"></p><ol><li>Spring 对 Bean 进行实例化（相当于 new XXX()）</li><li>Spring 将值和引用注入进 Bean 对应的属性中</li><li>如果 Bean 实现了 <code>BeanNameAware</code> 接口，Spring 将 Bean 的 ID 传递给 <code>setBeanName</code> 方法<ul><li>作用是通过 Bean 的引用来获得 Bean ID，一般业务中是很少有用到 Bean 的 ID 的</li></ul></li><li>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，Spring 将调用 <code>setBeanDactory</code> 方法，并把 <code>BeanFactory</code> 容器实例作为参数传入。<ul><li>作用是获取 Spring 容器，如 Bean 通过 Spring 容器发布事件等</li></ul></li><li>如果 Bean 实现了 <code>ApplicationContextAware</code> 接口，Spring 容器将调用 <code>setApplicationContext</code> 方法，把应用上下文作为参数传入<ul><li>作用与 <code>BeanFactory</code> 类似都是为了获取 Spring 容器，不同的是 Spring 容器在调用 <code>setApplicationContext</code> 方法时会把它自己作为 <code>setApplicationContext</code> 的参数传入，而 Spring 容器在调用 <code>setBeanFactory</code> 前需要使用者自己指定（注入）<code>setBeanFactory</code> 里的参数 <code>BeanFactory</code></li></ul></li><li>如果 Bean 实现了 <code>BeanPostProcess</code> 接口，Spring 将调用 <code>postProcessBeforeInitialization</code> 方法<ul><li>作用是在 Bean 实例创建成功后对其进行增强处理，如对 Bean 进行修改，增加某个功能</li></ul></li><li>如果 Bean 实现了 <code>InitializingBean</code> 接口，Spring 将调用 <code>afterPropertiesSet</code> 方法，作用与在配置文件中对 Bean 使用 <code>init-method</code> 声明初始化的作用一样，都是在 Bean 的全部属性设置成功后执行的初始化方法。</li><li>如果 Bean 实现了 <code>BeanPostProcess</code> 接口，Spring 将调用 <code>postProcessAfterInitialization</code> 方法<ul><li><code>postProcessBeforeInitialization</code> 是在 Bean 初始化前执行的，而 <code>postProcessAfterInitialization</code> 是在 Bean 初始化后执行的</li></ul></li><li>经过以上的工作后，Bean 将一直驻留在应用上下文中给应用使用，直到应用上下文被销毁</li><li>如果 Bean 实现了 <code>DispostbleBean</code> 接口，Spring 将调用它的 <code>destory</code> 方法，作用与在配置文件中对 Bean 使用 <code>destory-method</code> 属性的作用一样，都是在 Bean 实例销毁前执行的方法。</li></ol><h2 id="Spring-Bean-注册"><a href="#Spring-Bean-注册" class="headerlink" title="Spring Bean 注册"></a>Spring Bean 注册</h2><p>注册 Spring Bean 实际上是将 <code>BeanDefinition</code> 注册到 IoC 容器中。</p><h3 id="XML-配置元信息"><a href="#XML-配置元信息" class="headerlink" title="XML 配置元信息"></a>XML 配置元信息</h3><p>Spring 的传统配置方式。在 <code>&lt;bean&gt;</code> 标签中配置元数据内容。</p><p>缺点是当 JavaBean 过多时，产生的配置文件足以让你眼花缭乱。</p><h3 id="注解配置元信息"><a href="#注解配置元信息" class="headerlink" title="注解配置元信息"></a>注解配置元信息</h3><p>使用 <code>@Bean</code>、<code>@Component</code>、<code>@Import</code> 注解注册 Spring Bean。</p><h3 id="Java-API-配置元信息"><a href="#Java-API-配置元信息" class="headerlink" title="Java API 配置元信息"></a>Java API 配置元信息</h3><ul><li>命名方式：<code>BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)</code></li><li>非命名方式：<code>BeanDefinitionReaderUtils#registerWithGeneratedName(AbstractBeanDefinition,Be</code> <code>anDefinitionRegistry)</code></li><li>配置类方式：<code>AnnotatedBeanDefinitionReader#register(Class...)</code></li></ul><p>[示例]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(AnnotationComponentScan.MyConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationComponentScan</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建 BeanFactory 容器</span></span><br><span class="line">      <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 1.注册配置类</span></span><br><span class="line">      ctx.register(AnnotationComponentScan.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.通过 Java API 注册</span></span><br><span class="line">      registerBeanDefinition(ctx, <span class="string">&quot;zhaoliu&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 启动应用上下文</span></span><br><span class="line">      ctx.refresh();</span><br><span class="line"></span><br><span class="line">      <span class="type">User</span> <span class="variable">wangwu</span> <span class="operator">=</span> (User) ctx.getBean(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;wangwu info: &quot;</span> + wangwu);</span><br><span class="line">      System.out.println(<span class="string">&quot;All beans of User: &quot;</span> + ctx.getBeansOfType(User.class));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//显示关闭 ApplicationContext</span></span><br><span class="line">      ctx.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(BeanDefinitionRegistry registry, String beanName, Class&lt;?&gt; beanClass)</span> &#123;</span><br><span class="line">      <span class="type">BeanDefinitionBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(beanClass);</span><br><span class="line">      builder.addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">      builder.addPropertyValue(<span class="string">&quot;age&quot;</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 注册 BeanDefinition</span></span><br><span class="line">      registry.registerBeanDefinition(beanName, builder.getBeanDefinition());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Configuration</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 注解方式配置元信息</span></span><br><span class="line">      <span class="meta">@Bean(name = &#123; &quot;user&quot;, &quot;wangwu&quot; &#125;)</span></span><br><span class="line">      <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">21</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-实例化"><a href="#Spring-Bean-实例化" class="headerlink" title="Spring Bean 实例化"></a>Spring Bean 实例化</h2><p>Spring Bean 实例化方式：</p><ul><li>常规方式<ul><li>通过构造器（配置元信息：XML、Java 注解和 Java API）</li><li>通过静态工厂方法（配置元信息：XML、Java 注解和 Java API）</li><li>通过 Bean 工厂方法（配置元信息：XML、Java 注解和 Java API）</li><li>通过 <code>FactoryBean</code>（配置元信息：XML、Java 注解和 Java API）</li></ul></li><li>特殊方式<ul><li>通过 <code>ServiceLoaderFactoryBean</code>（配置元信息：XML、Java 注解和 Java API ）</li><li>通过 <code>AutowireCapableBeanFactory#createBean(java.lang.Class, int, boolean)</code></li><li>通过 <code>BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)</code></li></ul></li></ul><h2 id="Spring-Bean-初始化和销毁"><a href="#Spring-Bean-初始化和销毁" class="headerlink" title="Spring Bean 初始化和销毁"></a>Spring Bean 初始化和销毁</h2><p>Spring Bean 初始化和销毁的方式有以下几种：</p><ol><li>使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解分别指定相应的初始化方法和销毁方法。</li><li>实现 <code>InitializingBean</code> 接口的 <code>afterPropertiesSet()</code> 方法来编写初始化方法；实现 <code>DisposableBean</code> 接口的 <code>destroy()</code> 方法来编写销毁方法。</li><li>自定义初始化方法<ul><li>XML 配置：<code>&lt;bean init-method=&quot;init&quot; destroy=&quot;destroy&quot; ... /&gt;</code></li><li>Java 注解：<code>@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</code></li><li>Java API：<code>AbstractBeanDefinition#setInitMethodName(String)</code> 和 <code>AbstractBeanDefinition#setDestroyMethodName(String)</code> 分别定义初始化和销毁方法</li></ul></li></ol><p>注意：如果同时存在，执行顺序会按照序列执行。</p><h3 id="Bean-的-initMethod-和-destroyMethod"><a href="#Bean-的-initMethod-和-destroyMethod" class="headerlink" title="@Bean 的 initMethod 和 destroyMethod"></a><code>@Bean</code> 的 initMethod 和 destroyMethod</h3><p>（1）定义 Bean 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pojo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pojo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo 构造方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo 初始化方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo 销毁方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）使用 <code>@Bean</code> 在配置类中注册 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationBeanDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Pojo <span class="title function_">pojo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pojo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：<code>@Bean</code> 注解的 <code>initMethod</code> 和 <code>destroyMethod</code> 属性分别用于指定 Bean 对应的初始化方法和销毁方法。</p></blockquote><p>（3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AnnotationBeanDemo.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;AnnotationBeanDemo 示例结束&quot;</span>);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Pojo 构造方法]</span><br><span class="line">[Pojo 初始化方法]</span><br><span class="line">AnnotationBeanDemo 示例结束</span><br><span class="line">[Pojo 销毁方法]</span><br></pre></td></tr></table></figure><h3 id="InitializingBean-和-DisposableBean"><a href="#InitializingBean-和-DisposableBean" class="headerlink" title="InitializingBean 和 DisposableBean"></a><code>InitializingBean</code> 和 <code>DisposableBean</code></h3><ul><li><code>InitializingBean</code> 接口包含一个 <code>afterPropertiesSet</code> 方法，可以通过实现该接口，然后在这个方法中编写初始化逻辑。</li><li><code>DisposableBean</code>接口包含一个 <code>destory</code> 方法，可以通过实现该接口，然后在这个方法中编写销毁逻辑。</li></ul><p>（1）定义 Bean 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pojo2</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pojo2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo2 构造方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo2 初始化方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo2 销毁方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）使用 <code>@Bean</code> 在配置类中注册 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationBeanDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pojo2 <span class="title function_">pojo2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pojo2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AnnotationBeanDemo.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;AnnotationBeanDemo 示例结束&quot;</span>);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Pojo2 构造方法]</span><br><span class="line">[Pojo2 初始化方法]</span><br><span class="line">AnnotationBeanDemo 示例结束</span><br><span class="line">[Pojo2 销毁方法]</span><br></pre></td></tr></table></figure><h3 id="PostConstruct-和-PreDestroy"><a href="#PostConstruct-和-PreDestroy" class="headerlink" title="@PostConstruct 和 @PreDestroy"></a><code>@PostConstruct</code> 和 <code>@PreDestroy</code></h3><p>可以使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解修饰方法来指定相应的初始化和销毁方法。</p><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a><code>BeanPostProcessor</code></h3><p>Spring 提供了一个 <code>BeanPostProcessor</code> 接口，提供了两个方法 <code>postProcessBeforeInitialization</code> 和 <code>postProcessAfterInitialization</code>。其中<code>postProcessBeforeInitialization</code> 在组件的初始化方法调用之前执行，<code>postProcessAfterInitialization</code> 在组件的初始化方法调用之后执行。它们都包含两个入参：</p><ol><li>bean：当前组件对象；</li><li>beanName：当前组件在容器中的名称。</li></ol><p>（1）定义 Pojo，如上面的例子</p><p>（2）定义 <code>BeanPostProcessor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[BeanPostProcessor] construct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[BeanPostProcessor] postProcessBeforeInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[BeanPostProcessor] postProcessAfterInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）使用 <code>@Bean</code> 在配置类中注册 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Pojo <span class="title function_">pojo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pojo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MyBeanPostProcessor <span class="title function_">myBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBeanPostProcessor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyBeanPostProcessorDemo.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;BeanPostProcessorDemo 示例结束&quot;</span>);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[BeanPostProcessor] construct</span><br><span class="line">[Pojo 构造方法]</span><br><span class="line">[BeanPostProcessor] postProcessBeforeInitialization</span><br><span class="line">[Pojo 初始化方法]</span><br><span class="line">[BeanPostProcessor] postProcessAfterInitialization</span><br><span class="line">BeanPostProcessorDemo 示例结束</span><br><span class="line">[Pojo 销毁方法]</span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-垃圾回收"><a href="#Spring-Bean-垃圾回收" class="headerlink" title="Spring Bean 垃圾回收"></a>Spring Bean 垃圾回收</h2><p>Spring Bean 垃圾回收步骤：</p><ol><li>关闭 Spring 容器（应用上下文）</li><li>执行 GC</li><li>Spring Bean 覆盖的 finalize() 方法被回调</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans">Spring 官方文档之 Core Technologies</a></li></ul>]]></content>
    
    
    <summary type="html">SpringBean生命周期</summary>
    
    
    
    <category term="Spring" scheme="https://blog.serms.top/categories/Spring/"/>
    
    <category term="SpringBean生命周期" scheme="https://blog.serms.top/categories/Spring/SpringBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
    <category term="Java" scheme="https://blog.serms.top/categories/Java/"/>
    
    
    <category term="Java" scheme="https://blog.serms.top/tags/Java/"/>
    
    <category term="SpringBean生命周期" scheme="https://blog.serms.top/tags/SpringBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>Spring-依赖注入IOC</title>
    <link href="https://blog.serms.top/post/841c624e/"/>
    <id>https://blog.serms.top/post/841c624e/</id>
    <published>2022-05-04T09:41:05.000Z</published>
    <updated>2023-09-01T03:47:56.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IoC-概念简介"><a href="#IoC-概念简介" class="headerlink" title="IoC 概念简介"></a>IoC 概念简介</h2><h3 id="IoC-是什么"><a href="#IoC-是什么" class="headerlink" title="IoC 是什么"></a>IoC 是什么</h3><blockquote><p><strong>IoC，是 Inversion of Control 的缩写，即控制反转。</strong></p><ul><li>上层模块不应该依赖于下层模块，它们共同依赖于一个抽象</li><li>抽象不能依赖于具体实现，具体实现依赖于抽象</li></ul><p><em>注：又称为依赖倒置原则。这是设计模式六大原则之一。</em></p></blockquote><p>IoC 不是什么技术，而是一种设计思想。在 Java 开发中，IoC 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解 Ioc 呢？理解 Ioc 的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><ul><li><strong>谁控制谁，控制什么：</strong>传统 JavaSE 程序设计，我们直接在对象内部通过 new 进行创建对象，是程序主动去创建依赖对象；而 IoC 是有专门一个容器来创建这些对象，即由 IoC 容器来控制对象的创建；谁控制谁？当然是 IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</li><li><strong>为何是反转，哪些方面反转了：</strong>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</li></ul><h3 id="IoC-能做什么"><a href="#IoC-能做什么" class="headerlink" title="IoC 能做什么"></a>IoC 能做什么</h3><p>IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了 IoC 容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>其实 IoC 对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在 IoC/DI 思想中，应用程序就变成被动的了，被动的等待 IoC 容器来创建并注入它所需要的资源了。</p><p>IoC 很好的体现了面向对象设计法则之一—— <strong>好莱坞法则：“别找我们，我们找你”</strong>；即由 IoC 容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><h3 id="IoC-和-DI"><a href="#IoC-和-DI" class="headerlink" title="IoC 和 DI"></a>IoC 和 DI</h3><p>其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以 2004 年大师级人物 Martin Fowler 又给出了一个新的名字：“依赖注入”，相对 IoC 而言，“依赖注入”明确描述了“被注入对象依赖 IoC 容器配置依赖对象”。</p><blockquote><p>注：如果想要更加深入的了解 IoC 和 DI，请参考大师级人物 Martin Fowler 的一篇经典文章 <a href="http://www.martinfowler.com/articles/injection.html">Inversion of Control Containers and the Dependency Injection pattern (opens new window)</a>。</p></blockquote><h3 id="IoC-容器"><a href="#IoC-容器" class="headerlink" title="IoC 容器"></a>IoC 容器</h3><p>IoC 容器就是具有依赖注入功能的容器。IoC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。应用程序无需直接在代码中 new 相关的对象，应用程序由 IoC 容器进行组装。在 Spring 中 BeanFactory 是 IoC 容器的实际代表者。</p><p>Spring IoC 容器如何知道哪些是它管理的对象呢？这就需要配置文件，Spring IoC 容器通过读取配置文件中的配置元数据，通过元数据对应用中的各个对象进行实例化及装配。一般使用基于 xml 配置文件进行配置元数据，而且 Spring 与配置文件完全解耦的，可以使用其他任何可能的方式进行配置元数据，比如注解、基于 java 文件的、基于属性文件的配置都可以。</p><p>那 Spring IoC 容器管理的对象叫什么呢？</p><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><blockquote><p><strong>JavaBean</strong> 是一种 JAVA 语言写成的可重用组件。为写成 JavaBean，类必须是具体的和公共的，并且具有无参数的构造器。JavaBean 对外部通过提供 getter / setter 方法来访问其成员。</p></blockquote><p>由 IoC 容器管理的那些组成你应用程序的对象我们就叫它 Bean。Bean 就是由 Spring 容器初始化、装配及管理的对象，除此之外，bean 就与应用程序中的其他对象没有什么区别了。那 IoC 怎样确定如何实例化 Bean、管理 Bean 之间的依赖关系以及管理 Bean 呢？这就需要配置元数据，在 Spring 中由 BeanDefinition 代表，后边会详细介绍，配置元数据指定如何实例化 Bean、如何组装 Bean 等。</p><h2 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h2><h3 id="核心接口"><a href="#核心接口" class="headerlink" title="核心接口"></a>核心接口</h3><p><code>org.springframework.beans</code> 和 <code>org.springframework.context</code> 是 IoC 容器的基础。</p><p>在 Spring 中，有两种 IoC 容器：<code>BeanFactory</code> 和 <code>ApplicationContext</code>。</p><ul><li><code>BeanFactory</code>：BeanFactory 提供了 Spring 容器的配置框架和基本功能。</li><li><code>ApplicationContext</code>：BeanFactory 的子接口。它还扩展了其他一些接口，以支持更丰富的功能，如：国际化、访问资源、事件机制、更方便的支持 AOP、在 web 应用中指定应用层上下文等。</li></ul><p>实际开发中，更推荐使用 <code>ApplicationContext</code> 作为 IoC 容器，因为它的功能远多于 <code>FactoryBean</code>。</p><p>常见 <code>ApplicationContext</code> 实现：</p><ul><li><strong>ClassPathXmlApplicationContext</strong>：<code>ApplicationContext</code> 的实现，从 classpath 获取配置文件；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath.xml&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>FileSystemXmlApplicationContext</strong>：<code>ApplicationContext</code> 的实现，从文件系统获取配置文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;fileSystemConfig.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="IoC-容器工作步骤"><a href="#IoC-容器工作步骤" class="headerlink" title="IoC 容器工作步骤"></a>IoC 容器工作步骤</h3><p>使用 IoC 容器可分为三步骤：</p><ol><li><strong>配置元数据</strong>：需要配置一些元数据来告诉 Spring，你希望容器如何工作，具体来说，就是如何去初始化、配置、管理 JavaBean 对象。</li><li><strong>实例化容器</strong>：由 IoC 容器解析配置的元数据。IoC 容器的 Bean Reader 读取并解析配置文件，根据定义生成 BeanDefinition 配置元数据对象，IoC 容器根据 <code>BeanDefinition</code> 进行实例化、配置及组装 Bean。</li><li><strong>使用容器</strong>：由客户端实例化容器，获取需要的 Bean</li></ol><h3 id="配置元数据"><a href="#配置元数据" class="headerlink" title="配置元数据"></a>配置元数据</h3><p><strong>元数据（Metadata）</strong>又称中介数据、中继数据，为描述数据的数据（data about data），主要是描述数据属性（property）的信息。</p><p>配置元数据的方式：</p><ul><li><p><strong>基于 xml 配置</strong>：Spring 的传统配置方式。在 <code>&lt;beans&gt;</code> 标签中配置元数据内容。</p><p>缺点是当 JavaBean 过多时，产生的配置文件足以让你眼花缭乱。</p></li><li><p><strong>基于注解配置</strong>：Spring2.5 引入。可以大大简化你的配置。</p></li><li><p><strong>基于 Java 配置</strong>：可以使用 Java 类来定义 JavaBean 。</p><p>为了使用这个新特性，需要用到 <code>@Configuration</code> 、<code>@Bean</code> 、<code>@Import</code> 和 <code>@DependsOn</code> 注解</p></li></ul><h3 id="Spring-Bean-概述"><a href="#Spring-Bean-概述" class="headerlink" title="Spring Bean 概述"></a>Spring Bean 概述</h3><p>一个 Spring 容器管理一个或多个 bean。这些 bean 根据你配置的元数据（比如 xml 形式）来创建。</p><p>Spring IoC 容器本身，并不能识别你配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——<code>BeanDefinition</code> 对象。</p><ul><li><p><strong>命名 Bean</strong></p><ul><li>指定 id 和 name 属性不是必须的。Spring 中，并非一定要指定 id 和 name 属性。实际上，Spring 会自动为其分配一个特殊名。如果你需要引用声明的 bean，这时你才需要一个标识。官方推荐驼峰命名法来命名。</li></ul></li><li><p><strong>支持别名</strong></p><ul><li><p>可能存在这样的场景，不同系统中对于同一 bean 的命名方式不一样。 为了适配，Spring 支持 <code>&lt;alias&gt;</code> 为 bean 添加别名的功能。</p></li><li><p>```xml<br><alias name="subsystemA-dataSource" alias="subsystemB-dataSource"/><br><alias name="subsystemA-dataSource" alias="myApp-dataSource" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **实例化 Bean**</span><br><span class="line"></span><br><span class="line">  - 构造器方式</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;bean id=&quot;exampleBean&quot; class=&quot;examples.ExampleBean&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="依赖注入模式"><a href="#依赖注入模式" class="headerlink" title="依赖注入模式"></a>依赖注入模式</h3><p>依赖注入模式可以分为手动模式和自动模式。</p><h4 id="手动注入"><a href="#手动注入" class="headerlink" title="手动注入"></a>手动注入</h4><p>配置或者编程的方式，提前安排注入规则</p><ul><li>XML 资源配置元信息</li><li>Java 注解配置元信息</li><li>API 配置元信息</li></ul><h4 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h4><p>实现方提供依赖自动关联的方式，按照內建的注入规则（官方不推荐）</p><ul><li>Autowiring（自动绑定）</li></ul><div class="table-container"><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>no</td><td>默认值，未激活 Autowiring，需要手动指定依赖注入对象。</td></tr><tr><td>byName</td><td>根据被注入属性的名称作为 Bean 名称进行依赖查找，并将对象设置到该属性。</td></tr><tr><td>byType</td><td>根据被注入属性的类型作为依赖类型进行查找，并将对象设置到该属性。</td></tr><tr><td>constructor</td><td>特殊 byType 类型，用于构造器参数。</td></tr></tbody></table></div><blockquote><p>限制和不足参考：<a href="https://docs.spring.io/spring/docs/5.2.2.RELEASE/spring-frameworkreference/core.html#beans-autowired-exceptions">Limitations and Disadvantages of Autowiring 小节(opens new window)</a></p></blockquote><h4 id="依赖注入类型"><a href="#依赖注入类型" class="headerlink" title="依赖注入类型"></a>依赖注入类型</h4><div class="table-container"><table><thead><tr><th>依赖注入类型</th><th>配置元数据举例</th></tr></thead><tbody><tr><td>Setter 方法</td><td><code>&lt;proeprty name=&quot;user&quot; ref=&quot;userBean&quot;/&gt;</code></td></tr><tr><td>构造器</td><td><code>&lt;constructor-arg name=&quot;user&quot; ref=&quot;userBean&quot; /&gt;</code></td></tr><tr><td>字段</td><td><code>@Autowired User user;</code></td></tr><tr><td>方法</td><td><code>@Autowired public void user(User user) &#123; ... &#125;</code></td></tr><tr><td>接口回调</td><td><code>class MyBean implements BeanFactoryAware &#123; ... &#125;</code></td></tr></tbody></table></div><h4 id="Setter-方法注入"><a href="#Setter-方法注入" class="headerlink" title="Setter 方法注入"></a>Setter 方法注入</h4><p>手动模式</p><ul><li>XML 资源配置元信息</li><li>Java 注解配置元信息</li><li>API 配置元信息</li></ul><p>自动模式</p><ul><li>byName</li><li>byType</li></ul><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><p>手动模式</p><ul><li>XML 资源配置元信息</li><li>Java 注解配置元信息</li><li>API 配置元信息</li></ul><p>自动模式</p><ul><li>constructor</li></ul><h4 id="字段注入"><a href="#字段注入" class="headerlink" title="字段注入"></a>字段注入</h4><p>手动模式（Java 注解配置元信息）</p><ul><li><code>@Autowired</code></li><li><code>@Resource</code></li><li><code>@Inject</code>（可选）</li></ul><h4 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h4><p>手动模式（Java 注解配置元信息）</p><ul><li><code>@Autowired</code></li><li><code>@Resource</code></li><li><code>@Inject</code>（可选）</li><li><code>@Bean</code></li></ul><h4 id="接口回调注入"><a href="#接口回调注入" class="headerlink" title="接口回调注入"></a>接口回调注入</h4><p>Aware 系列接口回调</p><div class="table-container"><table><thead><tr><th>內建接口</th><th>说明</th></tr></thead><tbody><tr><td><code>BeanFactoryAware</code></td><td>获取 IoC 容器- <code>BeanFactory</code></td></tr><tr><td><code>ApplicationContextAware</code></td><td>获取 Spring 应用上下文- <code>ApplicationContext</code> 对象</td></tr><tr><td><code>EnvironmentAware</code></td><td>获取 <code>Environment</code> 对象</td></tr><tr><td><code>ResourceLoaderAware</code></td><td>获取资源加载器对象- <code>ResourceLoader</code></td></tr><tr><td><code>BeanClassLoaderAware</code></td><td>获取加载当前 Bean Class 的 <code>ClassLoader</code></td></tr><tr><td><code>BeanNameAware</code></td><td>获取当前 Bean 的名称</td></tr><tr><td><code>MessageSourceAware</code></td><td>获取 <code>MessageSource</code> 对象，用于 Spring 国际化</td></tr><tr><td><code>ApplicationEventPublisherAware</code></td><td>获取 <code>ApplicationEventPublishAware</code> 对象，用于 Spring 事件</td></tr><tr><td><code>EmbeddedValueResolverAware</code></td><td>获取 <code>StringValueResolver</code> 对象，用于占位符处理</td></tr></tbody></table></div><h4 id="依赖注入类型选择"><a href="#依赖注入类型选择" class="headerlink" title="依赖注入类型选择"></a>依赖注入类型选择</h4><ul><li>低依赖：构造器注入</li><li>多依赖：Setter 方法注入</li><li>便利性：字段注入</li><li>声明类：方法注入</li></ul><h3 id="被注入的数据类型"><a href="#被注入的数据类型" class="headerlink" title="被注入的数据类型"></a>被注入的数据类型</h3><p>基础类型</p><ul><li>原生类型（Primitive）：boolean、byte、char、short、int、float、long、double</li><li>标量类型（Scalar）：Number、Character、Boolean、Enum、Locale、Charset、Currency、Properties、UUID</li><li>常规类型（General）：Object、String、TimeZone、Calendar、Optional 等</li><li>Spring 类型：Resource、InputSource、Formatter 等</li></ul><p>集合类型</p><ul><li>数组类型（Array）：原生类型、标量类型、常规类型、Spring 类型</li><li>集合类型（Collection）<ul><li>Collection：List、Set（SortedSet、NavigableSet、EnumSet）</li><li>Map：Properties</li></ul></li></ul><h2 id="IoC-依赖查找"><a href="#IoC-依赖查找" class="headerlink" title="IoC 依赖查找"></a>IoC 依赖查找</h2><p><strong>依赖查找是主动或手动的依赖查找方式，通常需要依赖容器或标准 API 实现</strong>。</p><ul><li>根据 Bean 名称查找<ul><li>实时查找</li><li>延迟查找</li></ul></li><li>根据 Bean 类型查找</li><li>根据 Bean 名称 + 类型查找</li><li>根据 Java 注解查找</li></ul><p>【示例】Spring IoC 依赖查找</p><p>xml 元信息配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;objectFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;targetBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;user&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.dunwu.spring.core.domain.User&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;superUser&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.dunwu.spring.core.domain.SysUser&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;南京&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖查找示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactoryDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring/spring-dependency-lookup.xml&quot;</span>);</span><br><span class="line">lookupByType(beanFactory);</span><br><span class="line">lookupByNameInRealTime(beanFactory);</span><br><span class="line">lookupByNameInLazy(beanFactory);</span><br><span class="line">lookupByAnnotation(beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lookupByType</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line"><span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> beanFactory.getBean(SysUser.class);</span><br><span class="line">System.out.println(<span class="string">&quot;SysUser = &quot;</span> + user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lookupByNameInRealTime</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) beanFactory.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lookupByNameInLazy</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line">ObjectFactory&lt;User&gt; objectFactory = (ObjectFactory&lt;User&gt;) beanFactory.getBean(<span class="string">&quot;objectFactory&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> objectFactory.getObject();</span><br><span class="line">System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lookupByAnnotation</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> ListableBeanFactory) &#123;</span><br><span class="line"><span class="type">ListableBeanFactory</span> <span class="variable">listableBeanFactory</span> <span class="operator">=</span> (ListableBeanFactory) beanFactory;</span><br><span class="line">Map&lt;String, Object&gt; users = listableBeanFactory.getBeansWithAnnotation(Super.class);</span><br><span class="line">System.out.println(<span class="string">&quot;users = &quot;</span> + users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IoC-依赖注入"><a href="#IoC-依赖注入" class="headerlink" title="IoC 依赖注入"></a>IoC 依赖注入</h2><p>DI，是 Dependency Injection 的缩写，即依赖注入。依赖注入是 IoC 的最常见形式。依赖注入是手动或自动绑定的方式，无需依赖特定的容器或 API。</p><p><strong>容器全权负责组件的装配，它会把符合依赖关系的对象通过 JavaBean 属性或者构造函数传递给需要的对象</strong>。</p><p>DI 是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>理解 DI 的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><ul><li><strong>谁依赖于谁：</strong>当然是应用程序依赖于 IoC 容器；</li><li><strong>为什么需要依赖：</strong>应用程序需要 IoC 容器来提供对象需要的外部资源；</li><li><strong>谁注入谁：</strong>很明显是 IoC 容器注入应用程序某个对象，应用程序依赖的对象；</li><li><strong>注入了什么</strong>：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</li></ul><p>IoC 依赖注入 API</p><ul><li>根据 Bean 名称注入</li><li>根据 Bean 类型注入</li><li>注入容器内建 Bean 对象</li><li>注入非 Bean 对象</li><li>注入类型<ul><li>实时注入</li><li>延迟注入</li></ul></li></ul><h2 id="IoC-容器配置"><a href="#IoC-容器配置" class="headerlink" title="IoC 容器配置"></a>IoC 容器配置</h2><p>IoC 容器的配置有三种方式：</p><ul><li>基于 xml 配置</li><li>基于注解配置</li><li>基于 Java 配置</li></ul><p>作为 Spring 传统的配置方式，xml 配置方式一般为大家所熟知。</p><p>如果厌倦了 xml 配置，Spring 也提供了注解配置方式或 Java 配置方式来简化配置。</p><p><strong>本文，将对 Java 配置 IoC 容器做详细的介绍。</strong></p><h3 id="5-1-Xml-配置"><a href="#5-1-Xml-配置" class="headerlink" title="#5.1. Xml 配置"></a><a href="https://dunwu.github.io/spring-tutorial/core/Spring依赖注入.html#_5-1-xml-配置">#</a>5.1. Xml 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;resource1.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;bean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span> <span class="attr">alias</span>=<span class="string">&quot;bean3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bean2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;resource2.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签说明：</p><ul><li><code>&lt;beans&gt;</code> 是 Spring 配置文件的根节点。</li><li><code>&lt;bean&gt;</code> 用来定义一个 JavaBean。<code>id</code> 属性是它的标识，在文件中必须唯一；<code>class</code> 属性是它关联的类。</li><li><code>&lt;alias&gt;</code> 用来定义 Bean 的别名。</li><li><code>&lt;import&gt;</code> 用来导入其他配置文件的 Bean 定义。这是为了加载多个配置文件，当然也可以把这些配置文件构造为一个数组（new String[] {“config1.xml”, config2.xml}）传给 <code>ApplicationContext</code> 实现类进行加载多个配置文件，那一个更适合由用户决定；这两种方式都是通过调用 Bean Definition Reader 读取 Bean 定义，内部实现没有任何区别。<code>&lt;import&gt;</code> 标签可以放在 <code>&lt;beans&gt;</code> 下的任何位置，没有顺序关系。</li></ul><h4 id="实例化容器"><a href="#实例化容器" class="headerlink" title="#实例化容器"></a><a href="https://dunwu.github.io/spring-tutorial/core/Spring依赖注入.html#实例化容器">#</a>实例化容器</h4><p>实例化容器的过程： 定位资源（XML 配置文件） 读取配置信息(Resource) 转化为 Spring 可识别的数据形式（BeanDefinition）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>组合 xml 配置文件 配置的 Bean 功能各不相同，都放在一个 xml 文件中，不便管理。 Java 设计模式讲究职责单一原则。配置其实也是如此，功能不同的 JavaBean 应该被组织在不同的 xml 文件中。然后使用 import 标签把它们统一导入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring/applicationContext.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;/WEB-INF/spring/service.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用容器"><a href="#使用容器" class="headerlink" title="#使用容器"></a><a href="https://dunwu.github.io/spring-tutorial/core/Spring依赖注入.html#使用容器">#</a>使用容器</h4><p>使用容器的方式就是通过<code>getBean</code>获取 IoC 容器中的 JavaBean。 Spring 也有其他方法去获得 JavaBean，但是 Spring 并不推荐其他方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create and configure beans</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>&#125;);</span><br><span class="line"><span class="comment">// retrieve configured instance</span></span><br><span class="line"><span class="type">PetStoreService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;petStore&quot;</span>, PetStoreService.class);</span><br><span class="line"><span class="comment">// use configured instance</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure><h3 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h3><p>Spring2.5 引入了注解。 于是，一个问题产生了：<strong>使用注解方式注入 JavaBean 是不是一定完爆 xml 方式？</strong> 未必。正所谓，仁者见仁智者见智。任何事物都有其优缺点，看你如何取舍。来看看注解的优缺点： <strong>优点</strong>：大大减少了配置，并且可以使配置更加精细——类，方法，字段都可以用注解去标记。 <strong>缺点</strong>：使用注解，不可避免产生了侵入式编程，也产生了一些问题。</p><ul><li>你需要将注解加入你的源码并编译它；</li><li>注解往往比较分散，不易管控。</li></ul><blockquote><p>注：spring 中，先进行注解注入，然后才是 xml 注入，因此如果注入的目标相同，后者会覆盖前者。</p></blockquote><h4 id="启动注解"><a href="#启动注解" class="headerlink" title="启动注解"></a>启动注解</h4><p>Spring 默认是不启用注解的。如果想使用注解，需要先在 xml 中启动注解。 启动方式：在 xml 中加入一个标签，很简单吧。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：<code>&lt;context:annotation-config/&gt;</code> 只会检索定义它的上下文。什么意思呢？就是说，如果你 为 DispatcherServlet 指定了一个<code>WebApplicationContext</code>，那么它只在 controller 中查找<code>@Autowired</code>注解，而不会检查其它的路径。</p></blockquote><h4 id="Required"><a href="#Required" class="headerlink" title="@Required"></a><code>@Required</code></h4><p><code>@Required</code> 注解只能用于修饰 bean 属性的 setter 方法。受影响的 bean 属性必须在配置时被填充在 xml 配置文件中，否则容器将抛出<code>BeanInitializationException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationRequired</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Required</span> 注解用于bean属性的setter方法并且它指示，受影响的bean属性必须在配置时被填充在xml配置文件中，</span></span><br><span class="line"><span class="comment">     *           否则容器将抛出BeanInitializationException。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Required</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a><code>@Autowired</code></h4><p><code>@Autowired</code>注解可用于修饰属性、setter 方法、构造方法。</p><p>@Autowired 注入过程</p><ul><li>元信息解析</li><li>依赖查找</li><li>依赖注入（字段、方法）</li></ul><blockquote><p>注：<code>@Autowired</code>注解也可用于修饰构造方法，但如果类中只有默认构造方法，则没有必要。如果有多个构造器，至少应该修饰一个，来告诉容器哪一个必须使用。</p></blockquote><p>可以使用 JSR330 的注解<code>@Inject</code>来替代<code>@Autowired</code>。</p><p><strong>*范例*</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationAutowired</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AnnotationRequired.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Apple fieldA;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Banana fieldB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Orange fieldC;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Apple <span class="title function_">getFieldA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFieldA</span><span class="params">(Apple fieldA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldA = fieldA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Banana <span class="title function_">getFieldB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFieldB</span><span class="params">(Banana fieldB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldB = fieldB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Orange <span class="title function_">getFieldC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFieldC</span><span class="params">(Orange fieldC)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldC = fieldC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationAutowired</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationAutowired</span><span class="params">(Orange fieldC)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldC = fieldC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AbstractApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring/spring-annotation.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationAutowired</span> <span class="variable">annotationAutowired</span> <span class="operator">=</span></span><br><span class="line">                        (AnnotationAutowired) ctx.getBean(<span class="string">&quot;annotationAutowired&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;fieldA: &#123;&#125;, fieldB:&#123;&#125;, fieldC:&#123;&#125;&quot;</span>, annotationAutowired.getFieldA().getName(),</span><br><span class="line">                        annotationAutowired.getFieldB().getName(),</span><br><span class="line">                        annotationAutowired.getFieldC().getName());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml 中的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试@Autowired --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;apple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Apple&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;potato&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Banana&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tomato&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Orange&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationAutowired&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.AnnotationAutowired&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a><code>@Qualifier</code></h4><p>在<code>@Autowired</code>注解中，提到了如果发现有多个候选的 bean 都符合修饰类型，Spring 就会抓瞎了。</p><p>那么，如何解决这个问题。</p><p>可以通过<code>@Qualifier</code>指定 bean 名称来锁定真正需要的那个 bean。</p><p><strong>*范例*</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationQualifier</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AnnotationQualifier.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;dog&quot;)</span> <span class="comment">/** 去除这行，会报异常 */</span></span><br><span class="line">    Animal dog;</span><br><span class="line"></span><br><span class="line">    Animal cat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Animal <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Animal dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Animal <span class="title function_">getCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCat</span><span class="params">(<span class="meta">@Qualifier(&quot;cat&quot;)</span> Animal cat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AbstractApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring/spring-annotation.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationQualifier</span> <span class="variable">annotationQualifier</span> <span class="operator">=</span></span><br><span class="line">                (AnnotationQualifier) ctx.getBean(<span class="string">&quot;annotationQualifier&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;Dog name: &#123;&#125;&quot;</span>, annotationQualifier.getDog().getName());</span><br><span class="line">        log.debug(<span class="string">&quot;Cat name: &#123;&#125;&quot;</span>, annotationQualifier.getCat().getName());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;狗&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;猫&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml 中的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试@Qualifier --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationQualifier&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.AnnotationQualifier&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a><code>@Resource</code></h4><p>Spring 支持 JSP250 规定的注解<code>@Resource</code>。这个注解根据指定的名称来注入 bean。</p><p>如果没有为<code>@Resource</code>指定名称，它会像<code>@Autowired</code>一样按照类型去寻找匹配。</p><p>在 Spring 中，由<code>CommonAnnotationBeanPostProcessor</code>来处理<code>@Resource</code>注解。</p><p><strong>*范例*</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationResource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AnnotationResource.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;flower&quot;)</span></span><br><span class="line">    Plant flower;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;tree&quot;)</span></span><br><span class="line">    Plant tree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Plant <span class="title function_">getFlower</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flower;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlower</span><span class="params">(Plant flower)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flower = flower;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Plant <span class="title function_">getTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTree</span><span class="params">(Plant tree)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tree = tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AbstractApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring/spring-annotation.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationResource</span> <span class="variable">annotationResource</span> <span class="operator">=</span></span><br><span class="line">                        (AnnotationResource) ctx.getBean(<span class="string">&quot;annotationResource&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;type: &#123;&#125;, name: &#123;&#125;&quot;</span>, annotationResource.getFlower().getClass(), annotationResource.getFlower().getName());</span><br><span class="line">        log.debug(<span class="string">&quot;type: &#123;&#125;, name: &#123;&#125;&quot;</span>, annotationResource.getTree().getClass(), annotationResource.getTree().getName());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml 的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试@Resource --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;flower&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Flower&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Tree&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationResource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.AnnotationResource&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="PostConstruct-和-PreDestroy"><a href="#PostConstruct-和-PreDestroy" class="headerlink" title="@PostConstruct 和 @PreDestroy"></a><code>@PostConstruct</code> 和 <code>@PreDestroy</code></h4><p><code>@PostConstruct</code> 和 <code>@PreDestroy</code> 是 JSR 250 规定的用于生命周期的注解。</p><p>从其名号就可以看出，一个是在构造之后调用的方法，一个是销毁之前调用的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPostConstructAndPreDestroy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AnnotationPostConstructAndPreDestroy.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;call @PostConstruct method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;call @PreDestroy method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a><code>@Inject</code></h4><p>从 Spring3.0 开始，Spring 支持 JSR 330 标准注解（依赖注入）。</p><p>注：如果要使用 JSR 330 注解，需要使用外部 jar 包。</p><p>若你使用 maven 管理 jar 包，只需要添加依赖到 pom.xml 即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>@Inject</code> 和 <code>@Autowired</code> 一样，可以修饰属性、setter 方法、构造方法。</p><p><strong>*范例*</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationInject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AnnotationInject.class);</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Apple fieldA;</span><br><span class="line"></span><br><span class="line">    Banana fieldB;</span><br><span class="line"></span><br><span class="line">    Orange fieldC;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Apple <span class="title function_">getFieldA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFieldA</span><span class="params">(Apple fieldA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldA = fieldA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Banana <span class="title function_">getFieldB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFieldB</span><span class="params">(Banana fieldB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldB = fieldB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Orange <span class="title function_">getFieldC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationInject</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationInject</span><span class="params">(Orange fieldC)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldC = fieldC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AbstractApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring/spring-annotation.xml&quot;</span>);</span><br><span class="line">        <span class="type">AnnotationInject</span> <span class="variable">annotationInject</span> <span class="operator">=</span> (AnnotationInject) ctx.getBean(<span class="string">&quot;annotationInject&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;type: &#123;&#125;, name: &#123;&#125;&quot;</span>, annotationInject.getFieldA().getClass(),</span><br><span class="line">                        annotationInject.getFieldA().getName());</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;type: &#123;&#125;, name: &#123;&#125;&quot;</span>, annotationInject.getFieldB().getClass(),</span><br><span class="line">                        annotationInject.getFieldB().getName());</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;type: &#123;&#125;, name: &#123;&#125;&quot;</span>, annotationInject.getFieldC().getClass(),</span><br><span class="line">                        annotationInject.getFieldC().getName());</span><br><span class="line"></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-配置"><a href="#Java-配置" class="headerlink" title="Java 配置"></a>Java 配置</h3><p>基于 Java 配置 Spring IoC 容器，实际上是<strong>Spring 允许用户定义一个类，在这个类中去管理 IoC 容器的配置</strong>。</p><p>为了让 Spring 识别这个定义类为一个 Spring 配置类，需要用到两个注解：<code>@Configuration</code>和<code>@Bean</code>。</p><p>如果你熟悉 Spring 的 xml 配置方式，你可以将<code>@Configuration</code>等价于<code>&lt;beans&gt;</code>标签；将<code>@Bean</code>等价于<code>&lt;bean&gt;</code>标签。</p><h4 id="Bean-1"><a href="#Bean-1" class="headerlink" title="@Bean"></a><code>@Bean</code></h4><p>@Bean 的修饰目标只能是方法或注解。</p><p>@Bean 只能定义在 <code>@Configuration</code> 或 <code>@Component</code> 注解修饰的类中。</p><h4 id="声明一个-bean"><a href="#声明一个-bean" class="headerlink" title="声明一个 bean"></a>声明一个 bean</h4><p>此外，@Configuration 类允许在同一个类中通过@Bean 定义内部 bean 依赖。</p><p>声明一个 bean，只需要在 bean 属性的 set 方法上标注@Bean 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(JavaComponentScan.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Job <span class="title function_">getPolice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Police</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AnnotationConfiguration.class);</span><br><span class="line">        ctx.scan(<span class="string">&quot;org.zp.notes.spring.beans&quot;</span>);</span><br><span class="line">        ctx.refresh();</span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> (Job) ctx.getBean(<span class="string">&quot;police&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;job: &#123;&#125;, work: &#123;&#125;&quot;</span>, job.getClass(), job.work());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    String <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;police&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Police</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;抓罪犯&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这等价于配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;police&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.ioc.sample.job.Police&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Bean 注解用来表明一个方法实例化、配置合初始化一个被 Spring IoC 容器管理的新对象。</p><p>如果你熟悉 Spring 的 xml 配置，你可以将@Bean 视为等价于<code>&lt;beans&gt;</code>标签。</p><p>@Bean 注解可以用于任何的 Spring <code>@Component</code> bean，然而，通常被用于<code>@Configuration</code> bean。</p><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a><code>@Configuration</code></h4><p><code>@Configuration</code> 是一个类级别的注解，用来标记被修饰类的对象是一个<code>BeanDefinition</code>。</p><p><code>@Configuration</code> 声明 bean 是通过被 <code>@Bean</code> 修饰的公共方法。此外，<code>@Configuration</code> 允许在同一个类中通过 <code>@Bean</code> 定义内部 bean 依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyService <span class="title function_">myService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这等价于配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.acme.services.MyServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用 <code>AnnotationConfigApplicationContext</code> 实例化 IoC 容器。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="singleton-的-Bean-如何注入-prototype-的-Bean"><a href="#singleton-的-Bean-如何注入-prototype-的-Bean" class="headerlink" title="singleton 的 Bean 如何注入 prototype 的 Bean"></a>singleton 的 Bean 如何注入 prototype 的 Bean</h3><p>Spring 创建的 Bean 默认是单例的，但当 Bean 遇到继承的时候，可能会忽略这一点。</p><p>假设有一个 SayService 抽象类，其中维护了一个类型是 ArrayList 的字段 data，用于保存方法处理的中间数据。每次调用 say 方法都会往 data 加入新数据，可以认为 SayService 是有状态，如果 SayService 是单例的话必然会 OOM。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SayService 是有状态，如果 SayService 是单例的话必然会 OOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SayService</span> &#123;</span><br><span class="line"></span><br><span class="line">   List&lt;String&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">      data.add(IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">         .mapToObj(__ -&gt; <span class="string">&quot;a&quot;</span>)</span><br><span class="line">         .collect(Collectors.joining(<span class="string">&quot;&quot;</span>)) + UUID.randomUUID().toString());</span><br><span class="line">      log.info(<span class="string">&quot;I&#x27;m &#123;&#125; size:&#123;&#125;&quot;</span>, <span class="built_in">this</span>, data.size());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际开发的时候，开发同学没有过多思考就把 SayHello 和 SayBye 类加上了 @Service 注解，让它们成为了 Bean，也没有考虑到父类是有状态的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayBye</span> <span class="keyword">extends</span> <span class="title class_">SayService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.say();</span><br><span class="line">      log.info(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayHello</span> <span class="keyword">extends</span> <span class="title class_">SayService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.say();</span><br><span class="line">log.info(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在为类标记上 @Service 注解把类型交由容器管理前，首先评估一下类是否有状态，然后为 Bean 设置合适的 Scope。</p><p>调用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;beansingletonandorder&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanSingletonAndOrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   List&lt;SayService&gt; sayServiceList;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">      log.info(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">      sayServiceList.forEach(SayService::say);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能有人认为，为 SayHello 和 SayBye 两个类都标记了 @Scope 注解，设置了 PROTOTYPE 的生命周期就可以解决上面的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br></pre></td></tr></table></figure><p>但实际上还是有问题。因为@RestController 注解 =@Controller 注解 +@ResponseBody 注解，又因为 @Controller 标记了 @Component 元注解，所以 @RestController 注解其实也是一个 Spring Bean。</p><p>Bean 默认是单例的，所以单例的 Controller 注入的 Service 也是一次性创建的，即使 Service 本身标识了 prototype 的范围也没用。</p><p>修复方式是，让 Service 以代理方式注入。这样虽然 Controller 本身是单例的，但每次都能从代理获取 Service。这样一来，prototype 范围的配置才能真正生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProx)</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans">Spring 官方文档之 Core Technologies</a></li></ul>]]></content>
    
    
    <summary type="html">Spring-依赖注入IOC</summary>
    
    
    
    <category term="Spring" scheme="https://blog.serms.top/categories/Spring/"/>
    
    <category term="Java" scheme="https://blog.serms.top/categories/Java/"/>
    
    <category term="SpringIOC详解" scheme="https://blog.serms.top/categories/Spring/SpringIOC%E8%AF%A6%E8%A7%A3/"/>
    
    
    <category term="Spring" scheme="https://blog.serms.top/tags/Spring/"/>
    
    <category term="Java" scheme="https://blog.serms.top/tags/Java/"/>
    
    <category term="SpringIOC" scheme="https://blog.serms.top/tags/SpringIOC/"/>
    
  </entry>
  
  <entry>
    <title>回溯经典问题</title>
    <link href="https://blog.serms.top/post/bcbdb63a/"/>
    <id>https://blog.serms.top/post/bcbdb63a/</id>
    <published>2022-04-27T13:11:43.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="递归的概念"><a href="#递归的概念" class="headerlink" title="递归的概念"></a>递归的概念</h2><p>简单的说：递归就是方法<span class='p red'>调用自己</span>,每次调用<span class='p red'>传入不同的变量</span>。递归有助于编程者解决复杂的问题，同时可以让代码变得简洁</p><hr><h2 id="两个案列说明递归的调用机制"><a href="#两个案列说明递归的调用机制" class="headerlink" title="两个案列说明递归的调用机制"></a>两个案列说明递归的调用机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            test(n-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="comment">//else&#123;加上else输出结果又是怎么样呢！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n=&quot;</span>+n);</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议先自己分析一下这个运行结果是啥！</p><p>然后在idea里面编译运行看一下结果，是不是和你想的一样。</p><p>递归调用的规则：</p><p>1.当程序执行到一个方法时，就会开辟一个独立的空间(栈 )</p><p>2.就像上面的案例，当执行test(4)时，因为n&gt;2,所以开始执行test(3)，注意此时test(4)是未执行完的，直到test(2),test(3)完毕出栈之后，最后才是test(4)</p><p>3.每个空间的数据（局部变量，是独立的）</p><p>再来一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阶乘问题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo2</span>&#123;</span><br><span class="line">    puclic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(fun(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n*fun(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="递归需要遵守的重要规则"><a href="#递归需要遵守的重要规则" class="headerlink" title="递归需要遵守的重要规则"></a>递归需要遵守的重要规则</h2><p>1）执行一个方法时，就创建一个新的受保护的独立空间（栈空间）</p><p>2）方法的局部变量时独立的，不会相互影响</p><p>3）如果方法中应用的是引用类型的变量（比如数组），就会共享该引用类型的数据</p><p>3）递归必须向退出递归的条件逼近，否则就是无限递归，死龟！</p><p>4）当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</p><h2 id="经典迷宫问题"><a href="#经典迷宫问题" class="headerlink" title="经典迷宫问题"></a>经典迷宫问题</h2><span class='p center small'>问题：小球从坐标位置为（1，1）的空白位置移动到（6，5）的最短路径怎么用回溯的思想求出来（注：左上角的坐标是(0，0))</span><p><img src="https://img-blog.csdnimg.cn/20210513162036833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMyNDE0,size_16,color_FFFFFF,t_70" alt=""></p><p>提示：</p><ul><li>小球得到的路径，和程序员设置的找路策略有关即:找路的上下左右的顺序相关</li><li>在得到小球路径时，可以先使用(下右上左)，再改成(上右下左)，看看路径是不是有变化</li><li>测试回潮现象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/27 19:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiGong</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//先创建一个二维数组,模拟迷宫</span></span><br><span class="line">        <span class="comment">//地图</span></span><br><span class="line">        <span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line">        <span class="comment">//使用1表示墙</span></span><br><span class="line">        <span class="comment">//上下全部置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右全部置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置挡板,1表示</span></span><br><span class="line">        map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出地图</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用递归回溯给小球找路</span></span><br><span class="line">        setWay(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//输出新的地图,小球走过,并标识过的递归</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出新的地图,小球走过,并标识过的递归&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用递归回溯来给小球找路</span></span><br><span class="line">    <span class="comment">//1. map表示地图</span></span><br><span class="line">    <span class="comment">//2. i,j表示从地图的哪个位置开始出发(1,1)</span></span><br><span class="line">    <span class="comment">//3. 如果小球能到map[6][5]位置,则说明通路找到</span></span><br><span class="line">    <span class="comment">//4. 约定,当map[i][j] 为0表示该点没有走过,当为1表示墙,2表示通路可以走,3表示该点走过但是不通</span></span><br><span class="line">    <span class="comment">//5. 在走迷宫时,需要确定一个策略(方法) 下-&gt;右-&gt;上-&gt;左,如果该点走不通,在回溯</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 说明</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 表示地图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i   从哪个位置开始找路</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果找到通路, 就返回treu, 否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">setWay</span><span class="params">(<span class="type">int</span>[][] map, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123;    <span class="comment">//通路已找到欧克</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123;    <span class="comment">//如果当前这个点还没有走过</span></span><br><span class="line">                <span class="comment">//按照策略  下-&gt;右-&gt;上-&gt;左,如果该点走不通,在回溯</span></span><br><span class="line">                map[i][j] = <span class="number">2</span>;  <span class="comment">//假定该点时可以走通</span></span><br><span class="line">                <span class="keyword">if</span> (setWay(map, i + <span class="number">1</span>, j)) &#123;  <span class="comment">//向下走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i, j + <span class="number">1</span>)) &#123;    <span class="comment">//向右走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i - <span class="number">1</span>, j)) &#123;   <span class="comment">//向上走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i, j - <span class="number">1</span>)) &#123;  <span class="comment">//向左走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//说明该点是走不通,是死路</span></span><br><span class="line">                    map[i][j] = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果map[i][j] !=0,可能是1,2,3</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">回溯经典案例问题</summary>
    
    
    
    <category term="数据结构" scheme="https://blog.serms.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="递归" scheme="https://blog.serms.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%80%92%E5%BD%92/"/>
    
    <category term="算法" scheme="https://blog.serms.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="回溯" scheme="https://blog.serms.top/categories/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/"/>
    
    <category term="算法面试题" scheme="https://blog.serms.top/categories/%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="数据结构" scheme="https://blog.serms.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://blog.serms.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>哔哔图片问题</title>
    <link href="https://blog.serms.top/post/f605ecd9/"/>
    <id>https://blog.serms.top/post/f605ecd9/</id>
    <published>2022-04-19T06:17:11.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>本文根据洪哥哔哔教程二改~解决哔哔发送图片问题</p></div><div class="table-container"><table><thead><tr><th style="text-align:center">相关教程</th><th style="text-align:center">教程地址</th></tr></thead><tbody><tr><td style="text-align:center">洪哥哔哔教程</td><td style="text-align:center"><a href="洪哥哔哔教程"  title="https://blog.zhheo.com/p/a6947667.html" referrerPolicy="no-referrer" class="link_card"><div class="link_icon"><img src=" https://npm.elemecdn.com/akilar-friends@latest/avatar/blog.zhheo.com.jpg" class="no-lightbox"></div><div class="link_content"><div class="link_title">https://blog.zhheo.com/p/a6947667.html</div></div></a></td></tr><tr><td style="text-align:center">「哔哔点啥」微信公众号</td><td style="text-align:center"><a href="https://immmmm.com/bb-by-wechat-pro/">「哔哔点啥」微信公众号 2.0</a></td></tr></tbody></table></div><details class="folding-tag" yellow><summary> 问题说明 </summary>              <div class='content'>              <p><img src="https://npm.elemecdn.com/serms-assets@1.0.21/bufferfly/image-20220419142846050.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.21/bufferfly/image-20220419142902156.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.21/bufferfly/image-20220419142911862.png" alt=""></p><div class="tip "><p>可以看到问题很明显</p><ol><li>图片大小</li><li>图片上下有多余得代码(洪哥 js 得问题)</li><li>无法预览</li></ol></div>              </div>            </details><h2 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h2><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">源码修改方式</button></li><li class="tab"><button type="button" data-href="#test1-2">cdn链接替换(推荐)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><img src="https://npm.elemecdn.com/serms-assets@1.0.21/bufferfly/image-20220419145803095.png" alt=""></p><p>将洪哥 heobbe.js 文件拉取到博客存放 js 得目录下</p><p>修改其中得<code>urlToLink</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">urlToLink</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;判断是否是图片&quot;</span>, str.<span class="title function_">indexOf</span>(<span class="string">&quot;http&quot;</span>));</span><br><span class="line">  <span class="keyword">if</span> (str.<span class="title function_">indexOf</span>(<span class="string">&quot;http&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> re_forpic =</span><br><span class="line">      <span class="regexp">/\bhttps?:[^:&lt;&gt;&quot;]*\/([^:&lt;&gt;&quot;]*)(\.(jpeg)|(png)|(jpg)|(webp))(!blogimg)?/g</span>;</span><br><span class="line">    <span class="keyword">var</span> a1;</span><br><span class="line">    <span class="keyword">var</span> a2;</span><br><span class="line">    str.<span class="title function_">replace</span>(re_forpic, <span class="keyword">function</span> (<span class="params">imgurl</span>) &#123;</span><br><span class="line">      a1 =</span><br><span class="line">        <span class="string">&quot;&lt;a href=&quot;</span> +</span><br><span class="line">        imgurl +</span><br><span class="line">        <span class="string">&quot; data-fancybox=&#x27;gallery&#x27; data-caption=&#x27;&#x27; data-thumb=&quot;</span> +</span><br><span class="line">        imgurl +</span><br><span class="line">        <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">      a2 = <span class="string">&quot;&lt;img src=&quot;</span> + imgurl + <span class="string">&quot;&gt;&lt;/img&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    str = a1 + a2;</span><br><span class="line">    <span class="keyword">return</span> a1 + a2;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/\bhttps?:\/\/(?!\S+(?:jpe?g|png|bmp|gif|webp|gif))\S+/g</span>;</span><br><span class="line"></span><br><span class="line">    str = str.<span class="title function_">replace</span>(re, <span class="keyword">function</span> (<span class="params">website</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="string">&quot; &lt;a href=&#x27;&quot;</span> + website + <span class="string">&quot;&#x27;rel=&#x27;noopener&#x27; target=&#x27;_blank&#x27;&gt;↘链接↙&lt;/a&gt;&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完后全文(可直接复制这个粘贴替换 heobber.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if (document.querySelector(&#x27;#bber-loading&#x27;)) &#123;</span></span><br><span class="line"><span class="comment">//   var loading_pic = document.getElementById(&#x27;bber-loading&#x27;);</span></span><br><span class="line"><span class="comment">//   loading_pic.innerHTML = &#x27;&lt;span id=&quot;moments_loading&quot;&gt;&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&lt;/span&gt;&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getbbdata</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> bbsurl = bbapiurl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> httpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">//第一步：建立所需的对象</span></span><br><span class="line">  httpRequest.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, bbsurl, <span class="literal">true</span>); <span class="comment">//第二步：打开连接  将请求参数写在url中  ps:&quot;./Ptest.php?name=test&amp;nameone=testone&quot;</span></span><br><span class="line">  httpRequest.<span class="title function_">send</span>(); <span class="comment">//第三步：发送请求  将请求参数写在URL中</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取数据后的处理程序</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  httpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (httpRequest.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; httpRequest.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> json = httpRequest.<span class="property">responseText</span>; <span class="comment">//获取到json字符串，还需解析</span></span><br><span class="line">      <span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + json + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">      <span class="comment">// console.log(obj.data)</span></span><br><span class="line">      <span class="keyword">const</span> bbArray = obj.<span class="property">data</span>.<span class="title function_">map</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">date</span>: e.<span class="property">date</span>,</span><br><span class="line">          <span class="attr">content</span>: e.<span class="property">content</span>,</span><br><span class="line">          <span class="attr">from</span>: e.<span class="property">from</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// console.log(fundsArray)</span></span><br><span class="line">      saveToLocal.<span class="title function_">set</span>(<span class="string">&quot;zhheo-bb&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(bbArray), <span class="number">5</span> / (<span class="number">60</span> * <span class="number">24</span>));</span><br><span class="line">      <span class="keyword">const</span> data = saveToLocal.<span class="title function_">get</span>(<span class="string">&quot;zhheo-bb&quot;</span>);</span><br><span class="line">      <span class="title function_">generateBBHtml</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">generateBBHtml</span> = array =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> $dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#bber&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">&#x27;&lt;section class=&quot;timeline page-1&quot;&gt;&lt;ul&gt;&lt;div class=&quot;list&quot;&gt;&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> from_icon = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (array[i].<span class="property">from</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;iPhone&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-mobile-alt&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i].<span class="property">from</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;iPad&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-tablet-alt&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i].<span class="property">from</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;Mac&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-laptop&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i].<span class="property">from</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;微信&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        from_icon = <span class="string">&#x27;&lt;i class=&quot;fab fa-weixin&quot; style=&quot;font-size: 0.6rem&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-tools&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(array[i].<span class="property">date</span>);</span><br><span class="line">      <span class="keyword">var</span> dtime = array[i].<span class="property">date</span>,</span><br><span class="line">        data =</span><br><span class="line">          d.<span class="title function_">getFullYear</span>() +</span><br><span class="line">          <span class="string">&quot;/&quot;</span> +</span><br><span class="line">          (d.<span class="title function_">getMonth</span>() + <span class="number">1</span>) +</span><br><span class="line">          <span class="string">&quot;/&quot;</span> +</span><br><span class="line">          d.<span class="title function_">getDate</span>() +</span><br><span class="line">          <span class="string">&quot; &quot;</span> +</span><br><span class="line">          d.<span class="title function_">getHours</span>() +</span><br><span class="line">          <span class="string">&quot;:&quot;</span> +</span><br><span class="line">          d.<span class="title function_">getMinutes</span>() +</span><br><span class="line">          <span class="string">&quot;:&quot;</span> +</span><br><span class="line">          d.<span class="title function_">getSeconds</span>();</span><br><span class="line">      <span class="keyword">var</span> dataCont =</span><br><span class="line">        <span class="string">&#x27;&lt;p class=&quot;datacont&quot;&gt;&#x27;</span> + <span class="title function_">urlToLink</span>(array[i].<span class="property">content</span>) + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">      <span class="keyword">var</span> dataTime = <span class="string">&#x27;&lt;p class=&quot;datatime&quot;&gt;&#x27;</span> + data + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">      result +=</span><br><span class="line">        <span class="string">`&lt;li class=&quot;item&quot;&gt;&lt;div&gt;`</span> +</span><br><span class="line">        dataTime +</span><br><span class="line">        dataCont +</span><br><span class="line">        <span class="string">`&lt;/p&gt;&lt;p class=&quot;datafrom&quot;&gt;&lt;small&gt;`</span> +</span><br><span class="line">        from_icon +</span><br><span class="line">        array[i].<span class="property">from</span> +</span><br><span class="line">        <span class="string">`&lt;/small&gt;&lt;/p&gt;&lt;/div&gt;&lt;/li&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result += <span class="string">&#x27;!&#123;_p(&quot;aside.card_funds.zero&quot;)&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result += <span class="string">&quot;&lt;/div&gt;&lt;/ul&gt;&lt;/section&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> $dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#bber&quot;</span>);</span><br><span class="line"></span><br><span class="line">  $dom.<span class="property">innerHTML</span> = result;</span><br><span class="line">  <span class="title class_">Lately</span>(&#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&quot;#bber .datatime&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">lazyLoadInstance</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">lazyLoadInstance</span>.<span class="title function_">update</span>();</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">pjax</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">pjax</span>.<span class="title function_">refresh</span>($dom);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#bber&quot;</span>)) &#123;</span><br><span class="line">  <span class="title function_">getbbdata</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">urlToLink</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;判断是否是图片&quot;</span>, str.<span class="title function_">indexOf</span>(<span class="string">&quot;http&quot;</span>));</span><br><span class="line">  <span class="keyword">if</span> (str.<span class="title function_">indexOf</span>(<span class="string">&quot;http&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> re_forpic =</span><br><span class="line">      <span class="regexp">/\bhttps?:[^:&lt;&gt;&quot;]*\/([^:&lt;&gt;&quot;]*)(\.(jpeg)|(png)|(jpg)|(webp))(!blogimg)?/g</span>;</span><br><span class="line">    <span class="keyword">var</span> a1;</span><br><span class="line">    <span class="keyword">var</span> a2;</span><br><span class="line">    str.<span class="title function_">replace</span>(re_forpic, <span class="keyword">function</span> (<span class="params">imgurl</span>) &#123;</span><br><span class="line">      a1 =</span><br><span class="line">        <span class="string">&quot;&lt;a href=&quot;</span> +</span><br><span class="line">        imgurl +</span><br><span class="line">        <span class="string">&quot; data-fancybox=&#x27;gallery&#x27; data-caption=&#x27;&#x27; data-thumb=&quot;</span> +</span><br><span class="line">        imgurl +</span><br><span class="line">        <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">      a2 = <span class="string">&quot;&lt;img src=&quot;</span> + imgurl + <span class="string">&quot;&gt;&lt;/img&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    str = a1 + a2;</span><br><span class="line">    <span class="keyword">return</span> a1 + a2;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/\bhttps?:\/\/(?!\S+(?:jpe?g|png|bmp|gif|webp|gif))\S+/g</span>;</span><br><span class="line"></span><br><span class="line">    str = str.<span class="title function_">replace</span>(re, <span class="keyword">function</span> (<span class="params">website</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="string">&quot; &lt;a href=&#x27;&quot;</span> + website + <span class="string">&quot;&#x27;rel=&#x27;noopener&#x27; target=&#x27;_blank&#x27;&gt;↘链接↙&lt;/a&gt;&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">MIT License - http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment">For usage and examples, visit:</span></span><br><span class="line"><span class="comment">https://tokinx.github.io/lately/</span></span><br><span class="line"><span class="comment">Copyright (c) 2017, Biji.IO</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> $jscomp = $jscomp || &#123;&#125;;</span><br><span class="line">$jscomp.<span class="property">scope</span> = &#123;&#125;;</span><br><span class="line">$jscomp.<span class="property">arrayIteratorImpl</span> = <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> g &lt; b.<span class="property">length</span></span><br><span class="line">      ? &#123;</span><br><span class="line">          <span class="attr">done</span>: !<span class="number">1</span>,</span><br><span class="line">          <span class="attr">value</span>: b[g++],</span><br><span class="line">        &#125;</span><br><span class="line">      : &#123;</span><br><span class="line">          <span class="attr">done</span>: !<span class="number">0</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">$jscomp.<span class="property">arrayIterator</span> = <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: $jscomp.<span class="title function_">arrayIteratorImpl</span>(b),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">$jscomp.<span class="property">makeIterator</span> = <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="title class_">Symbol</span> &amp;&amp; <span class="title class_">Symbol</span>.<span class="property">iterator</span> &amp;&amp; b[<span class="title class_">Symbol</span>.<span class="property">iterator</span>];</span><br><span class="line">  <span class="keyword">return</span> g ? g.<span class="title function_">call</span>(b) : $jscomp.<span class="title function_">arrayIterator</span>(b);</span><br><span class="line">&#125;;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">b, g</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">function</span> (<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> d = h.<span class="property">lang</span> || &#123;</span><br><span class="line">      <span class="attr">second</span>: <span class="string">&quot;\u79d2&quot;</span>,</span><br><span class="line">      <span class="attr">minute</span>: <span class="string">&quot;\u5206\u949f&quot;</span>,</span><br><span class="line">      <span class="attr">hour</span>: <span class="string">&quot;\u5c0f\u65f6&quot;</span>,</span><br><span class="line">      <span class="attr">day</span>: <span class="string">&quot;\u5929&quot;</span>,</span><br><span class="line">      <span class="attr">month</span>: <span class="string">&quot;\u4e2a\u6708&quot;</span>,</span><br><span class="line">      <span class="attr">year</span>: <span class="string">&quot;\u5e74&quot;</span>,</span><br><span class="line">      <span class="attr">ago</span>: <span class="string">&quot;\u524d&quot;</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="string">&quot;NaN&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    h = $jscomp.<span class="title function_">makeIterator</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(h.<span class="property">target</span> || <span class="string">&quot;.time&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c = h.<span class="title function_">next</span>(); !c.<span class="property">done</span>; c = h.<span class="title function_">next</span>()) &#123;</span><br><span class="line">      c = c.<span class="property">value</span>;</span><br><span class="line">      <span class="keyword">var</span> a = c.<span class="property">dateTime</span>;</span><br><span class="line">      <span class="keyword">var</span> e = c.<span class="property">title</span>,</span><br><span class="line">        f = c.<span class="property">innerHTML</span>;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        !a ||</span><br><span class="line">        <span class="built_in">isNaN</span>(</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">Date</span>(</span><br><span class="line">            (a = a.<span class="title function_">replace</span>(<span class="regexp">/(.*)[a-z](.*)\+(.*)/gi</span>, <span class="string">&quot;$1 $2&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">        <span class="keyword">if</span> (e &amp;&amp; !<span class="built_in">isNaN</span>(<span class="keyword">new</span> <span class="title class_">Date</span>((e = e.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))))) a = e;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f &amp;&amp; !<span class="built_in">isNaN</span>(<span class="keyword">new</span> <span class="title class_">Date</span>((f = f.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))))) a = f;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">      c.<span class="property">title</span> = a;</span><br><span class="line">      a = <span class="keyword">new</span> <span class="title class_">Date</span>(a);</span><br><span class="line">      a = (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - a.<span class="title function_">getTime</span>()) / <span class="number">1e3</span>;</span><br><span class="line">      e = a / <span class="number">60</span>;</span><br><span class="line">      f = e / <span class="number">60</span>;</span><br><span class="line">      <span class="keyword">var</span> k = f / <span class="number">24</span>,</span><br><span class="line">        l = k / <span class="number">30</span>,</span><br><span class="line">        m = l / <span class="number">12</span>;</span><br><span class="line">      c.<span class="property">innerHTML</span> =</span><br><span class="line">        (<span class="number">1</span> &lt;= m</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(m) + d.<span class="property">year</span></span><br><span class="line">          : <span class="number">1</span> &lt;= l</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(l) + d.<span class="property">month</span></span><br><span class="line">          : <span class="number">1</span> &lt;= k</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(k) + d.<span class="property">day</span></span><br><span class="line">          : <span class="number">1</span> &lt;= f</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(f) + d.<span class="property">hour</span></span><br><span class="line">          : <span class="number">1</span> &lt;= e</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(e) + d.<span class="property">minute</span></span><br><span class="line">          : <span class="number">1</span> &lt;= a</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(a) + d.<span class="property">second</span></span><br><span class="line">          : d.<span class="property">error</span>) + d.<span class="property">ago</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> n = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span> || (<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">&quot;this&quot;</span>);</span><br><span class="line">  &#125;)();</span><br><span class="line">  <span class="string">&quot;Lately&quot;</span> <span class="keyword">in</span> n || (n.<span class="property">Lately</span> = p);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>接着在 css 文件中添加:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.datacont</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p>直接把洪哥得 heobbe.js 替换成,作者编写好得 js 链接:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//npm.elemecdn.com/msstatic@1.0.1/js/heobber.js</span></span><br></pre></td></tr></table></figure><p>接着在 css 文件中添加:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.datacont</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">装了哔哔之后，页面图片不能点击查看</summary>
    
    
    
    <category term="bufferfly" scheme="https://blog.serms.top/categories/bufferfly/"/>
    
    <category term="哔哔" scheme="https://blog.serms.top/categories/bufferfly/%E5%93%94%E5%93%94/"/>
    
    
    <category term="bufferfly" scheme="https://blog.serms.top/tags/bufferfly/"/>
    
    <category term="哔哔" scheme="https://blog.serms.top/tags/%E5%93%94%E5%93%94/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly学习笔记</title>
    <link href="https://blog.serms.top/post/b5fe82b2/"/>
    <id>https://blog.serms.top/post/b5fe82b2/</id>
    <published>2022-04-09T13:54:53.000Z</published>
    <updated>2023-09-01T03:47:56.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Page-Front-matter-用于页面配置"><a href="#Page-Front-matter-用于页面配置" class="headerlink" title="Page Front-matter 用于页面配置"></a>Page Front-matter 用于页面配置</h2><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202303092245992.png" alt="Post Front-matter 用于文章页配置"></p><h2 id="Post-Front-matter-用于文章页配置"><a href="#Post-Front-matter-用于文章页配置" class="headerlink" title="Post Front-matter 用于文章页配置"></a>Post Front-matter 用于文章页配置</h2><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202303100004274.png" alt=""></p><h2 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h2><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202303100023606.png" alt="image-20230310002320673"></p><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202303100024151.png" alt="image-20230310002438054"></p><h2 id="外挂标签"><a href="#外挂标签" class="headerlink" title="外挂标签"></a>外挂标签</h2><a href="https://blog.leonus.cn/" target="_blank" title="Leonus" referrerPolicy="no-referrer" class="link_card"><div class="link_icon"><img src="https://blog.leonus.cn/favicon.ico" class="no-lightbox"></div><div class="link_content"><div class="link_title">Leonus</div><div class="link_desc">进一寸有进一寸的欢喜。</div></div></a>]]></content>
    
    
    <summary type="html">整活记录</summary>
    
    
    
    
    <category term="butterfly" scheme="https://blog.serms.top/tags/butterfly/"/>
    
    <category term="Hexo" scheme="https://blog.serms.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Spring的自动装配</title>
    <link href="https://blog.serms.top/post/63755f3a/"/>
    <id>https://blog.serms.top/post/63755f3a/</id>
    <published>2022-04-08T15:58:03.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>好处：大幅度减少 Spring 配置</p><p>坏处：依赖不能明确管理，可能会有多个 bean 同时符合注入规则，没有清晰的依赖关系。</p><p>在装配的时候会有两种方式，<code>byName</code>和<code>byType</code>两种。</p><p>byName：根据属性名自动装配。此选项将检查容器并根据名字查找与属性完全一致的 bean，并将其与属性自动装配。</p><p>byType：如果容器中存在一个与指定属性类型相同的 bean，那么将与该属性自动装配；如果存在多个该类型 bean，那么抛出异常，并指出不能使用 byType 方式进行自动装配；如果没有找到相匹配的 bean，则什么事都不发生，也可以通过设置</p></div><h2 id="什么是自动装配"><a href="#什么是自动装配" class="headerlink" title="什么是自动装配"></a>什么是自动装配</h2><p>自动装配：<em>也就是 <code>Spring</code> 会在容器中自动的查找，并自动的给 <code>bean</code> 装配及其关联的属性</em></p><p>涉及到自动装配 <code>bean</code> 的<a href="https://so.csdn.net/so/search?q=依赖关系&amp;spm=1001.2101.3001.7020">依赖关系</a>时，<code>Spring</code> 有多种处理方式。<code>Spring</code> 提供了 <code>4</code> 种自动装配策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无需自动装配</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AUTOWIRE_NO</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按名称自动装配 bean 属性</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AUTOWIRE_BY_NAME</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按类型自动装配 bean 属性</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AUTOWIRE_BY_TYPE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按构造器自动装配</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AUTOWIRE_CONSTRUCTOR</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过时方法，Spring3.0 之后不再支持</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AUTOWIRE_AUTODETECT</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是依赖注入"><a href="#什么是依赖注入" class="headerlink" title="什么是依赖注入"></a>什么是依赖注入</h2><p>依赖注入：当一个类的实例需要另一个类的实例协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。然而采用依赖注入的方式，创建被调用者的工作不再由调用者来完成，创建被调用者的实例的工作由 IOC 容器来完成。然后注入调用者，称为依赖注入</p><p>控制反转：当一个类的实例需要另一个类的实例协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。然而采用控制反转的方式，创建被调用者的工作不再由调用者来完成，创建被调用者的实例的工作由 IOC 容器来完成。也就是把对象的创建，初始化，销毁的工作交给 spring ioc 容器来做。由 spring ioc 容器来管理对象的生命周期</p><p>依赖注入的方式有两种：构造器注入和 setter 方法注入</p><h3 id="依赖注入与自动装配的关系"><a href="#依赖注入与自动装配的关系" class="headerlink" title="依赖注入与自动装配的关系"></a>依赖注入与自动装配的关系</h3><p>依赖注入的本质就是装配，装配是依赖注入的具体行为</p><p>在传统的使用 xml 文件装配 bean 是一件很繁琐的事情，而且还需要找到对应类型的 bean 才能装配，一旦 bean 很多，就不好维护了。为了解决这种问题，spring 使用注解来进行自动装配。自动装配就是开发人员不必知道具体要装配哪个 bean 的引用，这个识别的工作会由 spring 来完成。与自动装配配合的还有“自动检测”，这个动作会自动识别哪些类需要被配置成 bean，进而来进行装配</p><p>因此也可以这样理解：自动装配是为了将依赖注入“自动化”的一个简化配置的操作</p><h2 id="Spring-中自动装配的策略"><a href="#Spring-中自动装配的策略" class="headerlink" title="Spring 中自动装配的策略"></a><code>Spring</code> 中自动装配的策略</h2><h3 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h3><p>它的意思是：把与 bean 的属性具有相同名字的其他 bean 自动装配到 bean 的对应属性中</p><p>例：在 User 的 bean 中有个属性 Role myRole，再创建一个 Role 的 bean，它的名字如果叫 myRole，那么在 User 中就可以使用 byName 来自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Role myRole;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是 <code>bean</code> 的定义，再看配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myRole&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.viewscenes.netsupervisor.entity.Role&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;管理员&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.viewscenes.netsupervisor.entity.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上所述，只要属性名称和 bean 的名称可以对应，那么在 user 的 bean 中就可以使用 byName 来自动装配。那么，如果属性名称对应不上呢？</p><h3 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h3><p>它的意思是：把与 bean 的属性具有相同类型的其他 bean 自动装配到 bean 的对应属性中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.viewscenes.netsupervisor.entity.Role&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;管理员&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.viewscenes.netsupervisor.entity.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还是上面的例子，如果使用 <code>byType，Role bean</code> 的 <code>id</code> 都可以省去</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>它是说：<em>把与 <code>bean</code> 的构造器入参具有相同类型的其他 <code>bean</code> 自动装配到 <code>bean</code> 构造器的对应入参中</em>。值的注意的是，具有相同类型的其他 <code>bean</code> 这句话说明它在查找入参的时候，还是通过 <code>bean</code> 的类型来确定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.viewscenes.netsupervisor.entity.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;constructor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="autodetect（不推荐使用了）"><a href="#autodetect（不推荐使用了）" class="headerlink" title="autodetect（不推荐使用了）"></a>autodetect（不推荐使用了）</h3><p>它首先会尝试使用 <code>constructor</code> 进行自动装配，如果失败再尝试使用 <code>byType</code> 。不过，它在 <code>Spring 3.0</code> 之后已经被标记为 <code>@Deprecated</code></p><h2 id="默认的自动装配策略"><a href="#默认的自动装配策略" class="headerlink" title="默认的自动装配策略"></a>默认的自动装配策略</h2><p>默认情况下，default-autowire 属性被设置为 none，标示所有的 bean 都不使用自动装配，除非 bean 上配置了 autowire 属性</p><p>如果你需要为所有的 bean 配置相同的 autowire 属性，有个办法可以简化这一操作，在根元素 beans 上增加属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">default-autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Autowired-注解"><a href="#Autowired-注解" class="headerlink" title="@Autowired 注解"></a>@Autowired 注解</h2><a href="Autowired 注解使用"  title="https://hgm.vercel.app/post/7047b0e7/" referrerPolicy="no-referrer" class="link_card"><div class="link_icon"><img src=" https://hgm.vercel.app/img/favicon.png" class="no-lightbox"></div><div class="link_content"><div class="link_title">https://hgm.vercel.app/post/7047b0e7/</div></div></a><p><strong>具体的大家可以看这篇文章,这里补充一些文章没写全的内容</strong></p><p>从 <code>Spring 2.5</code> 开始，开始支持使用注解来自动装配 <code>bean</code> 的属性。它允许更细粒度的自动装配，我们可以选择性的标注某一个属性来对其应用自动装配。<code>Spring</code> 支持几种不同的应用于自动装配的注解</p><ul><li><code>Spring</code> 自带的 <code>@Autowired</code> 注解</li><li><code>JSR-330</code> 的 <code>@Inject</code> 注解</li><li><code>JSR-250</code> 的 <code>@Resource</code> 注解</li></ul><p>使用 <code>@Autowired</code> 它有几个点需要注意</p><h3 id="强制性"><a href="#强制性" class="headerlink" title="强制性"></a>强制性</h3><p><em>默认情况下，它具有强制契约特性，其所标注的属性必须是可装配的。如果没有 <code>bean</code> 可以装配到 <code>@Autowired</code> 所标注的属性或参数中，那么你会看到 <code>NoSuchBeanDefinitionException</code> 的异常信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">doResolveDependency</span><span class="params">(DependencyDescriptor descriptor, String beanName,</span></span><br><span class="line"><span class="params">            Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找Bean</span></span><br><span class="line">    Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);</span><br><span class="line">    <span class="comment">// 如果拿到的 Bean 集合为空，且 isRequired 为 true，就抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (matchingBeans.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (descriptor.isRequired()) &#123;</span><br><span class="line">            raiseNoSuchBeanDefinitionException(type, <span class="string">&quot;&quot;</span>, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到上面的源码，我们可以得到这一信息，<code>bean</code> 集合为空不要紧，关键 <code>isRequired</code> 条件不能成立，如果成立就会抛异常。那么，如果我们不确定属性是否可以装配，可以这样来使用 <code>Autowired</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line">UserService userService;</span><br></pre></td></tr></table></figure><h3 id="装配策略"><a href="#装配策略" class="headerlink" title="装配策略"></a>装配策略</h3><p>前几天看到大佬群里有个面试题是这样问的：<code>Autowired</code> 是按照什么策略来自动装配的呢？关于这个问题，不能一概而论，你不能简单的说按照类型或者按照名称。但可以确定的一点的是，它默认是按照类型来自动装配的，即 <code>byType</code></p><h4 id="默认按照类型装配"><a href="#默认按照类型装配" class="headerlink" title="默认按照类型装配"></a>默认按照类型装配</h4><p>关键点 <code>findAutowireCandidates</code> 这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title function_">findAutowireCandidates</span><span class="params">(</span></span><br><span class="line"><span class="params">        String beanName, Class&lt;?&gt; requiredType, DependencyDescriptor descriptor)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取给定类型的所有 bean 名称，里面实际循环所有的 beanName，获取它的实例</span></span><br><span class="line">    <span class="comment">// 再通过 isTypeMatch 方法来确定</span></span><br><span class="line">    String[] candidateNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">            <span class="built_in">this</span>, requiredType, <span class="literal">true</span>, descriptor.isEager());</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt;(candidateNames.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据返回的 beanName，获取其实例返回</span></span><br><span class="line">    <span class="keyword">for</span> (String candidateName : candidateNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isSelfReference(beanName, candidateName) &amp;&amp; isAutowireCandidate(candidateName, descriptor)) &#123;</span><br><span class="line">            result.put(candidateName, getBean(candidateName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到它返回的是一个列表，那么就表明，按照类型匹配可能会查询到多个实例。到底应该装配哪个实例呢？我看有的文章里说，可以加注解以此规避。比如 <code>@qulifier、@Primary</code> 等，实际还有个简单的办法</p><p>比如，按照 <code>UserService</code> 接口类型来装配它的实现类。<code>UserService</code> 接口有多个实现类，分为 <code>UserServiceImpl、UserServiceImpl2</code>。那么我们在注入的时候，就可以把属性名称定义为 <code>bean</code> 实现类的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserService UserServiceImpl2;</span><br></pre></td></tr></table></figure><p>这样的话，<code>spring</code> 会按照 <code>byName</code> 来进行装配。首先，如果查到类型的多个实例，<code>spring</code> 已经做了判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">doResolveDependency</span><span class="params">(DependencyDescriptor descriptor, String beanName,</span></span><br><span class="line"><span class="params">            Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照类型查找 bean 实例</span></span><br><span class="line">    Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);</span><br><span class="line">    <span class="comment">// 如果 bean 集合为空，且 isRequired 成立,就抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (matchingBeans.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (descriptor.isRequired()) &#123;</span><br><span class="line">            raiseNoSuchBeanDefinitionException(type, <span class="string">&quot;&quot;</span>, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果查找的 bean 实例大于 1 个</span></span><br><span class="line">    <span class="keyword">if</span> (matchingBeans.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 找到最合适的那个，如果没有合适的，也抛出异常</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">primaryBeanName</span> <span class="operator">=</span> determineAutowireCandidate(matchingBeans, descriptor);</span><br><span class="line">        <span class="keyword">if</span> (primaryBeanName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoUniqueBeanDefinitionException</span>(type, matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (autowiredBeanNames != <span class="literal">null</span>) &#123;</span><br><span class="line">            autowiredBeanNames.add(primaryBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matchingBeans.get(primaryBeanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，如果查到多个实例，<code>determineAutowireCandidate</code> 方法就是关键。它来确定一个合适的 <code>bean</code> 返回。其中一部分就是按照 <code>bean</code> 的名称来匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">determineAutowireCandidate</span><span class="params">(Map&lt;String, Object&gt; candidateBeans,</span></span><br><span class="line"><span class="params">                DependencyDescriptor descriptor)</span> &#123;</span><br><span class="line">    <span class="comment">// 循环拿到的 bean 集合</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : candidateBeans.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">candidateBeanName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">beanInstance</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        <span class="comment">// 通过 matchesBeanName 方法来确定 bean 集合中的名称是否与属性的名称相同</span></span><br><span class="line">        <span class="keyword">if</span> (matchesBeanName(candidateBeanName, descriptor.getDependencyName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> candidateBeanName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们回到问题上，得到的答案就是：<em><code>@Autowired</code> 默认使用 <code>byType</code> 来装配属性，如果匹配到类型的多个实例，再通过 <code>byName</code> 来确定 <code>bean</code></em></p><h3 id="主和优先级"><a href="#主和优先级" class="headerlink" title="主和优先级"></a>主和优先级</h3><p>上面我们已经看到了，通过 <code>byType</code> 可能会找到多个实例的 <code>bean</code>。然后再通过 <code>byName</code> 来确定一个合适的 <code>bean</code>，如果通过名称也确定不了呢？</p><p>还是 <code>determineAutowireCandidate</code> 这个方法，它还有两种方式来确定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">determineAutowireCandidate</span><span class="params">(Map&lt;String, Object&gt; candidateBeans,</span></span><br><span class="line"><span class="params">                DependencyDescriptor descriptor)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; requiredType = descriptor.getDependencyType();</span><br><span class="line">    <span class="comment">// 通过 @Primary注解来标识 bean</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">primaryCandidate</span> <span class="operator">=</span> determinePrimaryCandidate(candidateBeans, requiredType);</span><br><span class="line">    <span class="keyword">if</span> (primaryCandidate != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> primaryCandidate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过 @Priority(value = 0) 注解来标识 bean, value 为优先级大小</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">priorityCandidate</span> <span class="operator">=</span> determineHighestPriorityCandidate(candidateBeans, requiredType);</span><br><span class="line">    <span class="keyword">if</span> (priorityCandidate != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> priorityCandidate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Primary-注解"><a href="#Primary-注解" class="headerlink" title="@Primary 注解"></a><code>@Primary</code> 注解</h4><p>它的作用是看 <code>bean</code> 上是否包含 <code>@Primary</code> 注解，如果包含就返回。当然了，你不能把多个 <code>bean</code> 都设置为 <code>@Primary</code>，不然你会得到 <code>NoUniqueBeanDefinitionException</code> 这个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">determinePrimaryCandidate</span><span class="params">(Map&lt;String, Object&gt; candidateBeans, Class&lt;?&gt; requiredType)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">primaryBeanName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : candidateBeans.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">candidateBeanName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">beanInstance</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        <span class="keyword">if</span> (isPrimary(candidateBeanName, beanInstance)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (primaryBeanName != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">candidateLocal</span> <span class="operator">=</span> containsBeanDefinition(candidateBeanName);</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">primaryLocal</span> <span class="operator">=</span> containsBeanDefinition(primaryBeanName);</span><br><span class="line">                <span class="keyword">if</span> (candidateLocal &amp;&amp; primaryLocal) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoUniqueBeanDefinitionException</span>(requiredType, candidateBeans.size(),</span><br><span class="line">                            <span class="string">&quot;more than one &#x27;primary&#x27; bean found among candidates: &quot;</span> + candidateBeans.keySet());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (candidateLocal) &#123;</span><br><span class="line">                    primaryBeanName = candidateBeanName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                primaryBeanName = candidateBeanName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primaryBeanName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Priority-注解"><a href="#Priority-注解" class="headerlink" title="@Priority 注解"></a><code>@Priority</code> 注解</h4><p>你也可以在 <code>bean</code>上配置<code>@Priority</code>注解，它有个 int 类型的属性 <code>value</code>，可以配置优先级大小。数字越小的，就被优先匹配。同样的，你也不能把多个 <code>bean</code>的优先级配置成相同大小的数值，否则 <code>NoUniqueBeanDefinitionException</code>异常照样出来找你</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">determineHighestPriorityCandidate</span><span class="params">(Map&lt;String, Object&gt; candidateBeans,</span></span><br><span class="line"><span class="params">                                    Class&lt;?&gt; requiredType)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">highestPriorityBeanName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">highestPriority</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : candidateBeans.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">candidateBeanName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">beanInstance</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">candidatePriority</span> <span class="operator">=</span> getPriority(beanInstance);</span><br><span class="line">        <span class="keyword">if</span> (candidatePriority != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (highestPriorityBeanName != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果优先级大小相同</span></span><br><span class="line">                <span class="keyword">if</span> (candidatePriority.equals(highestPriority)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoUniqueBeanDefinitionException</span>(requiredType, candidateBeans.size(),</span><br><span class="line">                        <span class="string">&quot;Multiple beans found with the same priority (&#x27;&quot;</span> + highestPriority + <span class="string">&quot;&#x27;) &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;among candidates: &quot;</span> + candidateBeans.keySet());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (candidatePriority &lt; highestPriority) &#123;</span><br><span class="line">                    highestPriorityBeanName = candidateBeanName;</span><br><span class="line">                    highestPriority = candidatePriority;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                highestPriorityBeanName = candidateBeanName;</span><br><span class="line">                highestPriority = candidatePriority;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> highestPriorityBeanName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Priority</code> 的包在 <code>javax.annotation.Priority</code>，如果想使用它还要引入一个坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节重点阐述了 Spring 中的自动装配的几种策略，又通过源码分析了 Autowired 注解的使用方式。<br>在 Spring3.0 之后，有效的自动装配策略分为<code>byType、byName、constructor</code>三种方式。注解<br>Autowired 默认使用 byType 来自动装配，如果存在类型的多个实例就尝试使用 byName 匹配，如果通过 byName 也确定不了，可以通过 Primary 和 Priority 注解来确定。</p>]]></content>
    
    
    <summary type="html">Spring的自动装配</summary>
    
    
    
    <category term="Spring" scheme="https://blog.serms.top/categories/Spring/"/>
    
    <category term="Java" scheme="https://blog.serms.top/categories/Java/"/>
    
    <category term="Spring自动装配" scheme="https://blog.serms.top/categories/Spring/Spring%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
    
    <category term="Spring" scheme="https://blog.serms.top/tags/Spring/"/>
    
    <category term="Spring注解" scheme="https://blog.serms.top/tags/Spring%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解-@Autowired注解使用</title>
    <link href="https://blog.serms.top/post/7047b0e7/"/>
    <id>https://blog.serms.top/post/7047b0e7/</id>
    <published>2022-04-08T15:30:51.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<details class="folding-tag" cyan><summary> 写在前面得话 </summary>              <div class='content'>              <div class="note info simple"><p>学习@Autowired 之前建议先学会使用 byType 和 byName</p></div><p><a href="Spring的自动装配"  title="https://hgm.vercel.app/post/63755f3a/" referrerPolicy="no-referrer" class="link_card"><div class="link_icon"><img src=" https://npm.elemecdn.com/serms-assets/imgs/avatar.jpg" class="no-lightbox"></div><div class="link_content"><div class="link_title">https://hgm.vercel.app/post/63755f3a/</div>&lt;/div&gt;</a></p>              </div>            </details><h2 id="Autowired-详解"><a href="#Autowired-详解" class="headerlink" title="@Autowired 详解"></a>@Autowired 详解</h2><p>首先要知道另一个东西，default-autowire，它是在 xml 文件中进行配置的，可以设置为 byName、byType、constructor 和 autodetect；比如 byName，不用显式的在 bean 中写出依赖的对象，它会自动的匹配其它 bean 中 id 名与本 bean 的 set**相同的，并自动装载。<br>@Autowired 是用在 JavaBean 中的注解，通过 byType 形式，用来给指定的字段或方法注入所需的外部资源。<br>两者的功能是一样的，就是能减少或者消除属性或构造器参数的设置，只是配置地方不一样而已。<br>autowire 四种模式的区别<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwODI0MTcyODAwMTYz?x-oss-process=image/format,png" alt=""></p><p>先看一下 bean 实例化和@Autowired 装配过程：<br>一切都是从 bean 工厂的 getBean 方法开始的，一旦该方法调用总会返回一个 bean 实例，无论当前是否存在，不存在就实例化一个并装配，否则直接返回。（Spring MVC 是在什么时候开始执行 bean 的实例化过程的呢？其实就在组件扫描完成之后）</p><p>实例化和装配过程中会多次递归调用 getBean 方法来解决类之间的依赖。</p><p>Spring 几乎考虑了所有可能性，所以方法特别复杂但完整有条理。</p><p>@Autowired 最终是根据类型来查找和装配元素的，但是我们设置了<beans default-autowire="byName"/>后会影响最终的类型匹配查找。因为在前面有根据 BeanDefinition 的 autowire 类型设置 PropertyValue 值得一步，其中会有新实例的创建和注册。就是那个 autowireByName 方法。</p><p>下面通过@Autowired 来说明一下用法</p><h2 id="Setter-方法中的-Autowired"><a href="#Setter-方法中的-Autowired" class="headerlink" title="Setter 方法中的 @Autowired"></a>Setter 方法中的 @Autowired</h2><p>你可以在 JavaBean 中的 setter 方法中使用 @Autowired 注解。当 Spring 遇到一个在 setter 方法中使用的 @Autowired 注解，它会在方法中执行 byType 自动装配。<br>这里是 TextEditor.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">( SpellChecker spellChecker )</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> spellChecker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">        spellChecker.checkSpelling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖的类文件 SpellChecker.java 的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 MainApp.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">        te.spellCheck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 Beans.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for textEditor bean without constructor-arg  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你已经完成的创建了源文件和 bean 配置文件，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><p>Inside SpellChecker constructor.<br>Inside checkSpelling.</p><h2 id="属性中的-Autowired"><a href="#属性中的-Autowired" class="headerlink" title="属性中的 @Autowired"></a>属性中的 @Autowired</h2><p>你可以在属性中使用 @Autowired 注解来除去 setter 方法。当时使用 为自动连接属性传递的时候，Spring 会将这些传递过来的值或者引用自动分配给那些属性。所以利用在属性中 @Autowired 的用法，你的 TextEditor.java 文件将变成如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside TextEditor constructor.&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">( )</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spellChecker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span>&#123;</span><br><span class="line">        spellChecker.checkSpelling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 Beans.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你在源文件和 bean 配置文件中完成了上面两处改变，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><p>Inside TextEditor constructor.<br>Inside SpellChecker constructor.<br>Inside checkSpelling.</p><h2 id="构造函数中的-Autowired"><a href="#构造函数中的-Autowired" class="headerlink" title="构造函数中的 @Autowired"></a>构造函数中的 @Autowired</h2><p>你也可以在构造函数中使用 @Autowired。一个构造函数 @Autowired 说明当创建 bean 时，即使在 XML 文件中没有使用 元素配置 bean ，构造函数也会被自动连接。让我们检查一下下面的示例。<br>这里是 TextEditor.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">(SpellChecker spellChecker)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside TextEditor constructor.&quot;</span> );</span><br><span class="line">        <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span>&#123;</span><br><span class="line">        spellChecker.checkSpelling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 Beans.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for textEditor bean without constructor-arg  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你在源文件和 bean 配置文件中完成了上面两处改变，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><p>Inside TextEditor constructor.<br>Inside SpellChecker constructor.<br>Inside checkSpelling.</p><h2 id="Autowired-的（required-false）选项"><a href="#Autowired-的（required-false）选项" class="headerlink" title="@Autowired 的（required=false）选项"></a>@Autowired 的（required=false）选项</h2><p>默认情况下，@Autowired 注解意味着依赖是必须的，它类似于 @Required 注解，然而，你可以使用 @Autowired 的 （required=false） 选项关闭默认行为。<br>即使你不为 age 属性传递任何参数，下面的示例也会成功运行，但是对于 name 属性则需要一个参数。你可以自己尝试一下这个示例，因为除了只有 Student.java 文件被修改以外，它和 @Required 注解示例是相似的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired(required=false)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>@Autowired 注释应用于具有任意名称和多个参数的方法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(MovieCatalog movieCatalog,</span></span><br><span class="line"><span class="params">                        CustomerPreferenceDao customerPreferenceDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalog = movieCatalog;</span><br><span class="line">        <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>您也可以将@Autowired 应用于字段，或者将其与构造函数混合，如以下示例所示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将@Autowired 注释添加到需要该类型数组的字段或方法，则 spring 会从 ApplicationContext 中搜寻符合指定类型的所有 bean，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog[] movieCatalogs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组可以，我们可以马上举一反三，那容器也可以吗，答案是肯定的，下面是 set 以及 map 的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;MovieCatalog&gt; movieCatalogs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieCatalogs</span><span class="params">(Set&lt;MovieCatalog&gt; movieCatalogs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalogs = movieCatalogs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, MovieCatalog&gt; movieCatalogs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieCatalogs</span><span class="params">(Map&lt;String, MovieCatalog&gt; movieCatalogs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalogs = movieCatalogs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是@Autowired 注解的主要使用方式，经常使用 spring 的话应该对其中常用的几种不会感到陌生。</p><h2 id="Autowired-装配不成功的几种情况？"><a href="#Autowired-装配不成功的几种情况？" class="headerlink" title="@Autowired 装配不成功的几种情况？"></a>@Autowired 装配不成功的几种情况？</h2><h3 id="没有加-Component-注解"><a href="#没有加-Component-注解" class="headerlink" title="没有加@Component 注解"></a>没有加@Component 注解</h3><p>在类上面忘了加@Controller、@Service、@Component、@Repository 等注解，spring 就无法完成自动装配的功能，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUser user;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        user.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况应该是最常见的错误了，不会因为你长得帅，就不会犯这种低级的错误。</p><h3 id="注入-Filter-或-Listener"><a href="#注入-Filter-或-Listener" class="headerlink" title="注入 Filter 或 Listener"></a>注入 Filter 或 Listener</h3><p>web 应用启动的顺序是：listener-&gt;filter-&gt;servlet。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/sasasas.png" alt="img"></p><p>接下来看看这个案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUser user;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        user.say();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">        bean = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> <span class="title class_">UserFilter</span>());</span><br><span class="line">        bean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序启动会报错,tomcat 也无法正常启动???什么原因??</p><p>众所周知，springmvc 的启动是在 DisptachServlet 里面做的，而它是在 listener 和 filter 之后执行。如果我们想在 listener 和 filter 里面@Autowired 某个 bean，肯定是不行的，因为 filter 初始化的时候，此时 bean 还没有初始化，无法自动装配。</p><p>如果工作当中真的需要这样做，我们该如何解决这个问题呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFilter</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IUser user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(</span><br><span class="line">            filterConfig.getServletContext());</span><br><span class="line">        <span class="built_in">this</span>.user = ((IUser)(applicationContext.getBean(<span class="string">&quot;user1&quot;</span>)));</span><br><span class="line">        user.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是使用 WebApplicationContextUtils.getWebApplicationContext 获取当前的 ApplicationContext，再通过它获取到 bean 实例。</p><h3 id="注解未被-ComponentScan-扫描"><a href="#注解未被-ComponentScan-扫描" class="headerlink" title="注解未被@ComponentScan 扫描"></a>注解未被@ComponentScan 扫描</h3><p>通常情况下，@Controller、@Service、@Component、@Repository、@Configuration 等注解，是需要通过@ComponentScan 注解扫描，收集元数据的。</p><p>但是，如果没有加@ComponentScan 注解，或者@ComponentScan 注解扫描的路径不对，或者路径范围太小，会导致有些注解无法收集，到后面无法使用@Autowired 完成自动装配的功能。</p><p>有个好消息是，在 springboot 项目中，如果使用了@SpringBootApplication 注解，它里面内置了@ComponentScan 注解的功能。</p><h3 id="循环依赖问题"><a href="#循环依赖问题" class="headerlink" title="循环依赖问题"></a>循环依赖问题</h3><p>如果 A 依赖于 B，B 依赖于 C，C 又依赖于 A，这样就形成了一个死循环。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/ssas.png" alt="img"></p><p>spring 的 bean 默认是单例的，如果单例 bean 使用@Autowired 自动装配，大多数情况，能解决循环依赖问题。</p><p>但是如果 bean 是多例的，会出现循环依赖问题，导致 bean 自动装配不了。</p><p>还有有些情况下，如果创建了代理对象，即使 bean 是单例的，依然会出现循环依赖问题。</p><h2 id="Autowired-和-Resouce-的区别"><a href="#Autowired-和-Resouce-的区别" class="headerlink" title="@Autowired 和@Resouce 的区别"></a>@Autowired 和@Resouce 的区别</h2><p>@Autowired 功能虽说非常强大，但是也有些不足之处。比如：比如它跟 spring 强耦合了，如果换成了 JFinal 等其他框架，功能就会失效。而@Resource 是 JSR-250 提供的，它是 Java 标准，绝大部分框架都支持。</p><p>除此之外，有些场景使用@Autowired 无法满足的要求，改成@Resource 却能解决问题。接下来，我们重点看看@Autowired 和@Resource 的区别。</p><ul><li>@Autowired 默认按 byType 自动装配，而@Resource 默认 byName 自动装配。</li><li>@Autowired 只包含一个参数：required，表示是否开启自动准入，默认是 true。而@Resource 包含七个参数，其中最重要的两个参数是：name 和 type。</li><li>@Autowired 如果要使用 byName，需要使用@Qualifier 一起配合。而@Resource 如果指定了 name，则用 byName 自动装配，如果指定了 type，则用 byType 自动装配。</li><li>@Autowired 能够用在：构造器、方法、参数、成员变量和注解上，而@Resource 能用在：类、成员变量和方法上。</li><li>@Autowired 是 spring 定义的注解，而@Resource 是 JSR-250 定义的注解。</li></ul><p>此外，它们的装配顺序不同。</p><h3 id="Autowired-的装配顺序如下："><a href="#Autowired-的装配顺序如下：" class="headerlink" title="@Autowired 的装配顺序如下："></a><strong>@Autowired 的装配顺序如下：</strong></h3><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/sdsd.png" alt="img"></p><p><strong>@Resource 的装配顺序如下：</strong></p><p><strong>1.如果同时指定了 name 和 type：</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/aasassa.png" alt="img"></p><p><strong>如果指定了 name:</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/8644ebf81a4c510f236bccbc57802424d62adc4dfb9aab2.png" alt="img"></p><p><strong>如果指定了 type：</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/342ac65c10385343ed8ea3ad912bd2dbd263fd54e1666998.png" alt="img"></p><p><strong>如果既没有指定 name，也没有指定 type：</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/7af40ad162d9f2d385020d6c9e358b8c65c069af359a71ef5.png" alt="img"></p>]]></content>
    
    
    <summary type="html">Autowired注解使用</summary>
    
    
    
    <category term="Spring" scheme="https://blog.serms.top/categories/Spring/"/>
    
    <category term="Spring注解" scheme="https://blog.serms.top/categories/Spring/Spring%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="Java" scheme="https://blog.serms.top/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://blog.serms.top/tags/Spring/"/>
    
    <category term="Spring注解" scheme="https://blog.serms.top/tags/Spring%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>为什么IDEA不推荐你使用@Autowired?</title>
    <link href="https://blog.serms.top/post/e97079a9/"/>
    <id>https://blog.serms.top/post/e97079a9/</id>
    <published>2022-04-08T14:59:56.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<p><code>@Autowired</code>注解相信每个 Spring 开发者都不陌生了！</p><p>但是当我们使用 IDEA 写代码的时候，经常会发现<code>@Autowired</code>注解下面是有小黄线的，我们把小鼠标悬停在上面，可以看到这个如下图所示的警告信息：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.12/Spring/242dd42a2834eb844.png" alt=""></p><p>那么为什么 IDEA 会给出<code>Field injection is not recommended</code>这样的警告呢？</p><p>下面带着这样的问题，一起来全面的了解下 Spring 中的三种注入方式以及他们之间在各方面的优劣。</p><h2 id="Spring-中的三种依赖注入方式"><a href="#Spring-中的三种依赖注入方式" class="headerlink" title="Spring 中的三种依赖注入方式"></a>Spring 中的三种依赖注入方式</h2><h3 id="Field-Injection"><a href="#Field-Injection" class="headerlink" title="Field Injection"></a><strong>Field Injection</strong></h3><p><code>@Autowired</code>注解的一大使用场景就是<code>Field Injection</code>。</p><p>具体形式如下：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.12/Spring/94cad1c8a786c9170784f2ca88ad1939c.png" alt=""></p><p>这种注入方式通过 Java 的反射机制实现，所以 private 的成员也可以被注入具体的对象。</p><h3 id="Constructor-Injection"><a href="#Constructor-Injection" class="headerlink" title="Constructor Injection"></a>Constructor Injection</h3><p><code>Constructor Injection</code>是构造器注入，是我们日常最为推荐的一种使用方式。</p><p>具体形式如下：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.12/Spring/2e2eb9389b504fc20e5f6adeb8f58053b8df6d7.png" alt=""></p><p>这种注入方式很直接，通过对象构建的时候建立关系，所以这种方式对对象创建的顺序会有要求，当然 Spring 会为你搞定这样的先后顺序，除非你出现循环依赖，然后就会抛出异常。</p><h3 id="Setter-Injection"><a href="#Setter-Injection" class="headerlink" title="Setter Injection"></a>Setter Injection</h3><p><code>Setter Injection</code>也会用到<code>@Autowired</code>注解，但使用方式与<code>Field Injection</code>有所不同，<code>Field Injection</code>是用在成员变量上，而<code>Setter Injection</code>的时候，是用在成员变量的 Setter 函数上。</p><p>具体形式如下：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.12/Spring/a08b87d6277f9e2fd1b1ab1c4230882dsee208a50.png" alt=""></p><p>这种注入方式也很好理解，就是通过调用成员变量的 set 方法来注入想要使用的依赖对象。</p><h3 id="三种依赖注入的对比"><a href="#三种依赖注入的对比" class="headerlink" title="三种依赖注入的对比"></a>三种依赖注入的对比</h3><p>在知道了 Spring 提供的三种依赖注入方式之后，我们继续回到本文开头说到的问题：IDEA 为什么不推荐使用<code>Field Injection</code>呢？</p><p>我们可以从多个开发测试的考察角度来对比一下它们之间的优劣：</p><p><strong>可靠性</strong></p><p>从对象构建过程和使用过程，看对象在各阶段的使用是否可靠来评判：</p><ul><li><code>Field Injection</code>：不可靠</li><li><code>Constructor Injection</code>：可靠</li><li><code>Setter Injection</code>：不可靠</li></ul><p>由于构造函数有严格的构建顺序和不可变性，一旦构建就可用，且不会被更改。</p><p><strong>可维护性</strong></p><p>主要从更容易阅读、分析依赖关系的角度来评判：</p><ul><li><code>Field Injection</code>：差</li><li><code>Constructor Injection</code>：好</li><li><code>Setter Injection</code>：差</li></ul><p>还是由于依赖关键的明确，从构造函数中可以显现的分析出依赖关系，对于我们如何去读懂关系和维护关系更友好。</p><p><strong>可测试性</strong></p><p>当在复杂依赖关系的情况下，考察程序是否更容易编写单元测试来评判</p><ul><li><code>Field Injection</code>：差</li><li><code>Constructor Injection</code>：好</li><li><code>Setter Injection</code>：好</li></ul><p><code>Constructor Injection</code>和<code>Setter Injection</code>的方式更容易 Mock 和注入对象，所以更容易实现单元测试。</p><p><strong>灵活性</strong></p><p>主要根据开发实现时候的编码灵活性来判断：</p><ul><li><code>Field Injection</code>：很灵活</li><li><code>Constructor Injection</code>：不灵活</li><li><code>Setter Injection</code>：很灵活</li></ul><p>由于<code>Constructor Injection</code>对 Bean 的依赖关系设计有严格的顺序要求，所以这种注入方式不太灵活。相反<code>Field Injection</code>和<code>Setter Injection</code>就非常灵活，但也因为灵活带来了局面的混乱，也是一把双刃剑。</p><p><strong>循环关系的检测</strong></p><p>对于 Bean 之间是否存在循环依赖关系的检测能力：</p><ul><li><code>Field Injection</code>：不检测</li><li><code>Constructor Injection</code>：自动检测</li><li><code>Setter Injection</code>：不检测</li></ul><p><strong>性能表现</strong></p><p>不同的注入方式，对性能的影响</p><ul><li><code>Field Injection</code>：启动快</li><li><code>Constructor Injection</code>：启动慢</li><li><code>Setter Injection</code>：启动快</li></ul><p>主要影响就是启动时间，由于<code>Constructor Injection</code>有严格的顺序要求，所以会拉长启动时间。</p><p>所以，综合上面各方面的比较，可以获得如下表格：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.12/Spring/sc99aef1ea6ee7a3a703ba.png" alt=""></p><p>结果一目了然，<code>Constructor Injection</code>在很多方面都是优于其他两种方式的，所以<code>Constructor Injection</code>通常都是首选方案！</p><p>而<code>Setter Injection</code>比起<code>Field Injection</code>来说，大部分都一样，但因为可测试性更好，所以当你要用<code>@Autowired</code>的时候，推荐使用<code>Setter Injection</code>的方式，这样 IDEA 也不会给出警告了。同时，也侧面也反映了，可测试性的重要地位啊！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后，对于今天的问题讨论，我们给出两个结论，方便大家记忆：</p><ol><li>依赖注入的使用上，<code>Constructor Injection</code>是首选。</li><li>使用<code>@Autowired</code>注解的时候，要使用<code>Setter Injection</code>方式，这样代码更容易编写单元测试。</li></ol>]]></content>
    
    
    <summary type="html">为什么IDEA不推荐你使用Autowired?</summary>
    
    
    
    <category term="奇怪的知识" scheme="https://blog.serms.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    <category term="为什么IDEA不推荐你使用@Autowired?" scheme="https://blog.serms.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/%E4%B8%BA%E4%BB%80%E4%B9%88IDEA%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%A0%E4%BD%BF%E7%94%A8-Autowired/"/>
    
    
    <category term="奇怪的知识" scheme="https://blog.serms.top/tags/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解-Configuration注解使用</title>
    <link href="https://blog.serms.top/post/1d0508a6/"/>
    <id>https://blog.serms.top/post/1d0508a6/</id>
    <published>2022-04-07T14:32:04.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Configuration-的使用"><a href="#Configuration-的使用" class="headerlink" title="@Configuration 的使用"></a><a href="https://hgm.vercel.app/post/1d0508a6/">@Configuration 的使用</a></h2><p>从 Spring3.0，@Configuration 用于定义配置类，可替换 xml 配置文件，被注解的类内部包含有一个或多个被@Bean 注解的方法，这些方法将会被 AnnotationConfigApplicationContext 或 AnnotationConfigWebApplicationContext 类进行扫描，并用于构建 bean 定义，初始化 Spring 容器。也就是说使用了这个注解完全不需要我们手动去配置<code>applicationContext.xml</code>了</p><p><strong>注意</strong>：@Configuration 注解的配置类有如下要求：</p><ol><li>@Configuration 不可以是 final 类型；</li><li>@Configuration 不可以是匿名类；</li><li>嵌套的 configuration 必须是静态类。</li></ol><p><strong>@Configuation 加载 Spring 方法</strong></p><h2 id="Configuration-配置-spring-并启动-spring-容器"><a href="#Configuration-配置-spring-并启动-spring-容器" class="headerlink" title="@Configuration 配置 spring 并启动 spring 容器"></a>@Configuration 配置 spring 并启动 spring 容器</h2><p>@Configuration 标注在类上，相当于把该类作为 spring 的 xml 配置文件中的<code>&lt;beans&gt;</code>，作用为：配置 spring 容器(应用上下文)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestConfiguration容器启动初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相当于 Spring 的 xml 配置文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主方法进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ms.demo.configuration.TestConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestConfiguration.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果加载spring-context.xml文件：</span></span><br><span class="line">        <span class="comment">// ApplicationContext context = new</span></span><br><span class="line">        <span class="comment">// ClassPathXmlApplicationContext(&quot;spring-context.xml&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从运行主方法结果可以看出，spring 容器已经启动了：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407224716063.png" alt=""></p><h2 id="Configuration-启动容器-Bean-注册-Bean，-Bean-下管理-bean-的生命周期"><a href="#Configuration-启动容器-Bean-注册-Bean，-Bean-下管理-bean-的生命周期" class="headerlink" title="@Configuration 启动容器+@Bean 注册 Bean，@Bean 下管理 bean 的生命周期"></a>@Configuration 启动容器+@Bean 注册 Bean，@Bean 下管理 bean 的生命周期</h2><p>@Bean 标注在方法上(返回某个实例的方法)，等价于 spring 的 xml 配置文件中的<code>&lt;bean&gt;</code>，作用为：注册 bean 对象</p><p>bean 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean sayHello...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;username:&quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;,url:&quot;</span> + <span class="built_in">this</span>.url + <span class="string">&quot;,password:&quot;</span> + <span class="built_in">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean 初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean 销毁。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestConfiguration容器启动初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Bean注解注册bean,同时可以指定初始化和销毁方法</span></span><br><span class="line">    <span class="comment">// @Bean(name=&quot;testBean&quot;,initMethod=&quot;start&quot;,destroyMethod=&quot;cleanUp&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span>     <span class="comment">//配置作用域,默认:singleton单例模式 ;prototype:双例模式,保证每次请求都创建一次对象</span></span><br><span class="line">    <span class="keyword">public</span> TestBean <span class="title function_">testBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主方法测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestConfiguration.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果加载spring-context.xml文件：</span></span><br><span class="line">        <span class="comment">// ApplicationContext context = new</span></span><br><span class="line">        <span class="comment">// ClassPathXmlApplicationContext(&quot;spring-context.xml&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取bean</span></span><br><span class="line">        <span class="type">TestBean</span> <span class="variable">tb</span> <span class="operator">=</span> (TestBean) context.getBean(<span class="string">&quot;testBean&quot;</span>);</span><br><span class="line">        tb.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407225446317.png" alt=""></p><p>注：<br>(1)、@Bean 注解在返回实例的方法上，如果未通过@Bean 指定 bean 的名称，则默认与标注的方法名相同；<br>(2)、@Bean 注解默认作用域为单例 singleton 作用域，可通过@Scope(“prototype”)设置为原型作用域；<br>(3)、既然@Bean 的作用是注册 bean 对象，那么完全可以使用@Component、@Controller、@Service、@Ripository 等注解注册 bean，当然需要配置@ComponentScan 注解进行自动扫描。</p><h2 id="Bean-下管理-bean-的生命周期"><a href="#Bean-下管理-bean-的生命周期" class="headerlink" title="@Bean 下管理 bean 的生命周期"></a><strong>@Bean 下管理 bean 的生命周期</strong></h2><p>可以使用基于 Java 的配置来管理 bean 的生命周期。<code>@Bean</code> 支持两种属性，即 <code>initMethod</code> 和<code>destroyMethod</code>，这些属性可用于定义生命周期方法。在实例化 bean 或即将销毁它时，容器便可调用生命周期方法。生命周期方法也称为回调方法，因为它将由容器调用。使用 <code>@Bean</code> 注释注册的 bean 也支持 JSR-250 规定的标准 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注释。如果您正在使用 XML 方法来定义 bean，那么就应该使用 bean 元素来定义生命周期回调方法。以下代码显示了在 XML 配置中通常使用 bean 元素定义回调的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestConfiguration容器启动初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Bean注解注册bean,同时可以指定初始化和销毁方法</span></span><br><span class="line">    <span class="meta">@Bean(name=&quot;testBean&quot;,initMethod=&quot;start&quot;,destroyMethod=&quot;cleanUp&quot;)</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span>     <span class="comment">//配置作用域,默认:singleton单例模式 ;prototype:双例模式,保证每次请求都创建一次对象</span></span><br><span class="line">    <span class="keyword">public</span> TestBean <span class="title function_">testBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ms.demo.configuration.TestBean;</span><br><span class="line"><span class="keyword">import</span> com.ms.demo.configuration.TestConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestConfiguration.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果加载spring-context.xml文件：</span></span><br><span class="line">        <span class="comment">// ApplicationContext context = new</span></span><br><span class="line">        <span class="comment">// ClassPathXmlApplicationContext(&quot;spring-context.xml&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取bean</span></span><br><span class="line">        <span class="type">TestBean</span> <span class="variable">tb</span> <span class="operator">=</span> (TestBean) context.getBean(<span class="string">&quot;testBean&quot;</span>);</span><br><span class="line">        tb.sayHello();</span><br><span class="line">        System.out.println(tb);</span><br><span class="line"></span><br><span class="line">        <span class="type">TestBean</span> <span class="variable">tb2</span> <span class="operator">=</span> (TestBean) context.getBean(<span class="string">&quot;testBean&quot;</span>);</span><br><span class="line">        tb2.sayHello();</span><br><span class="line">        System.out.println(tb2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407230933661.png" alt=""></p><h2 id="Configuration-启动容器-Component-注册-Bean"><a href="#Configuration-启动容器-Component-注册-Bean" class="headerlink" title="@Configuration 启动容器+@Component 注册 Bean"></a>@Configuration 启动容器+@Component 注册 Bean</h2><p>Bean 类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//添加注册Bean的注解</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean sayHello...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;username:&quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;,url:&quot;</span> + <span class="built_in">this</span>.url + <span class="string">&quot;,password:&quot;</span> + <span class="built_in">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean 初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean 销毁。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//添加自动扫描注解，basePackages为TestBean包路径,也就是让SpringIOC容器扫描到刚刚添加@Component的Bean类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.ms.demo.configuration&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestConfiguration容器启动初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主方法测试获取 bean 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ms.demo.configuration.TestBean;</span><br><span class="line"><span class="keyword">import</span> com.ms.demo.configuration.TestConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestConfiguration.class);</span><br><span class="line">        <span class="comment">//获取bean</span></span><br><span class="line">        <span class="type">TestBean</span> <span class="variable">tb</span> <span class="operator">=</span> (TestBean) context.getBean(<span class="string">&quot;testBean&quot;</span>);</span><br><span class="line">        tb.sayHello();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sayHello()方法都被正常调用。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407231701864.png" alt=""></p><h2 id="使用-AnnotationConfigApplicationContext-注册-AppContext-类的两种方法"><a href="#使用-AnnotationConfigApplicationContext-注册-AppContext-类的两种方法" class="headerlink" title="使用 AnnotationConfigApplicationContext 注册 AppContext 类的两种方法"></a><strong>使用 AnnotationConfigApplicationContext 注册 AppContext 类的两种方法</strong></h2><ol><li>配置类的注册方式是将其传递给 <code>AnnotationConfigApplicationContext</code> 构造函数</li></ol><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407232200976.png" alt=""></p><ol><li><code>AnnotationConfigApplicationContext</code> 的<code>register</code> 方法传入配置类来注册配置类</li></ol><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407232908741.png" alt=""></p><h2 id="Configuation-总结"><a href="#Configuation-总结" class="headerlink" title="@Configuation 总结"></a>@Configuation 总结</h2><p>@Configuation 等价于<code>&lt;Beans&gt;&lt;/Beans&gt;</code></p><p>@Bean 等价于<code>&lt;Bean&gt;&lt;/Bean&gt;</code></p><p>@ComponentScan 等价于<code>&lt;context:component-scan base-package=&quot;com.ms.demo&quot;/&gt;</code></p>]]></content>
    
    
    <summary type="html">Configuration注解使用</summary>
    
    
    
    <category term="Spring" scheme="https://blog.serms.top/categories/Spring/"/>
    
    <category term="Spring注解" scheme="https://blog.serms.top/categories/Spring/Spring%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="Java" scheme="https://blog.serms.top/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://blog.serms.top/tags/Spring/"/>
    
    <category term="Spring注解" scheme="https://blog.serms.top/tags/Spring%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="Java" scheme="https://blog.serms.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring全家桶注解解析(持续跟新ing~)</title>
    <link href="https://blog.serms.top/post/3d190b4f/"/>
    <id>https://blog.serms.top/post/3d190b4f/</id>
    <published>2022-04-07T12:38:34.000Z</published>
    <updated>2023-09-01T03:47:56.137Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>在探究注解前先了解一下注解,何为注解？注解本质上就是一个类，开发中我们可以使用注解 取代 <a href="https://so.csdn.net/so/search?q=xml&amp;spm=1001.2101.3001.7020">xml</a>配置文件。</p></div><p><strong>注意:在使用注解开发时,请查看对应的框架是否需要开启注解支持,否则用了注解也无效!!!</strong></p><h2 id="IOC-容器相关"><a href="#IOC-容器相关" class="headerlink" title="IOC 容器相关"></a>IOC 容器相关</h2><h3 id="Componen"><a href="#Componen" class="headerlink" title="@Componen:"></a>@Componen:</h3><details class="folding-tag" yellow><summary> @Component注解 </summary>              <div class='content'>              <blockquote><p><code>@component(value)</code>:用于创建对象的,作用于类.</p><p><code>value</code>：指定 bean 的 id。如果不指定 value 属性，默认 bean 的 id 是当前类的类名。首字母小写。</p><p><code>@component</code>是 spring 中的一个注解，它的作用就是实现 bean 的注入,代替了传统的 xml 方式注入 bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component组件 等价于:&lt;bean id=&quot;user&quot; class=&quot;com.ms.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//也说明这个类被Spring接管了,注册到了容器中</span></span><br><span class="line"><span class="meta">@Component(&quot;user&quot;)</span><span class="comment">//(&quot;user&quot;)其实就是Bean id</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   这里省略代码.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>在 web 开发中，会按照 MVC 三层架构分层！提供 3 个<code>@Component</code>注解衍生注解（功能一样）来取代,其实就是更加语义化</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">controller注解</button></li><li class="tab"><button type="button" data-href="#-2">service注解</button></li><li class="tab"><button type="button" data-href="#-3">repository注解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>@controller 控制器（表现层注解）<br>用于标注控制层，相当于 MVC 层中的 web 层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userCotroller&quot;)</span><span class="comment">//value相当于Bean中的id</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>@service 服务（业务层注解）<br>用于标注服务层，主要用来进行业务的逻辑处理,相当于 MVC 层中的 service 层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span><span class="comment">//value相当于Bean中的id</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p>@repository（持久层注解）<br>用于标注数据访问层，也可以说用于标注数据访问组件，即 DAO 组件,相当于 MVC 层中的 dao 层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span> <span class="comment">//value相当于Bean中的id</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>总结:</p><p>@Component 用于把当前方法的返回值作为 bean 对象存入 spring 的 ioc 容器中<br>属性: value:用于指定 bean 的 id。当不写时，默认值是当前方法的名称<br>细节：当我们使用注解配置方法时，如果方法有参数，spring 框架会去容器中查找有没有可用的 bean 对象。<br>查找的方式和 Autowired 注解的作用是一样的</p></blockquote>              </div>            </details><h2 id="用于注入数据"><a href="#用于注入数据" class="headerlink" title="用于注入数据"></a><strong>用于注入数据</strong></h2><h3 id="Autowired-amp-Qualifier-amp-Resource-amp-Value"><a href="#Autowired-amp-Qualifier-amp-Resource-amp-Value" class="headerlink" title="@Autowired&amp;@Qualifier&amp;@Resource&amp;@Value"></a>@Autowired&amp;@Qualifier&amp;@Resource&amp;@Value</h3><details class="folding-tag" cyan><summary> @Autowired&@Qualifier&@Resource&@Value </summary>              <div class='content'>              <div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Autowired注解</button></li><li class="tab"><button type="button" data-href="#-2">Qualifier注解</button></li><li class="tab"><button type="button" data-href="#-3">Resource注解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><a href="Autowired 注解使用"  title="https://serms.top/post/7047b0e7/" referrerPolicy="no-referrer" class="link_card"><div class="link_icon"><img src=" https://serms.top/img/favicon.png" class="no-lightbox"></div><div class="link_content"><div class="link_title">https://serms.top/post/7047b0e7/</div>&lt;/div&gt;</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>这是官方的介绍:</p><blockquote><p>This annotation may be used on a field or parameter as a qualifier for<br>candidate beans when autowiring. It may also be used to annotate other<br>custom annotations that can then in turn be used as qualifiers.</p></blockquote><p>简单的理解就是：<br>（1）在使用@Autowire 自动注入的时候，加上<code>@Qualifier(“test”)</code>可以指定注入哪个对象；<br>（2）可以作为筛选的限定符，我们在做自定义注解时可以在其定义上增加@Qualifier，用来筛选需要的对象。这个理解看下面的代码吧，不好解释。</p><p><strong>功能介绍</strong></p><ol><li><p><strong>首先是对（1）的理解。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们定义了两个TestClass对象，分别是testClass1和testClass2</span></span><br><span class="line"><span class="comment">//我们如果在另外一个对象中直接使用@Autowire去注入的话，spring肯定不知道使用哪个对象</span></span><br><span class="line"><span class="comment">//会排除异常 required a single bean, but 2 were found</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;testClass1&quot;)</span></span><br><span class="line">    TestClass <span class="title function_">testClass1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestClass</span>(<span class="string">&quot;TestClass1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(&quot;testClass2&quot;)</span></span><br><span class="line">    TestClass <span class="title function_">testClass2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestClass</span>(<span class="string">&quot;TestClass2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是正常的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此时这两个注解的连用就类似 @Resource(name=&quot;testClass1&quot;)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;testClass1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> TestClass testClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testClassList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@Autowired 和@Qualifier 这两个注解的连用在这个位置就类似 @Resource(name=“testClass1”)</p></li><li><p><strong>对(2)的理解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">//我们调整下在testClass1上增加@Qualifier注解</span></span><br><span class="line">    <span class="meta">@Qualifier</span></span><br><span class="line">    <span class="meta">@Bean(&quot;testClass1&quot;)</span></span><br><span class="line">    TestClass <span class="title function_">testClass1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestClass</span>(<span class="string">&quot;TestClass1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;testClass2&quot;)</span></span><br><span class="line">    TestClass <span class="title function_">testClass2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestClass</span>(<span class="string">&quot;TestClass2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="comment">//我们这里使用一个list去接收testClass的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;TestClass&gt; testClassList= Collections.emptyList();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testClassList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们调用得到的结果是</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">     &#123;</span><br><span class="line">        &quot;name&quot;: &quot;TestClass1&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">       &quot;name&quot;: &quot;TestClass2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到所有的 testclass 都获取到了。接下来我们修改下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier</span> <span class="comment">//我们在这增加注解</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;TestClass&gt; testClassList= Collections.emptyList();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testClassList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和上面代码对比就是在接收参数上增加了@Qualifier 注解，这样看是有什么区别，我们调用下，结果如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">     &#123;</span><br><span class="line">        &quot;name&quot;: &quot;TestClass1&quot;</span><br><span class="line">     &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>返回结果只剩下增加了@Qualifier 注解的 TestClass 对象，这样我们就可以理解官方说的标记筛选是什么意思了。<br>另外，@Qualifier 注解是可以指定 value 的，这样我们可以通过 values 来分类筛选想要的对象了，这里不列举代码了~</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p>@Resource 用法与<code>@Autowired</code>用法 用法相似，也是做依赖注的，从容器中自动获取 bean。但还是有一定的区别。</p><ul><li>在启动 spring 的时候，首先要启动容器；</li><li>启动 spring 容器时，会默认寻找容器扫描范围内的可加载 bean，然后查找哪些 bean 上的属性和方法上有@Resource 注解；</li><li>找到@Resource 注解后，判断@Resource 注解括号中的 name 属性是否为空，如果为空：看 spring 容器中的 bean 的 id 与@Resource 要注解的那个变量属性名是否相同，如相同，匹配成功；如果不相同，看 spring 容器中 bean 的 id 对应的类型是否与@Resource 要注解的那个变量属性对应的类型是否相等，若相等，匹配成功，若不相等，匹配失败。</li><li>如果@Resource 注解括号中的 name 属性不为空，看 name 的属性值和容器中的 bean 的 id 名是否相等，如相等，则匹配成功；如不相等，则匹配失败。<br>示例如下：</li></ul><p><strong>@Resource 注解注解的 name 属性不为空</strong></p><p><strong>首先创建 Person 类，并纳入容器中管理：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzj.springboot.resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*纳入容器中后，bean的id名字为ps*/</span></span><br><span class="line"><span class="meta">@Component(value=&quot;ps&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------say()------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后创建 Man 类，类中的属性依赖 Person 类型的 bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzj.springboot.resource;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从容器中取id名字为ps的bean，如果找不到该bean，spring启动过程中就会报错，表示把Man类型的bean注入到容器中不成功，因为person的属性依赖注入的时候就出错了，所以创建Man的bean的时候肯定不成功。*/</span></span><br><span class="line">    <span class="meta">@Resource(name=&quot;ps&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*依赖注入失败，因为Person类型注入到容器中的bean的id指定为ps,所以从容器中获取id为person的bean就会失败*/</span></span><br><span class="line">    <span class="comment">//  @Resource(name=&quot;person&quot;)</span></span><br><span class="line">    <span class="comment">//  private Person ps;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">        person.say();</span><br><span class="line">        System.out.println(<span class="string">&quot;------work()------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages=&quot;com.lzj.springboot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(App.class);</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> app.run(args);</span><br><span class="line">        <span class="comment">/*从容器中获取Man类型的bean，如果Man类型的bean注入到容器成功，此时就能获取到；如果注入不成功，则获取不到。注入不成功，就会有可能是Man中的@Resource注解的依赖注入没有成功*/</span></span><br><span class="line">        context.getBean(Man.class).work();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动工程，输出如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">------say()------</span><br><span class="line">------work()------</span><br></pre></td></tr></table></figure><p><strong>@Resource 注解注解的 name 属性为空</strong></p><p><strong>1、@Resource 要注解的那个变量属性与容器中的 bean 的 id 的名字相等</strong><br>启动类和 Person 的类与相面一样，下面直接修改 Man 类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Resource注解的属性变量ps与容器中的bean的id名字ps相等，可以匹配*/</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Person ps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">        ps.say();</span><br><span class="line">        System.out.println(<span class="string">&quot;------work()------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、@Resource 要注解的那个变量属性与容器中的 bean 的 id 的名字不相等<br>启动类和 Person 的类与相面一样，下面直接修改 Man 类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Resource注解的属性变量ps与容器中的bean的id名字ps不相等，然后通过bean的类型判断：person变量属性的类型为Person类，容器中的id为ps的bean的类型也为Person类型，因此此种情况下也可以匹配*/</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">        person.say();</span><br><span class="line">        System.out.println(<span class="string">&quot;------work()------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h2 id="配置类相关"><a href="#配置类相关" class="headerlink" title="配置类相关"></a><strong>配置类相关</strong></h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration:"></a>@Configuration:</h3><details class="folding-tag" cyan><summary> @Configuration注解 </summary>              <div class='content'>              <p>作用：用于指定当前类是一个 spring 配置类， 当创建容器时会从该类上加载注解。 获取容器时需要使用<br><code>AnnotationApplicationContext</code>(有<code>@Configuration</code> 注解的类.class)<br>细节:当配置类作为<code>AnnotationConfigApplicationContext</code>对象创建的参数时，该注解可以不写。</p><details class="folding-tag" blue><summary> 建议看一下这个 </summary>              <div class='content'>              <p><a href="Configuration注解使用"  title="https://serms.top/post/1d0508a6/" referrerPolicy="no-referrer" class="link_card"><div class="link_icon"><img src="https://serms.top/img/favicon.png" class="no-lightbox"></div><div class="link_content"><div class="link_title">https://serms.top/post/1d0508a6/</div>&lt;/div&gt;</a></p><p>在使用@Bean 注解的时候必须配合@Configuration 来使用: <strong><a href="https://blog.csdn.net/qq_41907991/article/details/106008651?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164933918316782092931312%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164933918316782092931312&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-106008651.142^v7^control,157^v4^control&amp;utm_term=%40Configuration&amp;spm=1018.2226.3001.4187">原因</a></strong></p>              </div>            </details>              </div>            </details><p>未学习的注解:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class, ByteArrayUtil.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span> <span class="comment">//告诉Spring这是一个配置类 === 配置文件</span></span><br><span class="line"><span class="comment">//@ConditionalOnBean(name = &quot;tom&quot;)    //条件注解 有某个组件才注入容器</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span>   <span class="comment">//条件注解 没有某个组件才注入容器</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="comment">//1. 开启Car配置绑定功能</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;Car.class&#125;)</span></span><br><span class="line"><span class="comment">//2, 把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/car&quot;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Spring全家桶注解解析</summary>
    
    
    
    <category term="Spring" scheme="https://blog.serms.top/categories/Spring/"/>
    
    <category term="Spring注解" scheme="https://blog.serms.top/categories/Spring/Spring%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="Java" scheme="https://blog.serms.top/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://blog.serms.top/tags/Spring/"/>
    
    <category term="Spring注解" scheme="https://blog.serms.top/tags/Spring%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="Java" scheme="https://blog.serms.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Idea中Maven项目添加web模块</title>
    <link href="https://blog.serms.top/post/3208ee03/"/>
    <id>https://blog.serms.top/post/3208ee03/</id>
    <published>2022-04-03T09:07:10.000Z</published>
    <updated>2023-09-01T03:47:56.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="教程步骤"><a href="#教程步骤" class="headerlink" title="教程步骤"></a>教程步骤</h2><details class="folding-tag" cyan open><summary> 点击查看教程 </summary>              <div class='content'>              <p>1.首先创建一个 Maven 项目，一路 next，起下项目名字</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403171155529.png" alt=""></p><p>2.建好之后就是这个样子</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403171554797.png" alt=""></p><p>3.然后右键项目找到 open modules setting (打开模块设置) 或者快捷键 ctrl+shift +alt+s 或者右上角有个类似文件夹的图标</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403171742797.png" alt=""></p><p>4.打开以后点 Modules 点项目名点 add 找到 web</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403172017430.png" alt=""></p><p>5.然后修改 web.xml 和 web 资源目录的路径</p><div class="tip warning faa-horizontal animated"><p>注意:路径修改如果你不懂就放我写的路径:<wavy>项目名\src\main\webapp\ …..</wavy></p></div><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403172956018.png" alt=""></p><p>xml 和资源路径应该放在同一个 webapp 下面</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403173108342.png" alt=""></p><div class="tip warning faa-horizontal animated"><p>注意:修改完后点击确定,他会提示你说没有 webapp 这个项目是否创建,点击创建即可</p></div><p>创建完成的样子:</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174021409.png" alt=""></p><p>6.创建 Web application Exploded</p><p>依然还是打开模块设置&gt;选择模块&gt;点击刚刚创建好的 web 目录,如果下面有黄色三角感叹号的提示的话,咱们可以直接点击右侧的创建</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174050465.png" alt=""></p><p>如果没有的话: 点击 artifacts 点+号 选择 Web application Exploded，From Modules 选择项目。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174353863.png" alt=""></p><p>之后即可点击应用和确定就行</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174445834.png" alt=""></p><p>7.然后添加一个 tomcat 点 fix 选择刚才新建的 artifacts</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174606202.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174704803.png" alt=""></p><p>8.修改 Application context 为项目名 就完成了 去新建一个 html 页面访问一下,这里就完成了 web 模块的添加</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174937843.png" alt=""></p>              </div>            </details>]]></content>
    
    
    <summary type="html">Idea新版如何添加Web模块</summary>
    
    
    
    <category term="Maven" scheme="https://blog.serms.top/categories/Maven/"/>
    
    
    <category term="Maven" scheme="https://blog.serms.top/tags/Maven/"/>
    
  </entry>
  
</feed>
